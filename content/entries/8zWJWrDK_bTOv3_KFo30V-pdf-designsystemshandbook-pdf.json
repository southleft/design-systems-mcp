{
  "id": "8zWJWrDK_bTOv3_KFo30V",
  "title": "PDF: Designsystemshandbook.pdf",
  "source": {
    "type": "pdf",
    "location": "local-content-library/Designsystemshandbook.pdf",
    "ingested_at": "2025-06-25T19:52:34.026Z"
  },
  "content": "\n\n112ChapterC 20Ct.Ipnoddu\n\n212ChapterC 20Ct.Ipnoddu\nContents\nChapter 01. Introducing design systems 4\nChapter 02. Designing your design system 17\nChapter 03. Building your design system 51\nChapter 04. Putting your design system into practice 79\nChapter 05. Expanding your design system 107\nChapter 06. The future of design systems 123\nChapter 07. Appendix 142\n\n312ChapterC 20Ct.Ipnoddu\nBy Marco Suarez, Jina Anne, Katie Sylor-\nMiller, Diana Mounter, and Roy Stanfield\nA design system unites product teams around a \ncommon visual language. It reduces design debt, \naccelerates the design process, and builds bridges \nbetween teams working in concert to bring products \nto life. Learn how you can create your design system \nand help your team improve product quality while \nreducing design debt.\n\nChapter—01\nIntroducing design \nsystems\nThe power of scale\nBy Marco Suarez\n\n512ChapterC 20Ct.Ipnoddu\nIn the 1960s, computer technology began outpacing the speed of \nsoftware programming. Computers became faster and cheaper, \nbut software development remained slow, difficult to maintain, and \nprone to errors. This gap, and the dilemma of what to do about it, \nbecame known as the “software crisis.”\nFigure 1: A UI audit collects the many permutations of \nsimple UI elements to illustrate how deep in design debt \nyour team is.\nIn 1968, at the NATO conference on software engineering, \nDouglas McIlroy presented component-based development as a \npossible solution to the dilemma. Component-based development \nprovided a way to speed up programming’s potential by making \ncode reusable, thus making it more efficient and easier to scale. \nThis lowered the effort and increased the speed of software \ndevelopment, allowing software to better utilize the power of \nmodern computers.\n\n612ChapterC 20Ct.Ipnoddu\nNow, 50 years later, we’re experiencing a similar challenge, but this \ntime in design. Design is struggling to scale with the applications \nit supports because design is still bespoke— tailor-made solutions \nfor individual problems.\nHave you ever performed a UI audit and found you’re using a few \ndozen similar hues of blue, or permutations of the same button? \nMultiply this by every piece of UI in your app, and you begin to \nrealize how inconsistent, incomplete, and difficult to maintain your \ndesign has become.\nFor design in this state to keep up with the speed of development, \ncompanies could do 1 of 3 things:\n01. Hire more people\n02. Design faster\n03. Create solutions that work for multiple problems\nEven with more hands working faster, the reality is bespoke design \nsimply doesn’t scale. Bespoke design is slow, inconsistent, and \nincreasingly difficult to maintain over time.\nDesign systems enable teams to build better products faster \nby making design reusable—reusability makes scale possible. \nThis is the heart and primary value of design systems. A design \nsystem is a collection of reusable components, guided by clear \nstandards, that can be assembled together to build any number of \napplications.\nFor more than 50 years, engineers have operationalized their \nwork. Now it’s time for design to realize its full potential and \njoin them.\n\n712ChapterC 20Ct.Ipnoddu\nScaling design with \nsystems thinking\nYou’re probably well aware that design systems have become a bit \nof a hot topic in the software industry these days—and for good \nreason. Design is scaling. Many businesses are investing in design \nas they recognize that the customer experience of their products \noffers a competitive advantage, attracts and retains customers, \nand reduces support costs.\nHere are what things usually look like inside a company that’s \ninvesting in design:\n ÒThe design team is growing\n ÒDesign is embedded in teams throughout the company, \nmaybe in multiple locations\n ÒDesign is playing a key role in all products on all platforms\nIf you’re a designer, this sort of investment in design may sound \nexciting, but with it comes many challenges. How will you design \nconsistent UIs across platforms when many teams own various \nparts of your products? How will you empower all of these teams \nto iterate quickly? How will you maintain the inevitable design debt \nthat will build up as many designers create new and tailor-made \ndesigns?\nTo understand how creating a design system can address these \nchallenges, we must understand what design systems are. \nDesign systems marry two concepts with individual merit, making \nsomething more powerful than its separate parts.\n\n812ChapterC 20Ct.Ipnoddu\nIt wasn’t hard to get them to follow the \nguidelines, it was hard to get them to agree \non  the guidelines.\nLori Kaplan — ATLASSIAN\nStandards\nUnderstanding not only the what, but the why, behind the design \nof a system is critical to creating an exceptional user experience. \nDefining and adhering to standards is how we create that \nunderstanding. Doing so removes the subjectivity and ambiguity \nthat often creates friction and confusion within product teams.\nStandards encompass both design and development. Standardizing \nthings like naming conventions, accessibility requirements, and \nfile structure will help teams work consistently and prevent errors.\nVisual language is a core part of your design standards. Defining \nthe purpose and style of color, shape, type, icons, space, and \nmotion is essential to creating a brand aligned and consistent \nuser experience. Every component in your system incorporates \nthese elements, and they play an integral role in expressing the \npersonality of your brand.\nWithout standards, decisions become arbitrary and difficult to \ncritique. Not only does this not scale, it creates an inconsistent \nand frustrating user experience.\n\n912ChapterC 20Ct.Ipnoddu\nComponents\nComponents are portions of reusable code within your system and \nthey serve as the building blocks of your application’s interface. \nComponents range in complexity. Reducing components to a single \nfunction, like a button or a drop down increases flexibility, making \nthem more reusable. More complex components, like tables for \nspecific types of data, can serve their use cases well, but this \ncomplexity limits the number of applicable scenarios. The more \nreusable your components are, the less you need to maintain, and \nthe easier scale becomes.\nLearn more about building components in “Chapter 3: Building \nyour design system.”\nHaving technical knowledge of the Macintosh \nuser interface is a key factor in product \ndesign, but understanding the theories \nbehind the user interface can help you create \nan excellent product.\nMacintosh HIG — APPLE\nComponent-based development reduces technical overhead by \nmaking code reusable. Standards govern the purpose, style, and \nusage of these components. Together, you equip your product \nteam with a system that is easy to use, and you give them an \nunderstanding that clearly links the what with the why.\n\n1012ChapterC 20Ct.Ipnoddu\nPRO TIP — Transcend platforms\nYour visual language can transcend platforms to create \ncontinuity across web, iOS, Android, and email. Document \nand display your visual language in a prominent place within \nyour design system’s site. This will help inform system \ncontributors about how components should look and behave.\nFor instance, Google’s Material Design dives deep into every \naspect of their visual language: Check out their page on color.\nThe value of design systems\nLet’s take a detailed look at the many ways a design system can be \na much-needed painkiller for your growing pains.\nScale design\nAs teams grow, it’s common for designers to concentrate on \ndiscrete areas of an app like search and discovery, account \nmanagement, and more. This can lead to a fragmented visual \nlanguage—like a Tower of Babel of design—with each designer \nspeaking her own language. This happens when designers solve \nproblems individually and not systematically.\nWith no common design language to unite the product, the user \nexperience starts to break down, as does the design process. \nDesign critiques become unproductive when there’s a dearth of \ndesign conventions. To create alignment within teams, there must \nbe a shared source of truth—a place to reference official patterns \nand styles.\n\n1112ChapterC 20Ct.Ipnoddu\nMost often this is a static artifact, such as a design mock, but a \nstatic reference will almost immediately become outdated. That’s \nwhy teams build monuments like Shopify’s Polaris site—a design \nsystem site, built with the system, that documents all aspects of \nthe system including the components, guidelines, and UX best \npractices. And because it is built with the system, it will always be \nup-to-date.\nAn internal design systems site is the best, most accessible source \nof truth for product teams. It provides the gravitational pull to keep \nteam members aligned and in sync.\nJesse Bennett-Chamberlain (Shopify)\nListen Online \nCircumstances For Investing In Polaris\nManage your debt\nAs applications and their teams age, they build debt. Not financial \ndebt, but technical and design debt. Debt is acquired by building \nfor the short-term. Design debt is made up of an overabundance \nof non-reusable and inconsistent styles and conventions, and the \ninterest is the impossible task of maintaining them. Over time, \nthe accumulation of this debt becomes a great weight that slows \ngrowth.\nThe act of creation does not inherently create debt—just like \nspending money doesn’t inherently create financial debt. But using \na design system will keep you on budget by keeping your design \n\n1212ChapterC 20Ct.Ipnoddu\nand code overhead low, while still allowing you to grow and evolve \nyour application.\nDesign consistently\nStandardized components used consistently and repetitively \ncreate a more predictable and easy to understand application. \nStandardized components also allow designers to spend less \ntime focused on style and more time developing a better user \nexperience.\nPrototype  faster\nWorking within an existing design system allows you to piece \ntogether flows and interactions as quickly as pulling LEGO blocks \nfrom a bin. This allows you to build an endless amount of prototypes \nand variants for experimentation, helping your team gain insights \nand data fast.\nIterate  more  quickly\nWhether evolving the style of your UI or making UX changes to a \nflow, using a design system reduces effort from hundreds of lines \nof code to as little as a few characters. This makes iterations quick \nand painless, and experimentation much faster.\n\n1312ChapterC 20Ct.Ipnoddu\nImprove usability\nInconsistent interface conventions hinder usability. When CSS \nfor countless unique interface elements and their interactions \nincrease, so does cognitive load and page weight. This makes \nfor a terrible user experience. It can also create conflicting CSS \nand JavaScript, potentially breaking your app. By using a design \nsystem, you’re able to avoid these conflicts by building a holistic \nlibrary of components, instead of per page, which means you’ll \nspend less time in quality assurance.\nBuild in accessibility\nAccessibility can be implemented at the component level by \noptimizing for those with disabilities, on slow Internet speeds, \nor on old computers. This is an easy usability win. In “Chapter \n3, Building your design system,” Katie Sylor-Miller explains how \ndesign systems can help improve your product’s accessibility and \ncompliance with your country’s laws.\nMyths of design systems\nEven with all their benefits, buy-in for creating a design system \ncan still be a hard sell internally. Designers can feel limited or \nrestrained, but often these perceived weaknesses are the \ngreatest strengths of a design system.\nLet’s debunk common myths you’ll hear as you sell the idea of \ncreating a design system.\n\n1412ChapterC 20Ct.Ipnoddu\nMyth 1: Too limiting\nMyth: Designers embedded in discrete areas of an app see \nqualities that may be different from other areas. Because of this, a \nuniversal system is perceived as being too limiting and might not \nserve the needs of these specific areas.\nReality: Designers often end up creating custom solutions to \nimprove discrete areas of the app, adding to design and technical \ndebt. With a design system, new solutions can be created and fed \nback into the system.\nMyth 2: loss of creativity\nMyth: If designers are restricted to using a design system, then \ndesigners will no longer be free to explore style. Front- end \nbacklogs are often full of design style updates. Evolving the visual \nstyle of an app is typically no small task. This can also be a great \nrisk, as it removes resources from new feature work and may \nnegatively impact usability.\nReality: The components of a design system are interdependent. \nThis means when a change is made in one location, the change \nwill be inherited throughout the whole system. This makes style \nupdates within a system trivial in effort but much greater in \nimpact. What once was weeks— if not months—of work, can now \nbe accomplished in an afternoon.\nMyth 3: one and done\nMyth: Once the design system is designed and built, the work is \ncomplete.\n\n1512ChapterC 20Ct.Ipnoddu\nReality: A design system is living, meaning it will require ongoing \nmaintenance and improvements as needs arise. Because your \napplication is powered by the reusable components of your system, \nhowever, the application automatically inherits improvements to \nthe system, lowering the effort to maintain the application. This is \nthe power of scaling that a design system offers.\nA lot of the original vision was about the visual  \nidentity...we started to understand that it had  \nto be a system with really strong interaction  \ndesign fundamentals as well.\nRich FULCHER — GOOGLE\nConclusion\nDesign systems are not a fad or even an untested hypothesis. \nFor design to find the scale necessary to match the rapid growth \nof technology, component-based design and development is a \nproven and dependable solution.\nNow that you’ve seen the true value of creating a design system, \nlet’s dive into the actual design process in the next chapter.\n\n1612ChapterC 20Ct.Ipnoddu\nFurther reading\n01. Software Crisis\n02. Component-based Software Engineering\n03. The Way We Build\n04. Designed for Growth\n05. Selling a Design System before asking for buy-in\n06. The Design of Everyday Things\n07. What is a Design Language... really?\n08. Things you could be doing instead of designing and building  \nthat card component for the umpteenth time\n09. Website Style Guide Resources\n10. Making Material Design\n11. Material Design\n12. Shopify Polaris\n13. Starting a Design System\n\nChapter — 02\nDesigning your \ndesign system\nStep by step\nBy Jina Anne\n\n1812ChapterC 20Ct.Ipnoddu\nStarting a design system can feel daunting. There are so many \nthings to consider: the design style, how to design for modularity \nand scalability, how it will be used by other teams, how to sell the \nidea to the decision makers in the company. Where is a designer \nto start?\nBig problems are always more manageable when broken into \nsmaller pieces. Before diving into the design process, start by \nconsidering who needs to be involved in the creation of your \ndesign system and how the team will work together.\nOnce you’ve got the right people assembled, you’re ready to start \nthinking about the design language of the system, which will \ninclude color, typography, spacing, and more. Your visual design \nlanguage will be the foundation of your UI library—a series of \ncomponents that can be assembled to create an interface quickly.\nLet’s take a step-by-step look at how you can start designing your \ndesign system.\nWho should be involved\nBefore beginning work on your design system, take a moment to \nthink about the team you’ll need to bring it to life. Who needs to \nbe involved? Spoiler alert! You’re going to need more than just \ndesigners.\n\n1912ChapterC 20Ct.Ipnoddu\nWe have this program called the guild...  \nessentially we take one person from each  \npillar...and for our design system we use them  \nas our user research group.\nRachel cohen — LINKEDIN\nHere’s a quick list of the disciplines that can be represented in your \nteam to create an effective design system:\n ÒDesigners to define the visual elements of the system\n ÒFront-end developers to create modular, efficient code\nAccessibility experts to ensure your system conforms to standards \nlike WCAG\n ÒContent strategists who can help the team nail the voice \nand tone of the system\n ÒResearchers who can help you understand customer \nneeds\n ÒPerformance experts who can ensure your system loads \nquickly on all devices\n ÒProduct managers to ensure the system is aligning to \ncustomer needs\n ÒLeaders (VPs and directors) to champion and align the \nvision throughout the company including up to executive \nleadership\n\n2012ChapterC 20Ct.Ipnoddu\nOnce you’ve got the right skillsets represented in the design \nsystems team, identify strong leaders to represent each area who \ncan drive decisions forward. Know who on the team can advocate \nfor the areas of the design system.\nWith a team of experts guided by strong leadership, your next task \nis to establish the right team model to help you achieve your goals.\nChoosing the right team model\nThe team model that brings people together is as important \nas the team creating your design system. In “Team Models  for \nScaling a Design System,” design systems veteran Nathan Curtis \noutlines three popular team models used in many companies.\nThe solitary model: an “overlord” rules the design system.\nFigure 1: The solitary design system team model—one \nperson rules it all. Image by Nathan Curtis, reused \nwith permission.\nThe centralized team model: A single team maintains the design \nsystem as their full time job.\n\n2112ChapterC 20Ct.Ipnoddu\nFigure 2: The centralized design system team model—\none team rules the system. Image by Nathan Curtis, \nreused with permission.\nThe federated model: team members from across the company \ncome together to work on the system.\nFigure 3: The federated design system team model—\npeople from various teams assemble to manage and \ngovern the system. Image by Nathan Curtis, reused with \npermission.\nThere are strengths and weaknesses in each of the above \nmodels. A solitary model is fast and scrappy, but with one person \nin charge of so much the “overlord” can become a bottleneck to \nthe completion of many tasks. . A centralized team keeps the \nsystem well maintained, but they may not be as connected to the \n\n2212ChapterC 20Ct.Ipnoddu\ncustomers’ needs as they may be less involved in user research. \nAnd a federated team has great insight into what is needed for \nall the product features and user needs, but can be quite busy \nworking on those areas already.\nMany teams are moving away from the solitary model to the \ncentralized or federated model because, as Nathan mentions in \nhis article, overlords don’t scale. The centralized or federated \nmodels are usually much better for scaling a design system.\nI wrote about the The Salesforce Team Model in response to \nNathan’s article. When I was at Salesforce on the Lightning  \nDesign System team, we used a combination of the centralized \nand federated models. In an enterprise organization as big as \nSalesforce, a centralized design systems team was not enough on \nits own. With so many key players involved and the large amount \nof ground we had to cover across products and platforms, we \nneeded an approach that would be more sustainable.\nFigure 4: A hybrid design system team model that we \nused at Salesforce—a central team and members of \nother teams come together to manage and govern the \nsystem.\n\n2312ChapterC 20Ct.Ipnoddu\nThough the Lightning Design System has a core team, there \nare also core contributors from many of the product and feature \nareas in the Salesforce ecosystem that act as a federation of \npractitioners who surface new ideas and make requests for the \ndesign system to evolve. Researchers, accessibility specialists, \nlead product designers, prototypers, and UX engineers work \nwith the central design system team to both consume and help \nestablish the patterns, components, and the overall design system. \nEngineers refine all code to make sure the system is performant \nand production ready.\nThough the solitary model is less popular in most teams because \nthe primary contributor can become a bottleneck, there are \nsituations where it can work quite well. In the midst of a political \ncampaign moving at breakneck speeds, Mina  Markham had little \ntime to bring in reinforcements as she developed new online assets \nfor Hillary Clinton. She created a design system called Pantsuit to \nhelp many teams in many locations expedite design and production \nwhile maintaining consistency in the campaign brand. The solitary \nmodel let Mina focus on speed first and longevity second, which is \na different tack than a typical enterprise might take.\nFigure 5: Pantsuit, a design system created by Mina \nMarkham for the 2016 Hillary Clinton campaign.\n\n2412ChapterC 20Ct.Ipnoddu\nAs you determine what team model works for you, consider your \ngoals. If you want to move fast, the solitary method is ideal initially, \nthough some work may need to be done later to fully adopt it across \nother teams. If you want to move fast, but want to encourage buy-\nin from the start, consider the centralized team model. And to get \nthe most buy-in and shared ownership, the federated model is \na good option. In any case, remember that a design system is a \nproduct so staff it like a product instead of a project; you want \npeople committed to maintaining and evolving it.\nWith the team and the model that organizes them established, \nit’s time to start your design system just as you would any new \nproduct: by talking to your customers.\nInterviewing  customers\nAs with any product design process, it’s important to do your \nresearch. Who will be using your design system and how will they \nuse it? Your design system will get used much more often if you \ncreate it to fit into the workflow of other teams. By interviewing \nusers, you can pinpoint problems ahead of time, define principles \nthat will help others use the system properly, and focus your \nenergies on the things that will be most important.\n\n2512ChapterC 20Ct.Ipnoddu\nPRO TIP — Building empowering style guides with practical \nresearch\nIsaak Hayes and Donna Chan delivered an interesting talk \ntitled, “Building Empowering Style Guides with Practical \nResearch (https://dbtr.co/empowering-style-guides),” at \nClarity Conference (https://dbtr.co/clarity-conf). The talk \nproposes a series of useful techniques that can help you \nconduct research effectively for your design system. After \nthe interviews, they use the data to create design principles, \nmetrics, and user stories.\nA less common group of people to interview are members of your \nopen source community. This is likely in organizations that provide \ndeveloper tools for their customer and partner communities. If \nyou plan to open source your design system—a potentially bigger \nproject—then you’ll need to speak with potential contributors and \nconsumers to discover what use cases your design system will \nneed to satisfy.\nAnd then there are the executives, leaders, and management. It \nis important to get their thoughts as well. You will need their buy-\nin to support and fund the system. Listen to their concerns and \nuse them as actionable goals and metrics to achieve. Examples of \nrequests might be faster shipping of features, better performance, \nand improved UI quality.\n\n2612ChapterC 20Ct.Ipnoddu\nWith insights in hand from customer interviews, it’s time to take \nan inventory. There are two types of interface inventories to be \ncreated:\n ÒAn inventory of the visual attributes (such as spacing, \ncolor, and typography), which will help us create a codified \nvisual language\n ÒAn inventory of each UI element (such as buttons, cards, \nand modals), which will help us create a UI library of \ncomponents\nLet’s first focus on a global visual inventory. We’ll get to the UI \nelement inventory later.\nCreating a visual inventory\nOf course, if you’re starting a design system for a product that \ndoesn’t yet exist you can skip this step and jump straight to \ncreating a visual language for your new product. Lucky you!\nConducting a Visual Audit\nAs we start to take inventory, it’s good practice to take a look at \nthe CSS used to create all of those elements you just captured in \nyour visual inventory. Use a tool like CSS Stats to see how many \nrules, selectors, declarations, and properties you have in your style \nsheets. More relevant, it will show you how many unique colors, \nfont sizes, and font families you have. It also shows a bar chart for \nthe number of spacing and sizing values. This is a great way to see \nwhere you can merge or remove values.\n\n2712ChapterC 20Ct.Ipnoddu\nFigure 6: Facebook’s 38 unique text colors found by CSS \nStats.\nIf you’re creating an inventory in Sketch use the Sketch-Style-\nInventory plugin to aggregate all colors, text styles, and symbols \nquickly. It also gives you the ability to merge similar styles into one.\nCreating a visual  design language\nI must admit, as an art school graduate the visual design language \nin a design system is my favorite part to work on. I love thinking \nabout color theory, typography, and layout, which are at the core \nof any design system.\n\n2812ChapterC 20Ct.Ipnoddu\nIf we break apart each component of a design system we find these \nfundamental elements that make up its visual design language:\n ÒColors\n ÒTypography (size, leading, typefaces, and so on)\n ÒSpacing (margins, paddings, positioning coordinates, \nborder spacing)\n ÒImages (icons, illustrations)\nDepending on your needs, you may also include the following to \nfurther standardize the user experience:\n ÒVisual form (depth, elevation, shadows,  \nrounded corners, texture)\n ÒMotion\n ÒSound\nConsider the role each of these design elements plays in a simple \ncomponent like a button. A button typically has a background \ncolor, typography for the label, and spacing inside it. There may \nbe an icon next to the label to create a visual cue. A border on \nthe edge serves as simple ornamentation and may even round the \ncorners. Finally, hovering over or clicking the button could trigger \nanimation or sound as feedback to the user. Though a button may \nseem simple, there are many design decisions required to bring it \nto life.\n\n2912ChapterC 20Ct.Ipnoddu\nFigure 7: The many variations of buttons in the Buzzfeed \nSolid design system: buttons applied to both button \nelements and links, in the following modifiers: primary, \nsecondary, transparent, negative, white, disabled, with \nicons, social, small, small with icons, small social, as well \nas a custom button that you can color to your needs.\nDesign tokens\nBefore we dive into visual design standards, I want to discuss \ndesign tokens. Design tokens are the “subatomic” foundation of \na design system implementation. At its simplest, they are name \nand value pairs stored as data to abstract the design properties \nyou want to manage. With the values for all design tokens stored \nin one place, it’s easier to achieve consistency while reducing the \nburden of managing your design system.\nExample: SPACING_MEDIUM: 1rem.\n\n3012ChapterC 20Ct.Ipnoddu\nIn design tokens you can store colors, spacing, sizing, animation \ndurations, etc, and distribute them to various platforms.\nFigure 8: Example of border radius design tokens on the \nLightning Design System.\nWe’ll look more closely at design tokens in Chapter 3.\nColor\nThe colors you choose for your design system are more than just \nan extension of your brand. A UI uses color to convey:\n ÒFeedback: Error and success states\n ÒInformation: Charts, graphs and wayfinding elements\n ÒHierarchy: Showing structured order through color and \ntypography\nCommon colors in a design system include 1-3 primaries that \nrepresent your brand. If none of these work well as a link and button \n\n3112ChapterC 20Ct.Ipnoddu\ncolor, then you may have an extra color for that as well. It’s a good \nidea to use the same color for links and button backgrounds as it \nmakes it easier for users to recognize interactive elements.\nYou’ll likely have neutrals for general UI backgrounds and borders—\nusually greys. And finally, you’ll have colors that are for states such \nas error, warning, and success. Group these colors to see how well \nthey work together and refine as needed.\nFigure 9: Color palette with design tokens in the Carbon \ndesign system.\n\n3212ChapterC 20Ct.Ipnoddu\nPRO TIP\nThe in-progress book, Programming Design Systems by \nRune Madsen, has some great chapters on color available \nonline to read, including “A short history of color theory”.\nPRO TIP — Checking color contrast\nThere are a variety of color contrast checkers (https://dbtr.\nco/color-contrast) you can use to ensure your color palette \nworks for everyone who will use your products. Be sure to \ncheck contrast ratios for background and text color pairings.\nLarger design systems sometimes include colors for objects and \nproducts. For example, at Salesforce we had a color for contacts, \nfor sales deals, or groups, and so on. We also had them for products: \nSales Cloud, Marketing Cloud, Analytics Cloud, etc. Color can be a \nhelpful wayfinding tool for your users.\nFigure 10: Colors used for objects in Salesforce.\n\n3312ChapterC 20Ct.Ipnoddu\nUsing color for wayfinding can be tricky to do while maintaining \naccessibility, as people who are color blind may not be able to \ndiscern some differences.\nDepending on how strict you want to be with your palette, you \nmay want to include a range of tints—a color mixed with white—\nand shades—a color mixed with black. Sometimes you may use \nother colors instead of white or black to avoid muddiness, such as \nan orange to darken a yellow so it doesn’t appear brown.\nThese color variations allow designers to have choices. But \nbe warned, having too many choices can lead to major design \ninconsistencies. Keep your inclusion of tints, shades, and neutral \npalettes slim to prevent misuse of the system while still giving \ndesigners the flexibility they need. You can always add more \ncolors as you find the need.\n\n3412ChapterC 20Ct.Ipnoddu\nFigure 11: The Pivotal UI style guide chooses to give a \nwide range of color tints and shades with their design \ntokens. While I personally prefer to only give a leaner set \nof options (as seen in the Sass style guide), some design \nsystems prefer to offer more choices. Consider which \napproach works for you as you balance concerns like \ncreative freedom versus tighter consistency.\nTypography\nFONTS AND WEIGHTS\nThe fonts you choose have a high impact on both your brand and \nyour user experience. Keep legibility in mind as you select the \nright fonts for your system. Keeping to common system fonts like \nHelvetica, Times New Roman, or Verdana can be a great shortcut, \nas they are familiar to the user’s eye. Some companies prefer \ncustom web fonts to better reflect their brand, but pay special \nattention to how you use them as performance can be affected.\nMost design systems I’ve worked on include just two typefaces: \none font for both headings and body copy, and a monospace \n\n3512ChapterC 20Ct.Ipnoddu\nfont for code. Sometimes there’s an additional font for headings \nthat compliments the body font. Most design systems do not \nhave a need for more, unless you have a system that supports \nmultiple brands. It’s best to keep the number low as it’s not only a \nbest practice of typographic design, it also prevents performance \nissues caused by excessive use of web fonts.\n“Line spacing (leading) is at least space- and-a-half within \nparagraphs, and paragraph spacing is at least 1.5 times \nlarger than the line spacing.”\nWEB CONTENT\nACCESSIBILITY GUIDELINES \n(WCAG) 2.0\nW3C\n\n3612ChapterC 20Ct.Ipnoddu\nFigure 12: Google’s Roboto shown in varying weights.\nThese days it’s trendy to use a font at a very thin weight, but be \naware that legibility can become an issue. If you want to use light \nor thin weights, only use them at larger text sizes.\nTYPE SCALE\nWhen selecting the size to set your type, consider the legibility of \nthe font you’ve chosen. In most cases, a 16px font size works well. \nIt’s the default font size in most browsers, and it’s quite easy to \nread for most people. I like using 16px as it works with the 4-based \nmetrics used by Apple and Google (and is gaining traction as the \nstandard approach). I recommend this as your baseline, though I \nwould use it in a relative format like 1rem for CSS-based systems.\nYou can use a modular scale for larger or smaller font sizes for \nother elements such as headings. A modular scale is a set of \nnumbers in which you have 1 base number, and a ratio to generate \n\n3712ChapterC 20Ct.Ipnoddu\nthe next number. You keep applying the ratio to the new number \nto get yet another number.\nPRO TIP — Understanding modular scale\nLearn more about modular scales to create more meaningful  \ntypography.\nFigure 13: The Modular Scale tool helps you find one \nthat works for you. It even provides a Sass version of \nthe tool, which you could add to your design token set.\nAs you design your type treatments, be sure to give thought to \nhow it will respond to various screen sizes to maintain legibility. \nYou won’t want your headings to be too large for mobile devices. \nAnd for much larger displays, you have the room to bump up sizes.\nA common method is to enlarge headings on larger viewports. \nYou can also use viewport units to scale your type based on a \npercentage of your screen size.\n\n3812ChapterC 20Ct.Ipnoddu\nLEADING\nLeading, or line-height in CSS, can improve readability and \naesthetics of your typography. While the best line-height can vary \ndepending on the font face and the line length, a general rule of \nthumb is to have leading at around 1.4–1.5x the font-size. 1.5 is \nrecommended by the W3C Web Accessibility Initiative.\nIt also makes your math more predictable, but you don’t have \nto calculate it. You can define your line-height without a unit of \nmeasurement and the browser will do all the hard math for you.\nFor headings, tighten it up depending on your typeface. In most \ncases, I find a 1.25 or 1.125 ratio works quite well.\nFigure 14: Tachyons also use 1.5 for body and 1.25 for \nheadings.\n\n3912ChapterC 20Ct.Ipnoddu\nSPACING AND SIZING\nThe system you use for spacing and sizing looks best when you \nhave rhythm and balance. This means using numbers based on \npatterns and proportions. Using a consistent spacing scale also \npromotes maintainability through ratios by making layouts more \npredictable and more likely to “fit” and align well.\nWhen I designed an Android app, I studied Google’s design \nguidelines. I noticed a pattern of using 8dp between elements and \n16dp for outer gutters. It broke me out of using a 10-based scale \nI was accustomed to, as I found that 4-based worked so much \nbetter.\nA 4-based scale is growing in popularity as the recommended \nscale for many reasons. Both iOS and Android use and recommend \nmetrics that are divisible by or multiples of 4. Standard ICO size \nformats, which are used by most operating systems, for icons \ntended be 4-based (16, 24, 32, etc.) so that they scaled more easily. \nThe browser’s default font size is usually 16. When everything is \nusing this system, things are more likely to fit in place and line up. \nAnd finally, responsive math works out well.\n\n4012ChapterC 20Ct.Ipnoddu\nFigure 15: The Google Android design guidelines (before \nthis site was replaced by material design). Studying \nthese guidelines made me a better mobile designer.\nFor horizontal spacing, an 8-based scale works quite well. You \ncan make margins and padding equal or in proportion to the font \nsize. But for vertical spacing, I tend to use a 12-based system. This \nis due to the line-height I get of 1.5 (with the default font size of \n16px) getting us to 24.\nOccasionally, you may have to break this rule. If you’ve added a \n1px border to something, this border can throw off alignment by \na hair. So you might find yourself using a padding or margin that \nsubtracts that amount. This is something that you do on a case-\nby-case basis.\nYou probably want elements to grow and shrink with the content. \nFor general sizing, avoid setting widths and heights unless totally \nnecessary. You can achieve responsive design much easier if you \nlet elements flow to fill the space they’re given in the layout.\n\n4112ChapterC 20Ct.Ipnoddu\nImages\nFILE FORMATS\nFor icons and illustrations, I find using a vector format (SVG) \nworks best for scalability and responsive design. However, if you \nfind yourself needing to use photography, you may need to use a \nrasterized image format like JPG or PNG.\nFor most photos, illustrations, and diagrams, you can allow \nthe image to go 100% to the container or viewport and let the \nheight automatically set itself by not defining it. This works best \nfor responsive layouts. You may also want to define some preset \nwidths for images if you don’t want it to go full width (for example, \nhalf-width, a third, or a fourth). I recommend setting these as max-\nwidths so that the image can rescale for smaller screens.\nICONOGRAPHY\nBefore drawing your icons, come up with your guidelines around \nthem first. Will they be filled or outline? What is the line weight? \nWill they use more than 1 color? What sizes will they be? Is there \nan icon art boundary set inside an outer boundary?\nYou may have different styles for different icon types. For example, \nutility and action icons (like a notifications bell or a settings cog \nicon) may be solid and one color, while navigation icons may be \nmulticolored and more creative. Clear guidelines will keep your \nicons unified.\n\n4212ChapterC 20Ct.Ipnoddu\nFigure 16: Apple shows the different icon types in their \necosystem: app icons, glyphs, and glyphs used on color.\nILLUSTRATIONS\nIllustrations are a great way to add some character to your product. \nYou can use these for empty states, loading screens, modals, and \nother components that invite visual interest.\nShopify went to great lengths to produce unique illustrations for \nall of the empty states of their platform, which conveyed a strong \nsense of brand personality.\nSimilar to icons, it’s helpful to have guidelines for the style of your \nillustrations.\n\n4312ChapterC 20Ct.Ipnoddu\nFigure 17: Illustration guidelines by Al Power.\nVisual form\nVisual form, or the material quality of your UI, is about the \nbackground images, gradients, and textures, shadows and \nelevation (z-indexes), rounded corners, and borders. These are \nvisual qualities that help emphasize and decorate elements to add \nvisual hierarchy and aesthetics. In any case, all are examples of \nornamentation that need to be standardized.\nGoogle does a great job indicating how depth and elevation work \nwith layering of components.\n\n4412ChapterC 20Ct.Ipnoddu\nFigure 18: An example of depth through elevation in \nGoogle’s material design implemented through z-indexes \nand shadows.\nMotion and sound\nWhen you define your visual language, motion and sound might \nnot immediately come to mind. You experience these in a different \nway. But motion and sound can have a high impact on the \nexperience of your app. You’ll want to have that systemized as well \nfor consistency. I personally haven’t explored these areas as much \nas I’d like to admit, but there are some great examples in the wild.\n\n4512ChapterC 20Ct.Ipnoddu\nFigure 19: IBM’s animation guidelines draw upon their \nrich history of products and technology.\n\n4612ChapterC 20Ct.Ipnoddu\nCreating a user  \ninterface library\nBefore we conducted a visual inventory, which looked at the visual \nqualities of elements, such as color, spacing, and typography. \nNow, we will conduct a UI inventory, in which we look at the actual \npieces of UI—like buttons, cards, lists, forms, and more. Where \nvisual language is all about the visual approach and how things \nlook on a global visual level, a user interface library (otherwise \nknown as a pattern library) looks at actual components of a UI.\nLet’s take a look at each of these design elements and the role \nthey’ll play in your design system. Take stock of all interface \nelements in production to see just how much design debt you \nneed to address and what elements are most commonly used. \nWarning! This can get a bit depressing, as most companies have \nan intense amount of inconsistency in their UIs.\nTo create an interface inventory simply open all products in \nproduction at your organization, screenshot all buttons, forms, \nvarious type styles, images, and collect them in a slide deck or on \nbig posters where the whole team can see.\nYou can do this with cut out print-outs or through screenshots.\nGather the folks you’re involving (as mentioned earlier in this \nchapter). Have them conduct this inventory with you, either \nthrough a shared presentation or via a hands-on activity. The idea \nis to gather the different components you’re using and categorize \nand merge them.\n\n4712ChapterC 20Ct.Ipnoddu\nSome like dividing the pieces into elements, components, regions, \nutilities, and so on. Atomic Design is a great example of this line of \nthinking, which is a great conceptual model.\nBut when it comes down to it, everything is pretty much a \ncomponent, so at the end of the day, you could label all as such. \nBut in general, what I see most design systems break things down \ninto are:\n Òelements (or basics, or atoms)—these are small, stand- \nalone components like buttons and icons\n Òcomponents (or molecules, or modules)—these are usually \nan assembly of small components into a larger component \nlike a search form (which includes a form input, a button, \nand potentially even a search icon)\n Òregions (or zones, or organisms)—these are an area of the \nUI like a left-hand navigation\n Òlayouts—how the pieces are laid out on the page (like a \nheader region, followed by a sidebar and main content \narea, followed by a footer)\nAfter you complete the inventory, you can merge and remove what \nyou don’t need (either in a spreadsheet or even directly in a code \nrefactor if you want more immediate change). Also, document \nwhat the component is and when to use it. This will become your \nUI library (or pattern library, or component library, depending on \nwhat your organization chooses to call it.).\n\n4812ChapterC 20Ct.Ipnoddu\nFigure 20: The US Government agency 18F has one of \nmy favorite UI libraries: the U.S. Web Design Standards.\nMost design system documentation includes the component’s \nname, description, example, and code. Others may show meta \ndata, release histories, examples, and more. What matters most \nis that you show what’s necessary for your team to get your work \ndone.\n\n4912ChapterC 20Ct.Ipnoddu\nFigure 21: The Rizzo component library by Lonely \nPlanet.\n\n5012ChapterC 20Ct.Ipnoddu\nConclusion\nCreating a design system not only helps your team produce more \nconsistent user experiences, it also builds bridges between design \nand development. By creating a common visual language codified \nthrough design tokens, and a set of components and patterns \ncataloged in a UI library, you’ll vastly improve designer/developer \ncommunication. You’ll also have fine-tuned control of the UI in a \nway that is manageable, scalable, and robust.\nFurther reading\n01. Priyanka Godbole’s Design System article series\n02. Nathan Curtis’s Design System article series\n03. Marcin Treder’s Design System article series. Start here\n04. Brad Frost on creating interface inventories\n05. Building a large-scale design system: How we created a design \nsystem for the U.S. government by 18F\n06. Design Systems are for People by Jina Anne\n\nChapter — 03\nBuilding your  \ndesign system\nA strong foundation\nBy Katie Sylor-Miller\n\n5212ChapterC 20Ct.Ipnoddu\nModern design systems are the result of many years of evolution in \nthe way we write front-end code. When I started my career, most \nsites were built with single-use, inefficient, fragile, and inconsistent \nfront-end codebases. Through hard- won experience and many \nyears of collaboration and iteration, front-end developers have \nestablished more sophisticated practices for writing and organizing \nour code. Now, there is an explosion of front-end frameworks and \ntooling to help you write better, more maintainable HTML, CSS, \nand JavaScript.\nThis represents an exciting paradigm shift in front-end development, \nbut the number of choices available can be overwhelming.  \nA cursory glance at the table of contents for “Cody Lindley’s \nFront End Developer Handbook 2017’s section on tools” reveals \na bewildering array of considerations. I couldn’t possibly cover \nall of the technology choices available—the factors that go into \nyour decision-making will be largely situational, and this is only a \nchapter!\nInstead, I’ll save you the headache of attending the school of hard \nknocks by walking you through what I’ve learned from building \nand contributing to 3 different design systems. First, I’ll cover the \ntechnology-agnostic foundational principles that should guide \nthe development of your design system. Then, I’ll focus on some \ncommon pitfalls and how you can avoid falling prey to them. \nThroughout, I’ll introduce you to some of the tools that will help \nyou along the way, but remember this: Your technical approach \ndoesn’t matter as much as creating a living, breathing system \nthat’s flexible, maintainable, stable, scalable, and successful in the \nlong-term.\n\n5312ChapterC 20Ct.Ipnoddu\nFoundations\nRegardless of the technologies and tools behind them, a successful \ndesign system follows these guiding principles:\n ÒIt’s consistent. The way components are built and managed \nfollows a predictable pattern.\n ÒIt’s self-contained. Your design system is treated as a \nstandalone dependency.\n ÒIt’s reusable. You’ve built components so they can be \nreused in many contexts.\n ÒIt’s accessible. Applications built with your design system \nare usable by as many people as possible, no matter how \nthey access the web.\n ÒIt’s robust. No matter the product or platform to which your \ndesign system is applied, it should perform with grace and \nminimal bugs.\nLet’s take a look at each of these principles in more detail.\nConsistency\nYour first, most important task when starting out is to define the \nrules of your system, document them, and ensure that everyone \nfollows them. When you have clearly documented code standards \nand best practices in place, designers and developers from across \nyour organization can easily use and, more importantly, contribute \nto your design system.\n\n5412ChapterC 20Ct.Ipnoddu\nCode style guides\nCode style guides provide the grammar rules of syntax and \nsemantics for your code. Code syntax is the set of rules for \nstructuring and formatting your code (e.g. curly braces always go \non a new line). Code semantics provide the rules for making your \ncode understandable (e.g. alphabetize CSS property declarations). \nBut don’t get bogged down fighting pointless wars over tabs versus \nspaces. The most important thing is to end up with consistently \nwritten code, not to achieve theoretical perfection!\nAutomating code style\nTo enforce your code standards and achieve consistency in your \nsystem, help your contributors write code that follows the rules \nthrough linting and tooling.\nPRO TIP — Front-end guidelines questionnaire\nUnsure where to start making decisions about your technical \napproach? Brad Frost has written a handy Frontend \nGuidelines  Questionnaire to guide you.\nPRO TIP — A starting point for code style\nStart with an open source code style guide—I prefer Airbnb’s \n“Mostly Reasonable” rules for CSS, JavaScript, and React— \nthen modify it to fit your needs. Be sure to include your team’s \ncode style rules in your design system’s documentation.\n\n5512ChapterC 20Ct.Ipnoddu\nLinting is an automated process of analyzing code and raising \nerrors when code either doesn’t adhere to your syntax rules or \nis broken, buggy, or malformed. Linting tools such as CSSLint \nor StyleLint for CSS, and JSHint or ESLint for JavaScript, can be \nrun manually as part of your local development process, as an \nautomated pre-commit hook before code is checked into source \ncontrol (the best option), or run as part of your build process.\nPRO TIP — Automagically pretty\nYou can stop worrying about writing your JavaScript \naccording to code syntax rules entirely by using Prettier to \nautomatically reformat code without changing the underlying \nfunctionality.\nCode editor configuration\nAn often-overlooked but important corollary to linting is providing \nan Editor Config to enforce code style in your editor(s) of choice. \nEditorConfig.org (figure 1) provides a cross- platform format to \ndefine stylistic rules for most code editors and IDEs, so you can \nautomatically convert your tabs into spaces—thus ending the tabs \nversus spaces war!\n\n5612ChapterC 20Ct.Ipnoddu\nFigure 1: Example .editorconfig file from EditorConfig.\norg\nSelf-contained\nYour design system should live in a source control repository \nindependent from your main codebase. Although it will require \nmore work to get up and running, a separate repository brings \nmany long-term benefits:\n ÒIt enables versioned releases of your code (more on this \nlater)\n ÒIt allows you to share code across multiple teams, products, \nand codebases\n ÒIt forces you to develop components in isolation so they’re \nnot tied to a single use case\n ÒIt provides infrastructure for a robust front-end testing \narchitecture\n ÒIt forms a foundation for a living style guide website\n\n5712ChapterC 20Ct.Ipnoddu\nA standalone design system repository functions as a single \nsource of truth. There is only one place where components \nare defined, which then gets shared into other codebases as a \ndiscrete dependency. Because all usages point back to a canonical \nimplementation, changes in a single place propagate through the \nentire system.\nIdeally, all of the code for each component within your system is \nco-located: CSS, JavaScript, HTML templates, and documentation \nall live in the same place, possibly the same directory. If you’re \nusing React with CSS-in-JS, each component may even be \nencapsulated in a single file. The closer the pieces are to each \nother, the easier it is to trace and manage dependencies between \nbits of code, and the easier it will be to update and maintain.\nReusable\nSuccessful design systems are highly reusable. Bootstrap, the \nmost-used front-end library of all time, powers hundreds (if not \nthousands) of websites because it was architected with reusability \nin mind. Writing components to be reused in multiple contexts \nis vitally important, yet hard to do well— make components too \nfocused for a single use case or too inflexible, and users will end \nup creating their own patterns.\nTo be reusable and scalable, patterns need to be modular, \ncomposable, generic, and flexible.\n ÒModular components are self-contained with no \ndependencies\n\n5812ChapterC 20Ct.Ipnoddu\n ÒComposable components can be combined to create new \npatterns\n ÒGeneric components can handle multiple use cases\n ÒFlexible components can be tweaked and extended to \nwork in a variety of contexts\nPRO TIP — Stay DRY\nA fundamental best practice in software development is \nDon’t Repeat Yourself (DRY). When two different pieces of \ncode perform the same function, you double the possibility of \nbugs, unintended side effects, and the amount of time spent \nmaintaining functionality. The goal of your design system \nis to DRY up your development and reduce duplication by \ncreating reusable patterns.\nModular CSS architecture\nReusability and scalability in design systems begin with taking a \nmodular approach to your code architecture. CSS, however, is not \ninherently modular. So over time, systems like SMACSS, OOCSS, \nand BEM have added structure and modularity to CSS. More \nrecently, CSS-in-JS approaches such as Styled Components have \nsolved the problem by defining CSS properties in JavaScript code \nstructures.\nWhether you use one of these systems or roll with your own, the \nfundamentals of any good CSS architecture are the same:\n ÒIt has clear naming conventions for components, variations, \nand utilities\n\n5912ChapterC 20Ct.Ipnoddu\n ÒIt’s tightly-scoped and has low-specificity CSS that limits \nunintentional side effects\n ÒIt has utility classes that allow you to modify styles in a \nmanaged way\n ÒIt has rules for building modular, composable, generic, and \nflexible components\n“The Web is fundamentally designed to work for all people, \nwhatever their hardware, software, language, culture, \nlocation, or physical or mental ability. When the Web meets \nthis goal, it is accessible to people with a diverse range of \nhearing, movement, sight, and cognitive ability.”\nWEB ACCESSIBILITY INITIATIVE ( WAI)\nW3C\nTo learn more about architecting CSS so that it meets these \ncriteria, I highly recommend Harry Roberts’ https://CSSguidelin.es/ \nthen adding this type of documentation to your system.\nPRO TIP — Namespacing\nWorking with legacy code? Choose a unique, short, and simple \nnamespace to prefix your classes, e.g. `.ds-[component \nname]`. This will avoid class collisions when mixing multiple \nlibraries on a page, and ensure you know that your `.ds-btn` \nclass is different from the `.btn` class from Bootstrap.\n\n6012ChapterC 20Ct.Ipnoddu\nAccessible\nFor too long, accessibility, or a11y, has been misunderstood \nas building sites for a small group of users of assistive \ntechnology—a blind person using a screen reader—and far \ntoo often dismissed as too complex, too time-consuming, \nor “not our customers.” Accessibility, however, is not just \nfor a single, small group, but for an estimated 15% of people \nworldwide—56.7 million people in America alone—with a wide \nspectrum of permanent or temporary visual, auditory, motor, \nand cognitive impairments.\n[Accessibility testing] gives developers a  \nstarting point to say ‘here are some errors \nthat I have tangible ways to go fix now.\nAlicia SEDLOCK — Front-End Engineer  \n& Accessibility Advocate\nThankfully these attitudes are changing and our industry is \nembracing a more inclusive definition of accessibility. Making your \nsite accessible to users with disabilities improves the experience \nfor everyone who visits your site. If that isn’t enough motivation, \nimproving your site’s accessibility can help improve SEO, and it’s \nbecoming increasingly more important from a legal standpoint to \navoid costly lawsuits.\nIn a landmark case against the grocery chain Winn-Dixie, a federal \njudge ruled that websites are subject to the provisions of the \nAmericans with Disabilities Act (ADA). If you’re just learning about \naccessibility, there are a lot of resources to help you get started.  \n\n6112ChapterC 20Ct.Ipnoddu\nI recommend reading the introductory articles from the W3C’s Web \nAccessibility Initiative (WAI) WebAIM, and the A11y Project. You \ncan inspect the current state of your site using Tota11y, an a11y \nvisualizer bookmarklet by Khan Academy. Starting an accessibility \npractice where none has existed before can be challenging, but \nwhen you leverage your design system, it’s easier than you might \nthink.\nEnforce a11y with your design system\nTo ensure everyone at your organization builds accessible sites, \nfeatures, and apps, enforce accessibility best practices in your \ndesign system code.\n ÒTest your color usage against established color contrast \nguidelines (figure 2).\n ÒBuild components to be keyboard and screen reader \naccessible by default. The Ebay Accessibility MIND  \npattern library is an amazing, thorough resource to help \nguide development of accessible components and best \npractices. Encourage contributors to build according to \nthese guidelines and test their code using keyboard-only \nnavigation and assistive technology devices like screen \nreaders.\n ÒInclude in your documentation code standards and \nguidelines for common a11y best practices such as using \nlarger, legible text sizes, always associating a form field with \na label, and properly adding alt text attributes to images, \nto name a few. Salesforce’s Lightning design  system \nand Shopify’s Polaris are great examples of accessibility \nguidelines in practice.\n\n6212ChapterC 20Ct.Ipnoddu\nJesse Bennett-Chamberlain Shopify\nListen Online \nImplementing And Rolling Out Polaris\nThese accessible practices improve usability for everyone by \nmaking it easier to view, interact with, and navigate a site, improving \nform completion rates and reducing user mistakes.\nFigure 2: Eight Shapes Contrast Grid allows you to test \ncolor combinations for compliance with color contrast \nguidelines.\nUse the power of your single source of truth to create a foundation \nfor accessibility, thus relieving some of the burdens from product \nteams. It’s much easier to build in accessibility from the start than \nto bolt it on after a feature has been designed and built.\n\n6312ChapterC 20Ct.Ipnoddu\nNate Whitson, LinkedIn \nListen Online: Accessibility\nRobust\nA robust design system has a strong foundation of tests behind \nit. Testing provides confidence in your code, which facilitates \nadoption. Users will know that they can upgrade or change their \nUI without it breaking in unexpected ways.\nAdditionally, your design system is uniquely positioned to form a \nfoundation for robustly testing your front-end code.\nI like to think about it almost like...there’s an  \nimplicit contract that this is always going to \nwork.\nAlicia SEDLOCK — Front-End Engineer  \n& Accessibility Advocate\n\n6412ChapterC 20Ct.Ipnoddu\nTest your design system instead \nof your complicated UI\nKeeping tests up to date for pages, applications, and features—\nespecially on a rapidly changing site or one with heavy \nexperimentation—requires a lot of work. Tests get out of date \nquickly! You can narrow the scope of your tests and gain higher \nlevels of confidence in your site-wide front-end code by heavily \ntesting your design system components. You already need to \ngenerate example code for the different states of each component \nfor your documentation—use those as your test fixtures.\nTypes of tests\nThere are 4 types of tests used for ensuring stability in your design \nsystem:\n ÒUnit testing: These tests verify that small units of \ncode (usually individual JavaScript functions) behave \nas expected. Unit tests execute functions with a set \nof predefined inputs, then verify that they return the \nexpected output. Some popular frameworks to use are \nMocha, Jasmine, and Jest.\n ÒFunctional testing: In functional tests, examples of your \ncode, or “fixtures” are run in a virtual “headless” browser, \nthen tested by performing simulated user actions, and \nchecking the new state of the browser for the expected \nresult of those actions. Functional testing frameworks \ninclude Nightwatch, Protractor, and Casper.\n ÒVisual regression testing: These tests help catch \nunintended visual changes to component styles. The \ntest framework takes screenshots of your fixtures both \n\n6512ChapterC 20Ct.Ipnoddu\nbefore and after the changes, then compares them using \nan algorithm to detect visual differences. There are open \nsource frameworks like Wraith, Gemini, and BackstopJS, \nas well as paid services like Applitools and Percy.io. Go \nto Kevin Lamping’s excellent resource Visual Regression \nTesting for more information and options.\n ÒAutomated accessibility testing: Leverage tooling to \nensure that your components are accessible. Some options \nfor running automated a11y audits are Paypal’s AATT and \na11y by Addy Osmani, and aXe by Deque Systems.\nJesse Bennett-Chamberlain, Shopify\nListen online: \nChallenges Implementing Polaris\n\n6612ChapterC 20Ct.Ipnoddu\nCommon challenges\nNo system is ever perfect. You will make decisions that you later \nregret, no matter how much time you put into designing your \ndesign system. You can, however, anticipate issues that arise as \nyour system grows, and work to avoid or mitigate their effect on \nyour project. There are 3 common challenges I’ve seen arise in \nmultiple design systems:\n ÒKeeping documentation up-to-date with your system code\n ÒHandling breaking changes\n ÒAvoiding performance degradations\n ÒLet’s look at each of these concerns in detail.\nMaintaining documentation\nThe first time I built a front-end component library, my team \ndecided it would be easier to create a documentation website \nwith a codebase separate from our application. In hindsight, \nthis decision broke the cardinal rule of Don’t Repeat Yourself. \nWhenever a component changed in our main codebase, we had \nto remember to actually update the documentation, then do \nthe tedious work of duplicating the changed code in 2 different \ncodebases. Unsurprisingly, our documentation got out of date \nalmost immediately!\nLearn from our mistakes by reducing the distance between your \ndocumentation and code and using automation.\n\n6712ChapterC 20Ct.Ipnoddu\nMinimize separation between library \ncode and documentation code\nEarlier in the chapter, we discussed storing your design system \ncode in a separate repository that functions as your single source \nof truth. When documentation and code are co-located, it’s more \nlikely that you’ll remember to update the documentation when a \ncomponent changes. Consider adding a pre-commit hook to your \ndesign system repository to warn contributors when their code \nadjustments don’t also contain updated documentation files.\nFigure 3: IBM’s Carbon design system co-locates each \ncomponent’s CSS, JavaScript, documentation, and \nexample HTML, which functions as both documentation \nexamples and test fixtures.\nAutomate  documentation\nStart by documenting your system using simple, human- readable \nfiles written in markdown, co-located with each component. \nGithub is already configured to render and display any file named \n\n6812ChapterC 20Ct.Ipnoddu\nREADME.md when you’re viewing a folder’s contents—you might \nnot need a flashy website at all!\nIf and when you do decide to create a full-featured documentation \nwebsite, use automation to simplify the process. Instead of creating \na new codebase for a separate website, use a tool that will auto-\ngenerate documentation for you—there are lots to choose from—\nreducing the amount of structural HTML you need to write and \nmaintain.\nPRO TIP — Cupper\nHeydon Pickering of the Paciello Group has open-sourced \nCupper, a documentation builder that creates fully accessible \ndocumentation. It’s a progressive web application (PWA) \nunder the hood, so you can save and view content offline on \nsupported devices.\nPRO TIP — Reducing Your CSS Payload\nConsider running automated process to help reduce your \nCSS payload, then use that information to decide which \ncomponents belong in your core file. UnCSS (https://dbtr.co/\nunCSS) removes unused selectors from your CSS and outputs \na new, reduced file. Another approach is to automatically \ndetermine the CSS necessary to render critical, above the \nfold content, and embed that in the head of your page to \nimprove render speed. Addy Osmani has compiled a helpful \nlist of Critical path CSS tools (https://dbtr.co/critical-CSS).\n\n6912ChapterC 20Ct.Ipnoddu\nFigure 4: The Cupper pattern library builder \ngenerates fully accessible documentation \nwebsites (formerly called Infusion Pattern \nLibrary Builder).\nHandling change\nAs adoption grows and your design system becomes more widely \nused, you will invariably realize that you didn’t get it all right the \nfirst time, and you will need a plan to handle breaking changes. \nA breaking change is a situation where necessary changes to a \ncomponent’s code will break existing usages of that component \nor class. The Morningstar design system provides guidance \nto contributors on what is considered a breaking change. If \nmishandled, breaking changes can be a major pain point for your \nusers.\n\n7012ChapterC 20Ct.Ipnoddu\nThe wrong way: duplication\nInitially, all of the CSS and JavaScript for Etsy’s Web Toolkit lived \nin the same monorepo with the rest of the team’s site code. This \nmeant that whenever someone made a breaking change to a \ncomponent, their commit making the change had to also contain \nfixes and updates for every single usage of that component. At \nfirst, when just a small team built and used the system on a subset \nof pages, finding and making these changes was relatively easy. \nBut as adoption spread throughout the company, this quickly \nbecame unmanageable.\nIt became such a headache to make major structural changes to \nexisting components that our team at Etsy started to duplicate \nand deprecate—when we refactored our Tab component to make \nit fully accessible, we created a new component named “Tabs2,” \nand deprecated “Tabs” in the hopes that teams would take on the \nwork to upgrade their code. But without clear guidance on how, \nwhy, and a timeline stating when to upgrade, most uses haven’t \nbeen updated to use the new component. This kind of duplication \nis a code maintenance nightmare.\nThe right way: versioning\nBreaking changes are easier to manage if you store your design \nsystem code in its own source control repository. This gives you \nthe ability to do versioned releases of your code, which can be \nshared with other projects. Git allows you to tag a commit with \na release version number, and package managers like npm and \nYarn allow you to package up and publish multiple versions of your \ndesign system code.\n\n7112ChapterC 20Ct.Ipnoddu\nFigure 5: Example package.json, the package definition \nfile format for npm.\nWith versioned releases, the adopters that integrate your design \nsystem code can target a specific version as a dependency and \ncontrol when and how upgrades to new versions are handled. \nMake sure to publish release notes detailing changes so other \nteams can learn how upgrades will impact their codebase and \nbetter plan for upgrade work in their project timelines.\n\n7212ChapterC 20Ct.Ipnoddu\nPRO TIP — Using semver\nMany versioned projects use semver, short for semantic \nversioning, to distinguish between types of releases. Semver \nuses 3 integers separated by dots to indicate major.minor. \npatch versions, for example, v1.2.3.\n ÒMajor versions (1.0.0) contain breaking changes from \nprior versions.\n ÒMinor versions (0.1.0) add new functionality that is \nbackward compatible. \n ÒPatches (0.0.1) contain bugfixes for existing functionality \nand are backward compatible. \n ÒSemver adds another layer of confidence that certain \nupgrades should be seamless to users, while others may \nrequire regression testing or code changes.\nAvoiding performance issues\nAs a design system grows over time, generally so does the file size \nof assets sent over the wire on each page. This can negatively \naffect your site’s page load performance, which in turn negatively \naffects your company’s bottom line. Help the products built on \nyour design system avoid performance issues by taking a mobile-\nfirst approach and build your system with modularity in mind.\n\n7312ChapterC 20Ct.Ipnoddu\nMobile first\nPoor page load performance will have the largest negative effect \non mobile visits. According to statistics from Google and Akamai, \nmore than half of mobile visitors will abandon pages that take \nlonger than 3 seconds to load, yet the majority of mobile sites \ntake longer than 10 seconds to load. As mobile traffic overtakes \ndesktop, speeding up your page’s performance is more important \nthan ever to give you a competitive edge.\nBuild your design system mobile-first—test early and often on real \ndevices with real hardware and a real network connection so you \ncan understand the experiences of real users.\nFigure 6: WebPageTest performance results for Etsy.\ncom on an iPhone 6 over LTE network.\n\n7412ChapterC 20Ct.Ipnoddu\nLeverage  modularity\nInitially, it made sense to bundle all of the Etsy Web Toolkit \ncomponents and utilities into single files for CSS and JavaScript. \nWhile this is useful for prototyping, it adds unnecessary weight \nto production pages that don’t use all the components. Now, \nwe’re working to avoid performance problems by better using the \nmodularity inherent in the system. To do this, we are:\n ÒDeciding on a set of core components and utilities that are \nmost frequently used. This base file will be included on all \npages that use the design system and can be cached by \nthe browser across page requests to improve load times.\n ÒEnsuring that all components are fully modular with no \ncross-component dependencies (unless they are explicit \nand managed by the system).\nPackaging and sharing the system’s code so that it can be \nconsumed as individual CSS and JavaScript modules added as \ndependencies only when a component is actually used on the \npage. We use an in-house system to define dependencies in our \nfront-end code. Build your design system modules so they work \nwith the dependency manager that your team uses. Webpack is a \npopular option.\n\n7512ChapterC 20Ct.Ipnoddu\nForward-thinking\nDesign tokens\nFor most of this chapter, I’ve focused on building design systems \nfor web applications and sites. However, that’s not the full picture. \nModern organizations face unique challenges with their design \nsystems at scale. Today, we build for multiple web and native \nplatforms that need design consistency. Larger organizations \nmay have multiple sub-brands that want the shared support, \nfunctionality, and organization that a design system brings, but \neach needs a different, brand-aligned look and feel. The Salesforce \nUX team introduced a solution to both of these problems: design \ntokens.\nCross-platform  sharing\nDesign tokens are a way to abstract design details like colors, \nfonts, rounded corner radius, etc., into a format that can be \nshared across platforms using Salesforce’s Theo tool. Instead of \ndefining your main brand color as a SASS $variable in your web \napp, a UIColor in your iOS app, and a textColor in your Android \napp, you define a single design token in a shared JSON file that \ngets compiled into platform-specific code. Decide to change all of \nyour rounded corners from a 3px to 5px border- radius? Change \nthe value once in your tokens file, and it propagates to all of your \napps automagically.\n\n7612ChapterC 20Ct.Ipnoddu\nFigure 7: How design decisions are propagated via \ntokens in design systems.\nMulti-product  theming\nYou can also use tokens to “theme” the same structural styling for \nmultiple brands. One brand wants orange buttons and the other \nwants blue? No problem! You can define different token values for \neach brand, then combine each to the same, base CSS to output \nthemed versions of your design system. That way, all of the classes \nare the same, and all of the accessible JavaScript functionality you \nworked so hard to build can be used as-is with no modification for \neach brand.\n\n7712ChapterC 20Ct.Ipnoddu\nConclusion\nSystematizing your front-end code benefits everyone in your \norganization: developers move faster, designers don’t have to \nreinvent the wheel, and ultimately, your users have a better \nexperience. But starting out can feel overwhelming!\nThankfully, there is a wealth of resources and a growing community \nof folks sharing their own best practices to help you build your \nsystem. Anna Debenham’s “Styleguide Resources” lists nearly \n500 public design systems/style guides/pattern libraries to use as \ninspiration. While they look and feel very different, each shares \na common goal and is built upon foundational principles that our \nindustry has developed through many years of trial-and-error.\nA flexible, maintainable, stable, scalable, and successful design \nsystem begins with a strong foundation that goes beyond \nframeworks or tooling. If I’ve learned anything in my career, it’s that \nthe only constant in front-end development is change. Chances \nare, within a few years, the technology driving your front-end will \nlook very different than it does right now. If you build for the long-\nterm and plan to handle change, then you can implement new, \nbetter practices as your system grows.\nThat’s not to say you should aim to create another Bootstrap \nright out of the gate. Even if your team can only implement a \nfew of the best practices we’ve discussed in this chapter, it’s still \nworthwhile—some of the techniques I recommend haven’t yet \nbeen implemented in the design system that I work on every day! \nDesign systems are not a one-and-done thing, but a continual \nprocess of iteration and change as we make mistakes, learn from \neach other, and create new and better approaches to front-end \ncode.\n\n7812ChapterC 20Ct.Ipnoddu\nFurther reading\n01. Website Styleguide Resources\n02. Styleguide Driven Development\n03. Styleguide Best Practices\n04. CSS Architecture for Design Systems\n05. Front-end Architecture for Design Systems (book)\n06. Accessibility for Everyone (book)\n07. Web Accessibility Resources\n08. Front-end Performance Checklist \n09. Designing for Performance\n10. Rebuilding Slack.com\n11. Tokens in Design Systems\n\nChapter — 04\nPutting your design \nsystem into practice\nBetter together\nBy Diane Mounter\n\n8012ChapterC 20Ct.Ipnoddu\nHow you develop your design system will influence how you share \nand encourage adoption of the system. Broadly speaking, there \nare 2 general approaches to developing and rolling out a new \ndesign system: incremental and large-scale redesigns.\nIn this chapter, we’ll walk through the 2 approaches, highlight the \npros and cons of each, and discuss adoption strategies.\nLarge-scale  redesign\nWhen a team takes this approach, it often means they spend \nmore time designing the system before rolling it out everywhere, \nincluding doing a visual refresh or consolidation of components. \nThis allows the team to develop a fuller system—from the primitive \nlayer of colors and typography to components, page layouts, and \ninteraction flows.\nSome teams approach their new system by creating imaginary \nproducts to help them step away from the constraints of working \nwithin a real application. Other teams design their new system \nalongside the redesign of a real product or feature.\nTesting with pilot projects\nAt Etsy, I worked with a team of designers and engineers on the \nredesign of seller tools. This project provided a great opportunity \nto test a new approach to our CSS and refresh our visual styles. \nWe built a new style guide alongside the seller tools redesign that \ndocumented implementation and design guidelines.\nThis became a pilot project for testing the new design system. \nRebuilding a real part of the product gave us a great playground for \ntesting new components, responsive layouts, and new typography \nstyles.\n\n8112ChapterC 20Ct.Ipnoddu\n“In From Design Systems: Pilots & Scorecards,” Dan Mall writes \nabout the criteria he uses to find good candidates for design \nsystems pilot projects. Though our approach at Etsy was more \nopportunistic, many of the attributes Mall lists happened to match \nthe seller tools project:\n01. Potential for common components. Does this pilot have \nmany components that can be reused in other products?\n02. Potential for common patterns. Does this pilot have many \npatterns that can be reused in other products?\n03. High-value elements. Even if uncommon, is there a \ncomponent or pattern with high business value at the \nheart of this project? We’re talking about elements that are \nintegral to a flow or audience with unusually high value for \nthe organization.\n04. Technical feasibility. How simple is a technical \nimplementation of the design system? Is a large refactor \nrequired?\n05. Available champion. Will someone working on this product \nsee it through and celebrate/evangelize using the design \nsystem (and even contribute to it)?\n06. Scope. Is this work accomplishable in our pilot timeframe \nof [3–4 weeks] (insert your timing here)?\n07. Technical independence. Is the work decoupled enough \nfrom other legacy design and code that there are clear \nstart and end points?\n08. Marketing potential. Will this work excite others to use the \ndesign system?\n\n8212ChapterC 20Ct.Ipnoddu\n“We don’t really have one team doing all the work...pretty \nmuch every designer and engineer in our organization is a \npart of the system.” https://dbtr.co/twitter-horizon\nTina Koyoma  \nTwitter\nThere was one downside to building the new design system \nalongside a product—it ended up being biased to the needs of \nthat product. Afterward, it needed further development to work for \nthe whole Etsy application. Working in a silo with minimal outside \nfeedback allowed us to make progress quickly, but meant that we \nhad to work harder to encourage other teams to adopt the design \nsystem.\nShowing value through a \nsandbox environment\nWhile working on the new Etsy style guide, we set up a simple \nsandbox environment that allowed us to quickly prototype HTML/\nCSS mockups. As we prepared to share the new style guide with \nother designers, we realized the sandbox could be helpful with \nadoption.\nOne of our goals was to reduce the time designers and developers \nhad to spend writing CSS, so they could spend more time iterating \non designs. The new approach we took with CSS, combined \nwith the sandbox environment, made prototyping designs in the \nbrowser fast and easy.\nThe best way for people to see value is to experience it.\n\n8312ChapterC 20Ct.Ipnoddu\nWe set everyone up with sandboxes for training. This approach \nempowered people to prototype and experiment with the style \nguide using the sandbox, revealing value through hands-on use.\nTo set people up for success, we wrote tutorials teaching them \nhow to apply different styles—such as atomic vs. component \nclasses, build mobile-first responsive layouts, and create complex \nviews such as a search results page—without writing CSS. To help \npeople understand the why behind our decisions, we included \na presentation on our design principles with example scenarios, \ncode samples, and live coding demos.\nThe sandbox’s CSS environment mirrored production, so a \ndesigner’s prototypes easily translated to a developer’s production \nwork, avoiding costly and unnecessary new CSS. Since code \nprototypes are written in the same language, they gave developers \na better sense of the intent than a static mockup. Developers didn’t \nhave to translate like they do with comps from design tools. This \nfurther helped with adoption. A design system that both designers \nand developers love has a greater chance of success.\nDocumentation is key\nAnother key to adoption is up-to-date documentation. As design \nsystems peers say, “If it’s not documented, it doesn’t exist.”\nWhen styles go undocumented you run the risk of people writing \nnew but duplicate code. Documentation becomes more important \nwhen introducing a new design system because old patterns \ncan outweigh new ones. Documentation helps promote those \nnew patterns, reduce the need to write new code, and makes \nimplementation easy with code examples and guidelines.\n\n8412ChapterC 20Ct.Ipnoddu\nOutdated documentation can cause damage too since it can lead \npeople down the wrong path and cause frustration. It’s worth \ninvesting time in developing practices that help you keep updated \ndocumentation.\nFind opportunities to check documentation accuracy—such \nas before and after an onboarding session, or as you add new \nstyles. Writing docs on the fly helps you test your code and avoid \nbuilding documentation debt. If you can, add tests that check \ndocumentation when patterns are added and updated, and try to \nmake it easy for people to report inaccuracies.\nPRO TIP — Documenting styles\nDocument styles as you add them. It’s easier to do when \nyou’re writing the code while it’s fresh in your mind than \nwaiting to do it later.\nAt Etsy, some engineering teams created onboarding projects for \nnew engineers. This usually involved building a small feature from \nthe backlog that would help them get familiar with the engineering \nstack. I was stoked to see them implementing UI layouts without \nhelp from designers, just by following style guide documentation.\nPost-rollout  follow-up\nDesign systems are never done. The launch of your new system \nshould be thought of as version 1.0, with many iterations will follow.\nWhether you form a full-time team to evolve and maintain your \nsystem or not, you likely have a few groups of people interacting \nwith it—makers of the system, users of the system, and users who \nalso contribute to the system. Whatever form your team takes, \n\n8512ChapterC 20Ct.Ipnoddu\nmakers need to stay in touch with the needs of users and the \norganization.\nA few months after rolling out the new design system at Etsy, we \nran working sessions with staff from a cross-section of teams. \nOur goal was to learn how to improve the experience for people \nusing and contributing to the system, how successful we’d been \nwith promoting the system, and where it was lacking. We took \na qualitative research approach so that we could be open to \ndiscovering things we didn’t realize were problems—this meant \na lot of face-to-face discussions with light agenda’s to stimulate \nconversation.\n“Clients, colleagues, and stakeholders should embrace the \npliable nature of the digital world to create living design \nsystems that adapt to the ever-shifting nature of the medium, \nuser needs, and the needs of the business.” \n(https://dbtr.co/frost).\nBrad Frost \nAuthor, Atomic Design\nPRO TIP — In-person feedback\nMake time for in-person feedback sessions with internal \nstakeholders, it will expose you to insights that might \notherwise never be uncovered.\n\n8612ChapterC 20Ct.Ipnoddu\nCONTRIBUTORS\nWe ran a user-journey mapping workshop with first-time \ncontributors to understand their experience. We suspected people \nhad mixed experiences—some seemed to struggle or give up on \ntheir contribution entirely, and some had taken a really long time \nto add their new pattern.\nFindings: We discovered how deflating the experience could be \neven when the contribution was successful. This led us to develop \na more collaborative pairing approach and take an encouraging \nmindset toward code review for first-time contributors.\nENGINEERING EARLY ADOPTERS\nWe met with early adopters on product teams with a particular \nfocus on understanding the engineering perspective. Most \nengineers hadn’t taken part in training sessions and had learned \nto use the new design system by reading the style guide.\nFindings: We learned a lot about out holes in our documentation. \nFor example, tutorials didn’t lend themselves well to engineers, \nutilities were useful but buried, and people felt concerned \nabout how to use styles safely in experiments. This led us to \nreorganize and elevate important information up-front, improve \nsearch and navigation, add tutorials that appealed more to \nengineers, and provide more clarity on style usage.\nPRODUCT MANAGERS\nWe ran a session with product managers to walk through the \nnew system and discuss the impact of refactoring and building \nresponsive layouts as part of feature development. Building a \n\n8712ChapterC 20Ct.Ipnoddu\ndesign system that was responsive by default was a core goal—\nand new for many parts of the Etsy web application.\nFindings: We learned that most product managers trusted their \nengineering managers to guide them with impact on scope—this \nconfirmed communication with engineers was a priority. PMs \nunderstood there might be extra work initially, but moving to the \nnew design system would make front-end implementation easier \nin the future. We showed them they could scope work and make \nprogress iteratively.\nCollaboration  creates  \ninvestment  in  adoption\nIt might not be logistically possible to involve your entire company \nin design systems decisions, but some level of collaboration is \nworthwhile.\nBefore Etsy formed a dedicated design systems team, a working \ngroup made of a cross-section of designers drove the evolution of \nthe system. This group met regularly to plan and prioritize projects, \nshare work, and get feedback.\nGroup members collaborated with engineers and specialists where \nneeded, in situations like running experiments on high converting \npages and measuring performance.\nThese collaborations spread adoption even further and resulted in \ndesign system champions across the company. People who spent \ntime contributing to the system were invested in it and promoted \nit to others. Working in a silo had helped us for the short term, but \nextending contributions to outside the team set us up for success \nin the long term.\n\n8812ChapterC 20Ct.Ipnoddu\nNate Whitson, LinkedIn\nListen Online:  \nThe Origin Story of Art Deco\nIncremental rollout\nNot all design systems teams are able to take the time to develop \na fully-fledged system before rolling it out. Many teams have to roll \nout parts of a design system at a time.\nOn the plus side, with an incremental rollout, teams can adopt new \nparts of the system as they become available, which can feel less \ndaunting and disruptive. However, teams will also need to give \nmore thought to communication and promotion of the system. \nWithout a launch, there isn’t a big moment to get everyone’s \nattention. Instead, you need to find and create occasions to \nintroduce people to your design system.\nWhen I joined GitHub and began exploring how the small, then- \npart-time team might turn Primer into a more robust design \nsystem, I knew we weren’t able to go away for a long period of \ntime and develop a complete system. There was a ton of work in \nflight, and no planned re-design or siloed feature we could use as \na pilot project.\nWe needed to figure out the biggest pain points, reduce them to \ntheir smallest part, and roll out Primer updates incrementally.\n\n8912ChapterC 20Ct.Ipnoddu\nSolve problems and win early adopters\nOne of the biggest pain points at GitHub was the amount of time \npeople were spending writing CSS, particularly for things that \nshould have been systematized, such as spacing and typography \nstyles.\nOur solution ended up being the introduction of utilities (single \npurpose classes, often referred to as atomic or functional classes) \nbased on system variables. We weren’t able to start with auditing \ncomponents and page layouts—we had to start small and test the \nfoundation of the system before extending to larger parts. Adding \nutilities enabled us to make styles available without refactoring \ntons of UI. Designers and developers could start to use the \nprimitive styles of the system as soon as we rolled them out.\nOnce people discovered they could use utilities instead of write \nnew CSS, Primer started to catch speed. It solved a real problem \nwhile allowing us to test the primitive layers of the system. From \nthere, we could start to replace and update the component layer \nof styles.\nImprove documentation and findability\nLike at Etsy, documentation was key to adoption at GitHub. Tons \nof widely used patterns in the GitHub codebase weren’t in Primer \nand thus weren’t documented.\nWe sorted through piles of custom CSS and created a directory \nin the GitHub codebase that formed a “waiting room” for patterns \nthat should be moved into Primer. We focused a lot of effort on \ngetting as much as possible documented, whether it was in Primer \nor not. We also focused on adding more layers of documentation, \nincluding describing our class naming conventions, accessibility \n\n9012ChapterC 20Ct.Ipnoddu\nprinciples, recommendations for tooling to work with our system, \nhow to run linters, and an overview of our style organization and \npackages.\nJust having styles documented wasn’t enough, though. We needed \nto prioritize the style guide navigation and search for findability.\nFigure 1: GitHub’s Primer, components and behaviors \nfor building things on the Web.\nWe originally modeled the navigation to match our package \norganization—core, product, and marketing—prioritizing that \ninformation over the findability of searching for specific styles. \nThe style guide also lacked search and hid styles behind several \nlayers of navigation, forcing multiple clicks before people found \nwhat they were looking for.\nI found myself acting as a human style guide search, with people \npinging me to find what they were looking for rather than finding \nit themselves.\n\n9112ChapterC 20Ct.Ipnoddu\nWith research outlining people’s struggles to find styles, and the \nfact that we were wrestling with an aging web app we originally \nused for the style guide, we decided it was worth the effort to \nrebuild and redesign.\nThe new documentation site listed all our styles in the navigation, \nand we added a contextual search that helped people find \ndocumentation with similar keywords—such as finding “color” \nwithin utilities vs. support variables.\nFigure 2: Primer documentation and search.\nGetting a documentation site set up early on was important. \nLooking back, I don’t think it was the wrong choice to repurpose \nan old web app at first—it may not have been ideal, but it did \nwhat we needed. It is important to re-evaluate the quality of your \ndocumentation site over time though, to ensure it meets user \nneeds, and is scaling with your design system as it grows.\n\n9212ChapterC 20Ct.Ipnoddu\nGrow adoption through many touchpoints\nWhen you don’t have that big moment to launch your design \nsystem, use every opportunity to share its value. You’re building \nsystems to solve real problems and you know what your goals \nare—take some time to share those goals and how you plan to \nreach them. These details are helpful when you’re trying to show \nhow changing something like a few lines of CSS matters.\nAt GitHub, we used lots of small interactions to promote Primer \nand the design systems team. Here are a few ways we made our \npiecemeal approach successful:\nCREATIVE COMMENTS IN CODE REVIEW\nWe started to jump in and comment on pull requests in the GitHub \napp that touched CSS or design patterns we were trying to improve. \nThis gave us an opportunity to suggest changes in line with the \nnew design system, and point people to our documentation site \nso they knew it existed.\nWe spread the word about our team and our availability to help \nby adding simple comments to pull requests, such as, “Ping the \ndesign systems team,” or, “Find us in the design systems Slack \nchannel.”\nOver time, people started to CC us on issues and pull requests, \nand we took advantage of features like Code Owners so we got \nautomatically requested for review when someone made CSS \nchanges.\n\n9312ChapterC 20Ct.Ipnoddu\nFigure 3: Servbot comments on pull requests to \nrecommend using system variables instead of static \nvalues.\nRecently, we’ve started adding bot scripts that comment on pull \nrequests with simple feedback. With lots of points of communication \nabout our team and Primer, we’re growing awareness and adoption \nof design systems.\nSHOW, DON’T TELL\nWe noticed when teams updated the GitHub UI, they would go \nto another part of the website and literally copy and paste the \nmarkup and CSS. Refactoring away old instances of patterns is \nour best fight against the continued reuse of old patterns. It is \na long-term initiative, but we can prioritize the most popular and \ntroublesome patterns.\nRESPOND QUICKLY TO SUPPORT REQUESTS\nMost teams at GitHub have an on-call duty rotation called First \nResponder. It means one or more team members are on call to \ntriage issues, respond to support requests, or provide code review.\nAs support requests grew for design systems, we adopted this \nprocess to help respond to people in a timely manner. Over time, \nwe’ve iterated on the process and created a number of automated \n\n9412ChapterC 20Ct.Ipnoddu\nscripts that help track notification items that need attention. \nResponding to people quickly increases the likelihood that they \nreact positively to our team and recommendations.\nFigure 4: First responders use a hubot script to see \nwhich items need their attention.\nPRESENCE AND RESPONSIVENESS\nParticularly early on, we made the simple effort to be available \nvia Slack to answer questions, pair on code, or jump on a call to \nwalk through something. It takes time away from deeper work, but \nallocating time to this is worth it to help win friends and champions \non other teams.\nFigure 5: The GitHub Design Systems team are available \nto help in our slack channel.\n\n9512ChapterC 20Ct.Ipnoddu\nPublishing and  \ndistribution at scale\nMost of my recent experience working on design systems has been \non large-scale web applications like Etsy and GitHub. The scale to \nwhich those systems need to be distributed and published usually \nrequires more complex infrastructure than a small company with a \nsmall system and small team.\nHowever, many companies intend to grow the size of their team \nand scale of their product over time, so understanding how to set \nyour design system up for scalability will benefit you in the future.\nLet’s walk through methods of style organization, distribution, and \npublic vs. private documentation and code, to help you consider \nwhat’s right for you and your team.\nPackage management and \norganizing modules\nDesign systems should be built for change, large or small. This \nisn’t just important for how you code your system or use things \nlike variables or design tokens—it’s important for how you organize \nmodules, and version, and distribute them too.\nAt GitHub, we iterated on how we organize and package styles \nmultiple times. Like Etsy, we pulled our design system out of the \nGitHub monorepo into its own repo. We wanted to have more \ncontrol over the changes made and when those changes made it \nback into GitHub.com.\n\n9612ChapterC 20Ct.Ipnoddu\nWe also use Primer for more websites and applications beyond \nGitHub.com. Conference websites like git-merge.com are built \nwith Primer, as well as community websites such as developer. \nGitHub.com and opensourcefriday.com.\nNot all these sites need the full suite of styles we use for GitHub.\ncom, and GitHub.com doesn’t use all the marketing- oriented \nstyles in the core application. This led to taking a modular approach \nwith style organization and influenced how we packaged and \ndistributed Primer.\nNate Whitson, LinkedIn \nListen online:  \nVersioning\nVersioning the entire system \nvs. versioning by module\nVersioning the entire system means everything within the system \nbelongs to just one version number and can only be installed in \nits entirety. This could be likened to browser or software versions. \nWhen you update to a new version of Google Chrome or your \nphone’s OS, for instance, you’re updating the whole piece of \nsoftware in one go.\nIf you were to version your design system in the same way, it would \nmean everything within the design system would be updated too.\nFor example, you may have updated your font styles, added a new \nnavigation component, or deprecated an old grid layout. When \na user of your design system chooses to upgrade, they get all \n\n9712ChapterC 20Ct.Ipnoddu\nof those changes together. This still gives teams the flexibility of \nwhen to update the system, but a more granular approach can be \nhelpful as your system scales.\nVersioning individual modules means having a version number \nfor every component or group of styles within the design system. \nSo if you put your button component into one module and your \nutility styles into another, they would each have their own version \nnumber, such as primer-buttons@2.4.0 and primer-utilities@2.8.0.\nYou can still maintain a package that includes the entire set of \nthe modules and version that too. For example, primer-css@9.5.0 \nincludes primer-buttons, primer-utilities, and all the other Primer \nmodules. So you can provide the best of both worlds—the option \nto use the entire system, or just use individual modules.\nThis modular versioning approach does require more effort for initial \nsetup because you need to work out what to boil each module down \nto. For instance, should you have a module for layout utilities as well \nas a grid system, or combine them all into one layout module?\nThe benefit of this approach is that users of your design system \ncan choose to upgrade just the bits they need. Giving teams the \noption to selectively update when they have the time to do it can \nmean they’re more likely to iteratively keep up to date—whereas \nthe overhead of updating the entire system in one go can act as a \nbarrier.\nVersioning by package enables a design systems team to push \nupdates more frequently without the pressure of forcing an update \nto the entire system.\nCompared with versioning the entire system in one go, versioning \nby module creates more flexibility around major design systems \n\n9812ChapterC 20Ct.Ipnoddu\nreleases, can lead to a culture of continuous development, and \nenable your systems team to move faster overall.\nReleases, branches, and version numbers\nDesign system teams often have to balance competing priorities. \nAttending to bug fixes or other commitments has to be balanced \nwith intensive projects requiring more research and planning, such \nas developing a new color system or bringing in a newly supported \nfeature like a CSS grid.\nYour publishing workflow needs to work for both the users and \nthe maintainers of the design system. Maintainers want to have \nconfidence in what they test and ship. Users of the system want \nto have clarity on status and what type of updates they’re getting.\nAt GitHub, we found the combination of versioning and organizing \nreleases with Git branches gave us the right amount of flexibility in \nplanning and shipping new design system releases.\n\n9912ChapterC 20Ct.Ipnoddu\nFigure 6: Tracking multiple Primer releases with GitHub \nProject boards.\nWe maintain a “dev” branch that includes work in progress and \ncreates a new branch for each individual release. Since Git allows \nus to create multiple branches of the design systems code, we \ncan work on a minor or patch release at the same time as a major \nrelease. This means we can take our time with a major release \nthat might include breaking changes, while also shipping timely \nupdates and bug fixes in minor and patch releases.\nVersioning our system and using Semver makes this workflow \npossible. We can clearly point to a specific version number for each \nrelease, and know by the Semver system what type of updates are \nincluded with it, and therefore what type of testing we need to do.\nSince Semver is a well-recognized standard for versioning, it helps \nclearly communicate to users of Primer—internally at GitHub or \nexternally—what updates they’re getting and \nwhat type of testing they may need to do in \norder to use the updates.\nNate Whitson, LinkedIn\nListen online:  \nBuilding a Public vs. a Private System \nPublic vs. private\nAs your system and its number of users grow, you might find \nyourself considering whether to make your design system public \n\n10012ChapterC 20Ct.Ipnoddu\nto some degree. There isn’t a one-size-fits-all solution to this—it \nshould be based on what’s right for your team. Making a system \npublic doesn’t have to be an all-or-nothing approach, there are \nmultiple ways of breaking down what’s public.\nMany pioneering teams have created and published beautifully \ndesigned documentation, such as Material Design, Lightning  \nDesign System, and Shopify’s Polaris. We shouldn’t assume the \nsolution that worked for these companies is right for everyone else. \nThese are companies making a significant investment in design \nsystems. Plus, they have the broader objective of wanting external \ndevelopers to use these systems to build on their platform.\nWhen deciding what, if anything, is made public, you should \nprioritize based on your company’s needs, rather than standards \nset by other companies.\nHere are a few ways you can make \nyour design system public:\nPUBLIC DOCUMENTATION ONLY\nYou might decide that making the source code public isn’t right for \nyour team, but you want to make the documentation public.\nMarvel’s style guide and MailChimp’s patterns are examples of \npublic documentation sites that don’t (yet) share their source \ncode.\nOPEN-SOURCE DESIGN SYSTEMS\nMany companies open-source their design system. This means \nthe general public can open issues to request new features, \n\n10112ChapterC 20Ct.Ipnoddu\ngive feedback, or let the maintainers know of bugs. Maintainers \ncan also choose to accept contributions in the form of code or \ndocumentation changes via pull requests. If the maintainers \nchoose, they can make the design system available for modification \nand reuse by adding a license.\nThe US Web Standards, Primer, Help Scout, and Solid are all \nexamples of design systems open-sourced on Github.com.\nFigure 7: Buzzfeed’s design system, Solid, is open-\nsourced on GitHub.\nOPEN-SOURCE THE DOCS WITH YOUR CODE ON GITHUB\nYou don’t necessarily have to share a crafted documentation \nwebsite—you can just share documentation written in markdown \nformat and it will be rendered and styled on GitHub. Another \noption is to publish the docs via GitHub pages. This can be a \nlow-barrier way to share documentation since GitHub hosts the \ndocumentation, giving you a default public URL if you don’t add a \ncustom domain.\n\n10212ChapterC 20Ct.Ipnoddu\nSHARE A ZIP FILE TO DOWNLOAD\nIf you want to keep the source-code and/or the npm packages \nprivate, you could choose to share the code for your design \nsystem so it can be used by others. This might be a nice option if \nyou don’t want to make in-progress work on your system public, or \nadd the overhead of managing open-source contributions, but are \nstill happy to share the code for use by others.\nProjects like Lab by Compositor (a design tool for creating React \ncomponents for design systems) use the Releases feature on \nGitHub to share release notes and a ZIP file download of the \nsoftware. They also use the repo to host documentation and \nissues to get feedback from users.\nFigure 8: Color swatches in Storybook.\nPUBLISH A STORYBOOK OF YOUR UI COMPONENTS\nStorybook has become a popular tool for design systems teams, \nespecially for those using React, though it can also be used with \n\n10312ChapterC 20Ct.Ipnoddu\nSass or CSS-based design systems too. As Brad Frost describes, \nStorybook is a “workshop” tool designed to output rendered \nexamples of your styles and components, which you can use in \ndevelopment for testing changes. Style guide documentation is \nyour “storefront” and includes crafted and detailed documentation \nwith information like usage guidelines and code-style principles.\nFigure 9: Notification styles in Storybook.\nProviding rendered examples of your components, even without \ndetailed documentation, is still very useful to users, maintainers, \nand would-be contributors of your design system. It provides a \ncatalog of what’s included in your design system.\nPattern Lab (created by Brad Frost), Fractal, and React styleguidist \nare other tools that provide similar features to Storybook with \noptions for documentation and code examples. All these tools can \nbe used without sharing your design system’s source code, and \ngive you options as to what level of documentation you share.\n\n10412ChapterC 20Ct.Ipnoddu\nAs you consider varying degrees of access \nto your system, also consider some of the \nreasons teams make their systems public:\nNO AUTHENTICATION BARRIERS TO SHARING\nAnything behind authentication, like outside VPNs or firewalls, \nmeans one more barrier to access. I know this firsthand since \nwe have a new, in-progress documentation site for Primer that \nrequires staff login. People frequently think the style guide had \nbeen taken down or don’t even know it exists.\nAuthentication also makes it difficult to give external contractors \naccess. It’s a small barrier, but it can have a negative impact \nand mean people who could be using your design system \ndocumentation can’t or won’t because it’s too much hassle.\nHELPS WITH RECRUITING THROUGH \nPREVIEWING DESIGN MATURITY\nDesign systems are a popular topic in the design and front- end \ncommunity right now and might be part of a prospect’s decision to \nchoose one company over another.\nDesign systems can be a sign of maturity for a team, and also \nprovide insight into what it might be like to work at that company. \nEspecially if you’re trying to recruit directly for your design systems \nteam, making the documentation public is an obvious way to \nattract people and set expectations.\n\n10512ChapterC 20Ct.Ipnoddu\nOPENS YOU UP FOR INPUT FROM THE COMMUNITY\nMaking your documentation and/or your source-code public opens \nyou up to external contributions, whether via simple feedback \ncomments or direct contributions to code. This risks overhead, \nparticularly if your system becomes popular, but the benefit is that \nyou get feedback and insights from a wider range of people.\nPrimer is open-sourced on GitHub. We’ve been increasingly working \nin the open and sharing issues and pull requests so people can see \nhow we work. We’ve noticed a gradual increase in contributions \nfrom the community and internal GitHub contributors. People \ngenerally feel proud to contribute to an open-source project that \ncan benefit anyone.\nConclusion\nThere’s a lot that goes into the rollout of your design system, and \nmuch of it will extend naturally from how you decide to build your \nsystem, who you’re working with, and the best way to spread \nadoption inside your company.\nCreating a perfect rollout strategy is less important than ensuring \nyou’re involving the right people, being clear about your end goals \nand how your strategy supports those, and documenting your plan \nmethodically through each step.\nDesign systems are always evolving, and the way you share and \nencourage adoption of new iterations will evolve along the way as \nwell. An intentional, thoughtful strategy with room to scale will go \na long way to making sure adoption is treated as a crucial part of \nthe building process.\n\n10612ChapterC 20Ct.Ipnoddu\nFurther reading\n01. A successful Git branching model\n02. The workshop and the storefront\n03. Maintaining Design Systems\n\nChapter — 05\nExpanding your \ndesign system\nMore than the sum of its parts\nBy Marco Suarez and Sophie Tahran\n\n10812ChapterC 20Ct.Ipnoddu\nAs mentioned in Chapter 1, early software programming was limited \nby the speed and capability of hardware. But over time, hardware \nbecame increasingly faster and cheaper, and the inefficiency of \nsoftware became even more noticeable.\nAs product teams are expected to move faster and faster, speed \nand efficiency is an ever-growing concern. However, design \nsystems enable teams to find speed, efficiency, and consistency \nthrough reusability. As you experience these benefits, other areas \nof inefficiency that were once unnoticeable become glaring.\nAlignment is often one of those areas. Aligning team members, \nteams, and a company around things like direction, expectations, \nand quality is critical to moving and scaling quickly. Without \nalignment, friction increases and velocity slows—something \nproduct teams cannot afford.\nA design system is a fantastic way to create alignment around \ninterface design and implementation. But beyond components, \nteams can build alignment with vision, design principles, process, \nand voice and tone.\n\n10912ChapterC 20Ct.Ipnoddu\nVision\nA vision statement moves everyone toward a common destination. \nVision is your North Star. It’s a reusable statement that gives \ncontext to your work to help your team stay on track and in \nsync. A vision statement declares what your team, product, or \ncompany is attempting to achieve and why it’s worth achieving. \nIt’s comprehensive yet memorable, elevating yet attainable.\nVision creates clarity, making non-essentials easier to identify. \nMomentum is far easier to build once everyone knows where \nthey’re going and why.\nA few years ago, the Starbucks product team was reorganizing \nand needed to clarify—for themselves and the entire company—\ntheir reason for existing. In a corporation as large as Starbucks, \nit’s vital to clearly and succinctly express the purpose and value \nof your team.\n“We create digital products that make our customers happy and \nour partners proud.” This statement became their rallying cry. The \nvision grounded decision-making to improve the experience for \ncustomers and partners (baristas, managers, office employees) as \nwell as achieve business goals.\nPRO TIP — Creating your vision statement\nTo create your vision statement, describe what your team, \napplication, or company should look like in two to five years. \nDoes the culmination of your present work add up to that \ndescription? Is that description worth spending the next \nseveral years realizing? If not, adjust your aim. Maybe you \nneed course-correcting or maybe you need to aim higher.\n\n11012ChapterC 20Ct.Ipnoddu\n“It helped us create a system that, we think, is \nclear and scalable across the various global \nmarkets we serve while still being unique.”\nJason Stoff — STARBUCKS\nInformal vision statements for discrete projects also became \nuseful. “Clarity first, then elegance if possible,” was the guiding \nprinciple of a recent redesign.\nWhen we had a few design options for a given \nfeature to discuss as a team, we referred \nback to our goal of clarity at the expense of \nall else, then worked to find a way (if possible) \nto make it elegant.\nJason Stoff — STARBUCKS\nNick Grossman of Union Square Ventures gives several examples \nof how a North Star impacts company alignment\nin his talk, “Purpose, Mission and Strategy.” One example he gives \nis about Foursquare’s product focus moving from the consumer \napp to the direction of being a location data platform that could \npower other applications. This was a massive shift in direction. \nIt was the vision “making cities more delightful” that provided a \nmuch-needed North Star for employees to accept and embrace \nthis new model. Grossman says, “It was a watershed moment for \naligning the company around a new direction.”\n\n11112ChapterC 20Ct.Ipnoddu\nIt’s helpful to assess your progress as a team. At Etsy, we held \nretrospectives after every major launch. A retro is a meeting to \ncelebrate the things that went well and identify the things that \ndidn’t for a particular launch. It’s also an opportune time to check \nyour alignment with your vision.\nDesign principles\nDesigners often operate with their own implicit set of standards to \nevaluate the quality of their work. But when teams grow, explicit \nstandards become necessary to unify all with a shared language \nand a guide to evaluating the work. How do you define good \ndesign? How do you know what’s essential and what’s arbitrary? \nHow do you know when something is ready to ship? How do you \nknow if you’re on the path to achieving your vision?\n\n11212ChapterC 20Ct.Ipnoddu\nPRO TIP — Setting the groundwork for your principles\nCreating your principles can seem like an overwhelming \ntask. Before getting to work, establish a set of goals your \nprinciples must achieve. Here are a few examples:\n ÒShould they describe the output or process?\n ÒShould they be a sentence or a phrase?\n ÒWho should they benefit?\n ÒHow should they be used?\nBegin your work with a large amount of raw data collected \nfrom your team through discussions, survey, or interviews. \nThen, work through a process of combining, refining, and \nevaluating until you’ve arrived at a comprehensive and \ndistilled set of principles. Etsy has a great article about \ntheir own principles creation process (https://dbtr.co/etsy- \ndesign-principles).\n\n11312ChapterC 20Ct.Ipnoddu\nPrinciples are important for design systems  \nprimarily for describing how it was created, \nand how the makers of it would intend it to be \nused.\nRich FULCHER — GOOGLE\nFigure 1: Lyft’s design principles build upon each other.\nA system of principles can provide the answers. Design principles \nact as a reusable standard for designers to measure their work. \nThey replace subjective ideals with a shared understanding of \nwhat design must do for users. Just as guardrails keep you safe \nand on the road, design principles keep teams on the path to \nachieving their vision.\nPosting your principles on the office walls, creating a computer \ndesktop wallpaper, adding them to your design systems site, or \nprinting them on notebooks are all great ways to keep them top \nof mind. Task your most senior designers with using them in every \n\n11412ChapterC 20Ct.Ipnoddu\ndesign critique to ensure the new language is adopted. This new \nsystem of language will become a vital part of your design system \nbecause it creates alignment, enabling your design team to scale.\nDisagreements happened less and less \nbecause we were now aligned.\nSteven Fabre — INVISION\nWhile designing InVision Studio, the design team realized far too \nmuch time was spent debating solutions. So a set of principles \nwas drafted to help navigate the complexity of designing software. \nThese principles were used to guide individual decision-\nmaking, help reach agreements faster as a team, and acted \nas a transcendent standard to create harmony and cohesion \nthroughout the product. The principles were modified over time \nas Studio evolved and needs changed, but these principles aligned \nthe team and helped them keep the velocity they needed.\nJesse Bennett-Chamberlain, Shopify\nListen online:  \nPrinciples And Why They’re Important\n\n11512ChapterC 20Ct.Ipnoddu\nProcess\nProviding a clearly defined process for how user experience \nproblems are approached and solved builds alignment within \nproduct teams. This consistency helps to remove friction and build \nvelocity.\nIt is only in the repetition of the craft that he \nor she masters the art.\nSamuel Avital — MIME\nProcess guides designers through a series of clearly defined \nmilestones, each with different objectives and deliverables. These \nmilestones act as interdependent components that, when used \ntogether, improve the probability of arriving at optimal solutions.\nA repeatable process offers several key benefits:\n01. It provides clear expectations within each step, allowing \nyou to focus solely on the tasks at hand without worrying \nabout what to do next\n02. It builds data within each step that can be referenced \nand used to inform future iterations or course-correct low \nperforming launches\n03. It creates an understanding of the roles and responsibilities \nof each team member involved—bringing the right people \nin at the right times, making everyone’s involvement \nbeneficial to the quality of the output\n\n11612ChapterC 20Ct.Ipnoddu\n04. A repeatable process will ensure progress is smooth, \nefficient, and predictable while also improving the quality \nand consistency of your work.\nAt InVision, our process has 6 steps:\nFigure 2: The InVision design process.\n01. Understand: First, we use customer research and insights \nto gain a deep understanding of the problem space and \nidentify how it aligns with our business goals. Product \nmanagement leads this phase and works with the research \nteam to conduct interviews, gather data, and perform \ncompetitive research.\n02. Explore: The design team then ideates and explores \npossible solutions. They work with product and research \nteams to produce wireframes, core flows, and user \njourneys.\n03. Define: Once a potential solution has been identified, the \nproduct team works to align everyone on what success \nlooks like. The output of this work is a problem statement \nand defining measurements of success.\n\n11712ChapterC 20Ct.Ipnoddu\n04. Design: Refining the solution is design team’s responsibility. \nThey work with the research, product, and engineering \nteams to develop core flows, prototypes, and identify tech \nrequirements.\n05. Build: Engineering translates the design and prototypes \ninto reality. The product team orchestrates quality \nassurance, support documentation, and the sales and \nmarketing teams.\n06. Learn: At this point, we observe the effectiveness of our \nlaunched solution. The product team collaborates with the \nresearch, design, and engineering teams to gather insights \nto measure against our success metrics. We use these \ninsights to inform our next steps and start the process \nover again.\nVoice and tone\nSophie Tahran, InVision’s UX Writer, weighs in on the value of \nwriting guidelines—and how to create them.\nGreat writing is an essential part of great design, but even in-\nhouse UX writers aren’t able to edit every single word in a product. \nThat’s where writing guidelines come into play. A source of truth \npromotes good communication, credibility, and consistency—no \nmatter who’s writing content.\nEvery writing guide should cover both voice and tone. While your \nvoice generally stays the same (like a personality), your tone shifts \naccording to the situation (like an attitude). Both are an essential \npart of communication—and you can’t ship a product without \neffectively communicating it.\n\n11812ChapterC 20Ct.Ipnoddu\nBecause voice identifies who we are and defines our relationships, \nbuilding writing guidelines early on is one of the best ways to gain \ncredibility with your users. They’ll begin to recognize you, and \nknow that they can trust you.\nWriting guidelines also help evolve your voice. Just as your \npersonality matures over time, your voice will evolve as your \ncompany grows. Guidelines define what you should sound like \nright now, so when you do steer away from them, you’ll know that \nyou’re doing so intentionally. (“I’ll just throw an emoji in this subject \nline,” turns into, “Hey, let’s test how emoji perform and see if \nthey’re worth adding to our writing guidelines.”) Without thoughtful \nwriting guidelines, teams risk allowing their voice to be determined \nby patterns instead of users’ needs, and end up making decisions \nsolely based on what they’ve done in the past.\nJesse Bennett-Chamberlain, Shopify \nListen online: Voice and Tone in Polaris\n\n11912ChapterC 20Ct.Ipnoddu\nBuilding writing guidelines\nStart with an audit. Talk to people across (and outside) the company: \ndesigners, writers, support agents, co- founders, users, etc. \nYour goal is to get their impression of the company’s personality. \nConsider not only conducting interviews, but also creating mood \nboards—visual collections of colors, people, places, and more—to \nrepresent more emotional, intangible qualities.\nDEFINE THE FINDINGS\nHave a core group of people, normally writers, narrow down the \nbest words to describe what you found. Is your voice human, real, \nand bold? Or is it kind, experienced, and empowering? Take into \nconsideration not only how you sound now, but also what you \naspire to be and avoid (“InVision is never clickbait-y or pandering”).\nTone can be more difficult to hammer down. It shifts according to \nthe situation, so it’s sometimes more helpful to provide direction \nthan it is to identify characteristics. State your key priorities, like, \n“Always provide clarity,” and, “Consider the user’s emotional and \nmental state.” This is also a good place to determine whether \nhumor has a place in your writing, and where you fall on the \nformality spectrum.\nOnce you’ve identified the more nebulous aspects of your voice \nand tone, carry that same thinking into the tangible. What should \nyour different channels look like? Do you use sentence case or \ntitle case?\nYou may find that you have a need for multiple guidelines— voice \nand tone within your design system, a company-wide style guide \n\n12012ChapterC 20Ct.Ipnoddu\nfocusing on words only, and brand guidelines that also encompass \nvisual design.\nGET BUY-IN\nPotentially more important than building voice and tone guidelines \nis encouraging everyone to follow them. Anyone who works with \ncontent should have a chance to sign off.\nFIND A HOME\nYour guidelines need to be easily found and integrated. If you’re \nbuilding voice and tone into your design system, follow MailChimp \nand Shopify’s lead in giving writing its own section, separate from \ncomponents, principles, and layers. You can also go one step \nfurther by creating a separate list of copy patterns (like Mailchimp \ndid) for grab-and-go words.\nDEVELOP\nWriting guidelines are living, breathing documents that require \nmaintenance as your company grows. From the start, use an \neditable Paper or Google Doc—and better yet, schedule monthly \ncheck-ins.\nInvest time in writing guidelines from the start. Most companies \nhave more people representing their voice than you’d expect, from \nproduct designers to support agents. By having a source of truth—\nand creating it together—you can offer users a better experience.\n\n12112ChapterC 20Ct.Ipnoddu\nWhen you have guidelines that are in conflict, \nthen you have to go back to the principles and  \ndecide which are more important.\nLori Kaplan — ATLASSIAN\nConclusion\nJust as design is far more than the sum of its parts, your design \nsystem can serve as far more than a components-only guide. \nVision, principles, process, and voice and tone expand your design \nsystem into additional areas where reusability can also increase \nspeed and efficiency.\nDesign systems have changed the way we design and build \napplications—so much so that we must look at the future of design \nthrough the lens of systems. In a future where design systems gain \nwide adoption, design could take on many new, exciting forms.\n\n12212ChapterC 20Ct.Ipnoddu\nFurther reading\n01. The Importance of Product Vision to Product Leaders\n02. 7 Problems Growing Design Teams Face\n03. IBM Design Thinking\n04. Design Principles Behind Great Products\n05. Creating Etsy’s Design Principles\n06. Design Doesn’t Scale\n07. A Matter of Principle\n08. A Study of the Design Process\n09. UX Tools for Every Step in Your Design Process\n10. Nicely Said\n11. How Snow White Helped Airbnb’s Mobile Mission\n12. MailChimp’s VoiceandTone.com\n\nChapter — 06\nThe future of  \ndesign systems\nTo infinity and beyond\nBy Roy Stanfield\n\n12412ChapterC 20Ct.Ipnoddu\nI find it exciting to see design systems empower design teams to \nscale and consistently produce solid products, but I know we’re \nonly scratching the surface of our potential. There’s so much more \nwe can accomplish.\nAt Airbnb, we’ve been pondering how we might push our design \nsystem in new directions, and we’re inspired by design- forward \ncompanies that share our desire to craft the future of design \nsystems.\nIn this chapter, I want to introduce you to a new way of thinking \nabout design systems. Design systems can transcend the walls of \na single company to exist as shared standards and customizable \ntooling with help from the open source community, which can \naccelerate development and eliminate the need to start systems \nfrom scratch. If we’re really bold, we could be creating adaptive, \nintelligent systems that are context-aware and compose \nthemselves—reducing our workload and ultimately unlocking AI-\npowered design.\nBut, I’m getting ahead of myself. Let’s start with nuts and bolts.\nBuilding a common foundation\nA designer’s familiarity with the concept of a design system is \nbased on the systems they’ve encountered, what platforms \nthey’ve been tasked to support, and where they’ve worked.\nBooks like this one help us converge on a high-level definition \nfor design systems, but a more rigorous definition will ensure the \nutility and flexibility of our work.\n\n12512ChapterC 20Ct.Ipnoddu\nFinding a standard that supports shared goals will involve \ndecoupling a design system from its implementation, cataloging \ncommon UI and associated states, and more strictly defining \ndesign primitives and components. This could then be expressed \nin a file format that’s able to define a component or design system \nmore completely.\nImagine as if where I built this thing, gravity  \nworks one way, and when I install it in your \noffice gravity works another way.\nTim Sheiner — SALESFORCE\nAn example of differing goals\nCurrently, existing systems reflect the specific needs of the \ncompanies that created them. Since each company is building an \nentirely independent system, design system development starts \nfrom scratch—possibly with help from a web toolkit like Bootstrap, \nrelying on the internal knowledge of the team, and only focusing \non top-level needs. As a result, even the best systems contain \nflaws and lack the necessary tooling to speed development and \ntrack results. And if a company’s priorities shift, its design system \nmust shift, causing another section of the design system to be \nbuilt in the same limited way.\nFor example, one of the reasons Airbnb created DLS was to \nminimize and sync differences in UI between our supported \nAndroid, iOS, and web platforms. In The Way We Build, VP of \nDesign Alex Schleifer writes, “Universal and Unified define the \nsystem’s approach we apply when defining patterns. Is it part of a \ngreater whole? Does it work across devices?”\n\n12612ChapterC 20Ct.Ipnoddu\nIn our idealized vision, a mockup easily ports between platforms—\ncreating a better design and development experience. This cross-\nplatform UI would give Airbnb guests and hosts alike the same \nend-product experience as if they jumped between mobile app \nand desktop web.\nIn contrast, supporting multiple device platforms was initially less \nof a concern at Etsy, where the main priority was to scale its web \nplatform. During my time there, the team built the web toolkit \nwith the core website as its primary focus. Later, Etsy expanded \nupon its toolkit to support different branding elements for other \ninternal web initiatives. Karyn Campbell describes what it was like \nmodifying the Etsy design system while making Etsy Studio. “While \nwe made a conscious decision to depart in some instances with \nthe etsy.com UI in order to birth this new brand, we also retained \nmany underlying components that our design systems team had \ncreated.”\nA priority at Airbnb was having the same functional and visual voice \nacross platforms. A priority at Etsy was to support multiple web \nproducts with varying brand initiatives. Both were valid needs. A \nshared standard for design systems would need to ensure a solid \nfoundation so that both these and other real- world priorities could \nmore easily be achieved.\nGathering examples of different design system priorities will help \ncreate a checklist to make sure your design system standards \naddress real concerns. Any company adopting these suggested \nstandards could be assured their design system development \nfocuses on immediate company needs, as well as adhering to \nstandards they plug in to a growing body of open source code and \ntools that support most operational transformations that could be \nencountered.\n\n12712ChapterC 20Ct.Ipnoddu\nBut what should be in the \ndesign system standard?\nImagine a tool that can specify which design primitives, (e.g., \nfonts, spacing, color—more on that below), components (and \ntheir states), platforms, and what documentation and testing are \nneeded to have a fully formed design system. The tool would also \nallow the designer to specify which components were not yet \nneeded and which platforms could be added later. With this tool, \na designer would have a framework stating what aspects of the \ndesign system were completed or outstanding. A product manager \ncould export documentation, and a developer could easily export \nUI and UI tests—no longer needing to translate UI from Sketch to \ncode, or from web code to native implementation.\nIf created today, not only would this tool provide industry- wide \nsavings, but it would start to standardize the low-level definition of \na design system. Working backward, let’s now imagine what kind \nof definitions such a tool would need in order to exist.\nFirst, decouple the design system from any specific \nimplementation. We’re not creating React components (nor other \nweb implementations), nor Android UI, iOS UI, or even Sketch \nfiles. Instead, our system is an abstraction that can be deployed \nto any target implementation. We’re going to need a file format \nto describe this abstracted design system. The exported format \ncould be rendered into views by open source modules specific to \neach target implementation.\n\n12812ChapterC 20Ct.Ipnoddu\nFigure 1: Single source of truth concept proposed by the \nDesign Tools team at Airbnb, originally illustrated by Jon \nGold.\nNext, codify the definitions of design primitives and components \nso they are fully expressed in the design system format. Dang, .dsf \nextension is already in use! Guess we’ll have to settle for the .dang \nfile extension!\nDesign primitives are the building blocks of a UI. These include \nspecific predefined colors, fonts, spacings, and more. They \nare foundational visual elements that can be combined into \ncomponents. Changing primitives is echoed throughout a given \ndesign system’s components, and doing so changes the overall \nfeeling of a brand. Additionally, what are components? We’ll also \nneed to codify those. Components are mostly views composed of \ndesign primitives and smaller components whose minimal internal \nlogic is mapped exclusively to state and state change. Benjamin \nWilkins, Design Lead on the Design Tools team at Airbnb, describes \n\n12912ChapterC 20Ct.Ipnoddu\nthe difference between primitives and components in minute 7:00 \nof his talk, “Thinking  in Symbols for Universal Design.”\nNext, we’ll need to catalog all of the common UI components \nin use today. Just as a typeface may have its unique take on \nthe letter “A” (the letter’s visual appearance may vary between \ntypefaces while its meaning is maintained), a .dang file would have \na text input component that varies in visual representation but not \nfunctionality. The catalog will need to group components with \ntheir accompanying states (selected, focus, on-tap, error, etc.) \nand detail interactions to distinguish between mobile, desktop, \nand TV UI.\nWhat are the benefits of this catalog? To start, functional tests \nfor common components could be easily automated through \ncontributions from the open source community. In many cases, \nUI engineers would no longer need to write their own tests. \nThe cataloged components would also enable a marketplace of \nboilerplate design systems that can be installed interchangeably, \nand against which custom UI can be built and substituted. This \nmeans bootstrapping the creation of every design system is no \nlonger necessary.\nLastly, we need to allow for the evolution, growth, and extensibility \nof design systems built upon the shared standard. Just because \nwe’re aware of which components are needed today doesn’t \nmean that we’re able to predict all the elements needed for future \ninnovation. A process for modifying existing components or \ncreating wholly new ones is in order. Thoughtfully standardizing \nour collective knowledge will produce a more consistent user \nexperience, accelerate development, decrease investment needed \nfrom individual companies, and enable open source and collective \ndevelopment of next-generation design tools that conform to \nshared conventions.\n\n13012ChapterC 20Ct.Ipnoddu\nCreating a single  \nsource of truth\nThe elements that make up a design system—principles, UI \ncomponents, patterns, and documentation—create the human-\ncomputer interaction layer for our apps. Product designers and \nsystem designers are directly responsible for this layer, and \ntherefore should own the design system and its representation in \nthe codebase.\nThere are two hurdles to achieving a single source of truth. First, \nour current design tools are inadequate. Most only allow us to \nproduce images of UI and prevent designers from achieving \nproduct level fidelity. Second, if the implementation of a design \nsystem is spread across multiple repositories (Android, iOS, React \nNative, React, etc.), collected in a Sketch file, and documented on \na website, then there really is no single codebase to represent a \ntruthful account of the system.\nLacking a single source of truth, the design system—spread out \nover multiple codebases—becomes an amalgam of sources that \neasily fall out of sync.\nOur tools\nDesigners use tools like Sketch, Illustrator, or Photoshop to draw \npictures of UIs, yet these are actually just representations of \ninteractive components that look different, behave differently, and \ncontain different data depending upon the state of the app at a \ngiven time. As Colm Tuite notes in the article “Design tools are \nrunning out of track. Here’s how we  can fix them,“ Think of the \nnumber of simple interactions which are commonplace in almost \n\n13112ChapterC 20Ct.Ipnoddu\nall of our products yet cannot be communicated through our \ndesign tools.”\nTuite then mentions interactions and states such as hovering over \na button, focusing an input, checking a checkbox, and identifying \nscroll areas. He points out that our design tools aren’t prompting \ndesigners to think with product level fidelity, and so a designer’s \nwork is usually missing some of its most important details.\n“For each change or addition to the system, a cascade of \nwork is created. Documentation has to be updated, each of \nour apps’ code has to be changed (in Swift, Java, and \nJavaScript), and Sketch templates have to be redrawn. \nThese efforts have to be coordinated, and each source must \nalways be in sync with the others. Code is relatively easy to \ntie together, and we already have an infrastructure that \nallows for version control and continuous integration of our \napplications. Until now though, maintaining Sketch templates \nrelied on manually-intensive human touch points.”\nJon Gold  \nAirbnb\n\n13212ChapterC 20Ct.Ipnoddu\nFigure 2: Detail of the Airbnb DLS system Sketch file. \nDLS, UX Platforms, Infrastructure. © Airbnb, Inc.\nSketches of apps are then handed off to developers who have to \ntranslate them into working UI. Between the designer and the 4 \ndevelopers that it takes to convert the design into Android, iOS, \nReact Native, and React, it takes 5 different members of the team \nbegin to bring the design up to product- level fidelity. Since the \noriginal sketch was missing details about state and interactions, \na back-and-forth conversation between designer and multiple \ndevelopers is needed to make the designs production-ready. And \nbecause the implementation is coded by 4 different humans, it’s \nlikely that unwanted variation creeps into each implementation.\nFor similar reasons, many designers have focused on sharpening \ntheir coding skills for at least 1 platform. There are many advantages \nto this, but if you’re a systems designer creating components \nfor cross-platform use, coding those components for a single \nimplementation is not yet enough.\n\n13312ChapterC 20Ct.Ipnoddu\nMultiple  implementations\nThe attempt to reach a single source of truth is further complicated \nwhen working on cross-platform design systems. Jon Gold \nidentifies places where Airbnb’s DLS workflow could be improved \nin “Painting with Code.”\nAt Airbnb, Gold has taken some exciting first steps toward solving \nthis problem with his project React Sketch.app. With this tool, \nlayered Sketch files can be generated from the React codebase. \nThis means components in the Airbnb React repo, which already \nhave product-level fidelity, can be populated with real data and \nrendered to a Sketch file. It’s another reward for those adventurous \ndesigners willing to learn React!\nIt’s also a touchstone technology, pointing us toward \nunderstanding mockups not as the source of truth, but instead \nas another target for automated output. With these generated \nfiles, we get a clear picture of which components are sitting in the \nrepo. Best of all, a product designer relying on Sketch does not \nhave to change their workflow and can use more accurate files \n(generated by the codebase, not by hand) to compose their work. \nAt last, we can have confidence in how the components look at \nproduct-level fidelity and in how these components behave with \nreal data.\nThe key in making great and growable systems is much more \nto design how its modules communicate rather than what \ntheir internal properties and behaviors should be.\nALAN KAY  \nLEGEND\n\n13412ChapterC 20Ct.Ipnoddu\nReact Sketch.app is great because it syncs the React and React \nNative repos and Airbnb’s design system Sketch files. But what \nabout the Android and iOS implementations? How can designers \nmake sure these are in sync? React Sketch.app points the way, but \nwe’ll have to go further.\nHere, we can learn from tools and WYSIWYGs of the recent past \nlike Dreamweaver and Interface Builder. Tools in this category \nallow users to combine elements of UI, hook the UI up to data \nand interaction, and then export deployable code. Unfortunately, \nthese software produce code that’s not maintainable by humans, \nand so few companies use them as an official part of their process. \nDid these tools promise too much and deliver too little?\nLuckily, design system components are simple views with minimal \nlogic. Learn more about views and MVC architecture  here and \nhere. Unlike the promise of tools like Dreamweaver and Interface \nBuilder, components are easily exported view files that developer \npartners can incorporate into existing workflows.\nSolving two problems with one tool\nTo create a designer-controlled source of truth, we’ll need next-\ngeneration design system tools to enable the composition of \ncomponents and to automate the output of the design system \nto any number of target clients (codebases, vector files, and \ndocumentation sites).\nAs outlined in the section above, if we standardize an export \nformat that contains production-level fidelity for components, \nthen other interpreter modules can be freely built to compile a \nsingle component file into all the various flavors of production \ncode. Then, varied implementations of any given component \n\n13512ChapterC 20Ct.Ipnoddu\nwould flow from a single source of truth and would plug right into \nexisting workflows—saving resource-intensive and error- prone \nhuman interpretation of mocked UI. Product designers and design \nsystem designers would finally control the UI they have always \nbeen responsible for.\nAt Airbnb, we’re tackling this challenge in a variety of ways, \nincluding with Lona, our tool for defining design systems and using \nthem to generate cross-platform UI code, Sketch files, images, and \nother artifacts. A highly experimental prototype, Lona represents \nour exploratory approach to discovering what’s next for design at \nscale. Taking a research-based approach to the future of design \nsystems encourages experimentation and collaboration.\nIntelligent systems \ncompose themselves\nIf you’ve not heard of Alan Kay, make sure to look him up. He’s \ncredited with inventing the graphical user interface, Object \nOriented Programming, and—with his concept of the Dynabook—\neven the tablet. Given that design systems fit firmly inside of the \nworld that Kay and his peers built, it’s worth listening to him.\nOnce the magic of design system standards enables both private \nand open source development for cross-platform use, design \nsystems will most likely reach new heights of functionality and \npopularity. Whereas siloed development requires talented people \nto reinvent the design system anew for each employer, standards-\nbased design systems might easily plug into a passionate \ncommunity that will add capabilities to our nascent tools.\n\n13612ChapterC 20Ct.Ipnoddu\nTaking inspiration from Kay and the PARC maxim—“The best way \nto predict the future is to invent it”—I’ll sketch out a stretch goal \nfor the future of design systems and tools in the paragraphs that \nfollow.\nVirtuous  cycle—plugging \ninto  the  feedback  loop\nOften, our design systems contain components that aren’t tracked \nin any special way. Without special consideration and considerable \ndevelopment effort, the design systems team is blind to the usage \nstatistics and performance metrics directly associated with the \nsystem. To gain insight into design systems, teams must manually \ntrack which components each product team uses, and then try \nto glean usability information from product team UX research and \nperformance metrics.\nAt Airbnb, we see data from the large proportion of our native \napps, which now use design system components. Connecting \nthese stats to user metrics lets us know which components might \nbe underperforming and deserve special attention.\nSimilar metrics also have an internal benefit. Dashboards \ncontaining usage data aid the internal perception of the system \namong product designers and engineers alike. It’s easy to imagine \nthat tracking the use of a design system can go beyond recording \nend-user impressions (views) and interactions. Even analyzing the \nusage of documentation, design files, and other internal tools can \nlead to insights that better enable product teams.\nBut why should such insights be limited to just a few companies \nwith the resources to create similar tooling? A module could be \nbuilt for just this purpose. It would track where canon components \n\n13712ChapterC 20Ct.Ipnoddu\nare used in product and then apply a flag to that component. These \nflagged components could be polled, and usage stats could come \nstraight back to the design systems team. The insights would then \nbe used to improve internal tools and the system itself.\nLayout aware\nAnother promising direction would be for our components to \nbecome somewhat layout aware, and then declare their intended \nuse to both the system at large as well as sibling components. \nGiven this new super power, design system components could \nnow communicate where they should generally be used and then \nshare information about what types of data they generally contain. \nEven a simplified implementation of this functionality would help \ndesigners instantly swap abstracted data sets to, for instance, see \nhow translation might affect the layout of a particular component \ngiven a longer language like German or a right-to-left language \nlike Arabic.\nThis awareness might even go a step further with a given \ncomponent stating the kinds of screens or interactions preceded \nby its own display, and again which kinds of interactions or screens \nshould follow upon user interaction. This awareness would enable \npredictive assembly.\nPredictive  assembly—a  pattern  tool\nBecause each component now sends messages about where it’s \ntypically used and what type of data it usually contains, we should \nalso be able to see existing components predictively assembled \ninto screens. A future tool might allow the product designer to \nview a particular component, click a randomize button, and see \n\n13812ChapterC 20Ct.Ipnoddu\nthe component in situ with other components arranged in an order \nthat more or less semantically makes sense.\nBy allowing designers to up-vote particularly useful component \ngroupings (or patterns), a layout aware tool featuring predictive \nassembly—perhaps better described as a design system pattern \ntool—could become an instrumental way in which product \ndesigners quickly discover repeatable patterns in the system. With \njust a single click, a designer would be able to compose an effective \nsolution made of many components and export the basic design \nfor any project. Moreover, with the advent of standardization, \ndesign systems could become plug-and-play with compositions \ncomposed by predictive assembly, allowing for a quick way to \nassess the integrity of a given design system.\nPredictive assembly would enable the product manager, developer, \nor product designer to provide a set of data and ask for a menu \nof pre-assembled screens that display the data. We could then \nchoose the best option, only correcting the layout if needed.\nIt’s worth noting that if we get particularly good at predictive \nassembly and consult the right minds to take it further, we will \nsoon find ourselves in a world where machine learning provides \nartificial intelligence for plug-and-play design systems. Among \nmany other things, we might witness the birth of a world where \nphone users could eliminate branded apps, preferring a locally \ninstalled design system that could spin up UI without needing to \nload templates over the network.\nAs designers, we continue to rely on intuition, performance metrics, \nand user research to create products. If a large percentage of \nour users can complete a task and proceed to the next stage in \nthe flow, then we generally call the design successful. We use \ntemplating languages to add options to a design so even more users \n\n13912ChapterC 20Ct.Ipnoddu\nreach their goals. But by connecting design systems to artificial \nintelligence, we could achieve a step change in customizable UI. \nInstead of designing products that work for most users, systems \ndesign and AI will apply specific solutions for specific individuals.\nDesigners should prepare now by discovering a bit about machine \nlearning, reading about the breakthroughs enabling AI today, and \nfinally, thinking about how ML could impact design  tools.\nThere is this tremendous value to writing  \nthings down in a way that others can  \nunderstand it.\nRichard FULCHER — GOOGLE\nConclusion\nAs digital product designers, we’re asked to ride the waves of \nchange in our industry. People just like us helped small development \nteams create apps for desktop computing in the 1980s. In the \nlate 1990s, other designers formed a coalition that pressured \nlarge software companies to unite front-end web development \nthrough the web standards project. In the mid-2000s, we focused \non communication and user-generated content while developing \npatterns for creating web apps, and just a little later, all our work \nwas available in mobile form factors like the iPhone. Now, after \nnearly 4 decades of designed computing, design systems and \nAI are shaking  hands—presenting us with new opportunities for \ninnovation at scale.\n\n14012ChapterC 20Ct.Ipnoddu\nEvery designer will now be asked how they might change custom, \none-off design solutions into reusable components that grow the \nsystem. We’ll have to think more holistically, and work collectively \nto develop and learn a new set of tools.\nHow can we work together to improve our workflows and better \nscale design? What should be in a design system standard, and \nwhat kinds of tools could be built if such a standard existed? \nHow will design systems and AI combine to create extremely \ncustomized interactions for end users? There are many questions, \nand each answer points to a possible future. What I love about \ndesign is that it enables each of us to explore the ideas we feel \nmay have the biggest impact, and project our ideas outward and \ninto the future. Innovation is certain.\n\n14112ChapterC 20Ct.Ipnoddu\nFurther reading\n01. Thinking in Symbols for Universal Design\n02. How to Improve UX with Machine Lea[r]ning: A Wonderful \nLesson from Netflix and More\n03. Algorithm-Driven Design: How Artificial Intelligence is \nChanging Design\n04. CreativeAI: On the Democratisation & Escalation of Creativity \n— Chapter 01\n05. Project Phoebe\n\nChapter — 07\nAppendix\nMore resources\n\n14312ChapterC 20Ct.Ipnoddu\nThere are a number of great resources available for diving further \ninto the world of design systems. The folks at StyleGuides.io have \nnot only assembled a comprehensive list of example style guides \nand design systems, but have also included relevant articles, \nbooks, podcasts , talks, and tools. Alex Pate has assembled a list \nof Awesome design systems on Github. And DesignGuidelines.co \nhas a list of examples, as well as readings and tools.\nFrom these resources, we’ve curated a list of design systems and \nstyle guides you may find helpful:\n01. Airbnb\n02. Atlassian\n03. BBC, Gel\n04. Buzzfeed, Solid\n05. FutureLearn\n06. Github, Primer\n07. Google, Material\n08. IBM, Carbon\n09. IBM, Design Language\n10. Lonely Planet, Rizzo\n11. MailChimp, Patterns\n12. MailChimp, Voice & Tone\n13. Microsoft, Fabric\n14. Microsoft, Fluent Design\n15. Nordnet\n16. Salesforce, Lightning\n17. SAP, Fiori\n18. Shopify, Polaris\n19. Ubuntu\n20. WeWork, Plasma\n21. Yelp\n\nAbout the Authors\nMARCO SUAREZ\nMarco Suarez has helped shape the visual language, design systems, and \ncustomer experiences of companies like Etsy and Mailchimp. His work extends \nbeyond design to influence internal processes that scale across organizations. \nHe is also the co-founder of Methodical Coffee.\nJINA ANNE\nJina Anne is a leading advocate for design systems, having contributed to the \nevolution of systems at Amazon, Salesforce, Asana, and Google. Her work \nhas shaped foundational concepts such as design tokens. She is also the co-\nfounder of the Clarity Conference.\nKATIE SYLOR-MILLER\nKatie Sylor-Miller is Principal Engineer and Web Tech Lead at Square, and \nwas formerly Frontend Architect at Etsy. She specializes in design systems, \nweb performance, accessibility, and frontend infrastructure, and is passionate \nabout the craft of Staff Engineering. As an invited expert on the W3C Web \nPerformance Working Group, she helps guide browser development to improve \nWeb Performance APIs.\nDIANA MOUNTER\nDiana Mounter is Head of Design at GitHub. Her approach blends systems \nthinking, inclusive design, and the perspective of code as a material in the \ndesign process.\nROY STANFIELD\nRoy Stanfield has played a pivotal role in developing design systems at Airbnb \nand Etsy. He currently serves as Principal Product Designer at Shopify.\nAbout Design Better\nHosted by Eli Woolery and Aarron Walter,  \nDesign Better explores creativity at the intersection \nof design and technology. Go deeper into design at \ndesignbetter.com",
  "chunks": [
    {
      "id": "chunk-0",
      "text": "112ChapterC 20Ct.Ipnoddu\n\n212ChapterC 20Ct.Ipnoddu\nContents\nChapter 01. Introducing design systems 4\nChapter 02. Designing your design system 17\nChapter 03. Building your design system 51\nChapter 04. Putting your design system into practice 79\nChapter 05. Expanding your design system 107\nChapter 06. The future of design systems 123\nChapter 07. Appendix 142\n\n312ChapterC 20Ct.Ipnoddu\nBy Marco Suarez, Jina Anne, Katie Sylor-\nMiller, Diana Mounter, and Roy Stanfield\nA design system unites product teams around a \ncommon visual language. It reduces design debt, \naccelerates the design process, and builds bridges \nbetween teams working in concert to bring products \nto life. Learn how you can create your design system \nand help your team improve product quality while \nreducing design debt.\n\nChapter—01\nIntroducing design \nsystems\nThe power of scale\nBy Marco Suarez\n\n512ChapterC 20Ct.Ipnoddu\nIn the 1960s, computer technology began outpacing the speed of \nsoftware programming.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 980,
        "chunkIndex": 0,
        "section": "Introduction",
        "globalChunkIndex": 0
      }
    },
    {
      "id": "chunk-1",
      "text": "design debt.\n\nChapter—01\nIntroducing design \nsystems\nThe power of scale\nBy Marco Suarez\n\n512ChapterC 20Ct.Ipnoddu\nIn the 1960s, computer technology began outpacing the speed of \nsoftware programming. Computers became faster and cheaper, \nbut software development remained slow, difficult to maintain, and \nprone to errors. This gap, and the dilemma of what to do about it, \nbecame known as the “software crisis.”\nFigure 1: A UI audit collects the many permutations of \nsimple UI elements to illustrate how deep in design debt \nyour team is.\nIn 1968, at the NATO conference on software engineering, \nDouglas McIlroy presented component-based development as a \npossible solution to the dilemma. Component-based development \nprovided a way to speed up programming’s potential by making \ncode reusable, thus making it more efficient and easier to scale. \nThis lowered the effort and increased the speed of software \ndevelopment, allowing software to better utilize the power of \nmodern computers.",
      "metadata": {
        "startIndex": 780,
        "endIndex": 1774,
        "chunkIndex": 1,
        "section": "Introduction",
        "globalChunkIndex": 1
      }
    },
    {
      "id": "chunk-2",
      "text": "ble, thus making it more efficient and easier to scale. \nThis lowered the effort and increased the speed of software \ndevelopment, allowing software to better utilize the power of \nmodern computers.\n\n612ChapterC 20Ct.Ipnoddu\nNow, 50 years later, we’re experiencing a similar challenge, but this \ntime in design. Design is struggling to scale with the applications \nit supports because design is still bespoke— tailor-made solutions \nfor individual problems.\nHave you ever performed a UI audit and found you’re using a few \ndozen similar hues of blue, or permutations of the same button? \nMultiply this by every piece of UI in your app, and you begin to \nrealize how inconsistent, incomplete, and difficult to maintain your \ndesign has become.\nFor design in this state to keep up with the speed of development, \ncompanies could do 1 of 3 things:",
      "metadata": {
        "startIndex": 1574,
        "endIndex": 2574,
        "chunkIndex": 2,
        "section": "Introduction",
        "globalChunkIndex": 2
      }
    },
    {
      "id": "chunk-3",
      "text": "elopment, \ncompanies could do 1 of 3 things:",
      "metadata": {
        "startIndex": 2374,
        "endIndex": 3374,
        "chunkIndex": 3,
        "section": "Introduction",
        "globalChunkIndex": 3
      }
    },
    {
      "id": "chunk-4",
      "text": "Even with more hands working faster, the reality is bespoke design \nsimply doesn’t scale. Bespoke design is slow, inconsistent, and \nincreasingly difficult to maintain over time.\nDesign systems enable teams to build better products faster \nby making design reusable—reusability makes scale possible. \nThis is the heart and primary value of design systems. A design \nsystem is a collection of reusable components, guided by clear \nstandards, that can be assembled together to build any number of \napplications.\nFor more than 50 years, engineers have operationalized their \nwork. Now it’s time for design to realize its full potential and \njoin them.\n\n712ChapterC 20Ct.Ipnoddu\nScaling design with \nsystems thinking\nYou’re probably well aware that design systems have become a bit \nof a hot topic in the software industry these days—and for good \nreason. Design is scaling. Many businesses are investing in design \nas they recognize that the customer experience of their products \noffers a competitive",
      "metadata": {
        "startIndex": 0,
        "endIndex": 999,
        "chunkIndex": 0,
        "section": "03. Create solutions that work for multiple problems",
        "globalChunkIndex": 4
      }
    },
    {
      "id": "chunk-5",
      "text": "e software industry these days—and for good \nreason. Design is scaling. Many businesses are investing in design \nas they recognize that the customer experience of their products \noffers a competitive advantage, attracts and retains customers, \nand reduces support costs.\nHere are what things usually look like inside a company that’s \ninvesting in design:\n ÒThe design team is growing\n ÒDesign is embedded in teams throughout the company, \nmaybe in multiple locations\n ÒDesign is playing a key role in all products on all platforms\nIf you’re a designer, this sort of investment in design may sound \nexciting, but with it comes many challenges. How will you design \nconsistent UIs across platforms when many teams own various \nparts of your products? How will you empower all of these teams \nto iterate quickly? How will you maintain the inevitable design debt \nthat will build up as many designers create new and tailor-made \ndesigns?\nTo understand how creating a design system can address these",
      "metadata": {
        "startIndex": 799,
        "endIndex": 1795,
        "chunkIndex": 1,
        "section": "03. Create solutions that work for multiple problems",
        "globalChunkIndex": 5
      }
    },
    {
      "id": "chunk-6",
      "text": "erate quickly? How will you maintain the inevitable design debt \nthat will build up as many designers create new and tailor-made \ndesigns?\nTo understand how creating a design system can address these \nchallenges, we must understand what design systems are. \nDesign systems marry two concepts with individual merit, making \nsomething more powerful than its separate parts.\n\n812ChapterC 20Ct.Ipnoddu\nIt wasn’t hard to get them to follow the \nguidelines, it was hard to get them to agree \non  the guidelines.\nLori Kaplan — ATLASSIAN\nStandards\nUnderstanding not only the what, but the why, behind the design \nof a system is critical to creating an exceptional user experience. \nDefining and adhering to standards is how we create that \nunderstanding. Doing so removes the subjectivity and ambiguity \nthat often creates friction and confusion within product teams.\nStandards encompass both design and development.",
      "metadata": {
        "startIndex": 1595,
        "endIndex": 2504,
        "chunkIndex": 2,
        "section": "03. Create solutions that work for multiple problems",
        "globalChunkIndex": 6
      }
    },
    {
      "id": "chunk-7",
      "text": "is how we create that \nunderstanding. Doing so removes the subjectivity and ambiguity \nthat often creates friction and confusion within product teams.\nStandards encompass both design and development. Standardizing \nthings like naming conventions, accessibility requirements, and \nfile structure will help teams work consistently and prevent errors.\nVisual language is a core part of your design standards. Defining \nthe purpose and style of color, shape, type, icons, space, and \nmotion is essential to creating a brand aligned and consistent \nuser experience. Every component in your system incorporates \nthese elements, and they play an integral role in expressing the \npersonality of your brand.\nWithout standards, decisions become arbitrary and difficult to \ncritique. Not only does this not scale, it creates an inconsistent \nand frustrating user experience.\n\n912ChapterC 20Ct.Ipnoddu\nComponents\nComponents are portions of reusable code within your system and \nthey serve as the building blocks",
      "metadata": {
        "startIndex": 2304,
        "endIndex": 3304,
        "chunkIndex": 3,
        "section": "03. Create solutions that work for multiple problems",
        "globalChunkIndex": 7
      }
    },
    {
      "id": "chunk-8",
      "text": "e, it creates an inconsistent \nand frustrating user experience.\n\n912ChapterC 20Ct.Ipnoddu\nComponents\nComponents are portions of reusable code within your system and \nthey serve as the building blocks of your application’s interface. \nComponents range in complexity. Reducing components to a single \nfunction, like a button or a drop down increases flexibility, making \nthem more reusable. More complex components, like tables for \nspecific types of data, can serve their use cases well, but this \ncomplexity limits the number of applicable scenarios. The more \nreusable your components are, the less you need to maintain, and \nthe easier scale becomes.\nLearn more about building components in “Chapter 3: Building \nyour design system.”\nHaving technical knowledge of the Macintosh \nuser interface is a key factor in product \ndesign, but understanding the theories \nbehind the user interface can help you create \nan excellent product.\nMacintosh HIG — APPLE\nComponent-based development reduces technical",
      "metadata": {
        "startIndex": 3104,
        "endIndex": 4105,
        "chunkIndex": 4,
        "section": "03. Create solutions that work for multiple problems",
        "globalChunkIndex": 8
      }
    },
    {
      "id": "chunk-9",
      "text": "key factor in product \ndesign, but understanding the theories \nbehind the user interface can help you create \nan excellent product.\nMacintosh HIG — APPLE\nComponent-based development reduces technical overhead by \nmaking code reusable. Standards govern the purpose, style, and \nusage of these components. Together, you equip your product \nteam with a system that is easy to use, and you give them an \nunderstanding that clearly links the what with the why.\n\n1012ChapterC 20Ct.Ipnoddu\nPRO TIP — Transcend platforms\nYour visual language can transcend platforms to create \ncontinuity across web, iOS, Android, and email. Document \nand display your visual language in a prominent place within \nyour design system’s site. This will help inform system \ncontributors about how components should look and behave.\nFor instance, Google’s Material Design dives deep into every \naspect of their visual language: Check out their page on color.\nThe value of design systems\nLet’s take a detailed look at the many",
      "metadata": {
        "startIndex": 3905,
        "endIndex": 4902,
        "chunkIndex": 5,
        "section": "03. Create solutions that work for multiple problems",
        "globalChunkIndex": 9
      }
    },
    {
      "id": "chunk-10",
      "text": "ehave.\nFor instance, Google’s Material Design dives deep into every \naspect of their visual language: Check out their page on color.\nThe value of design systems\nLet’s take a detailed look at the many ways a design system can be \na much-needed painkiller for your growing pains.\nScale design\nAs teams grow, it’s common for designers to concentrate on \ndiscrete areas of an app like search and discovery, account \nmanagement, and more. This can lead to a fragmented visual \nlanguage—like a Tower of Babel of design—with each designer \nspeaking her own language. This happens when designers solve \nproblems individually and not systematically.\nWith no common design language to unite the product, the user \nexperience starts to break down, as does the design process. \nDesign critiques become unproductive when there’s a dearth of \ndesign conventions. To create alignment within teams, there must \nbe a shared source of truth—a place to reference official patterns \nand styles.",
      "metadata": {
        "startIndex": 4702,
        "endIndex": 5678,
        "chunkIndex": 6,
        "section": "03. Create solutions that work for multiple problems",
        "globalChunkIndex": 10
      }
    },
    {
      "id": "chunk-11",
      "text": "tiques become unproductive when there’s a dearth of \ndesign conventions. To create alignment within teams, there must \nbe a shared source of truth—a place to reference official patterns \nand styles.\n\n1112ChapterC 20Ct.Ipnoddu\nMost often this is a static artifact, such as a design mock, but a \nstatic reference will almost immediately become outdated. That’s \nwhy teams build monuments like Shopify’s Polaris site—a design \nsystem site, built with the system, that documents all aspects of \nthe system including the components, guidelines, and UX best \npractices. And because it is built with the system, it will always be \nup-to-date.\nAn internal design systems site is the best, most accessible source \nof truth for product teams. It provides the gravitational pull to keep \nteam members aligned and in sync.\nJesse Bennett-Chamberlain (Shopify)\nListen Online \nCircumstances For Investing In Polaris\nManage your debt\nAs applications and their teams age, they build debt.",
      "metadata": {
        "startIndex": 5478,
        "endIndex": 6450,
        "chunkIndex": 7,
        "section": "03. Create solutions that work for multiple problems",
        "globalChunkIndex": 11
      }
    },
    {
      "id": "chunk-12",
      "text": "eep \nteam members aligned and in sync.\nJesse Bennett-Chamberlain (Shopify)\nListen Online \nCircumstances For Investing In Polaris\nManage your debt\nAs applications and their teams age, they build debt. Not financial \ndebt, but technical and design debt. Debt is acquired by building \nfor the short-term. Design debt is made up of an overabundance \nof non-reusable and inconsistent styles and conventions, and the \ninterest is the impossible task of maintaining them. Over time, \nthe accumulation of this debt becomes a great weight that slows \ngrowth.\nThe act of creation does not inherently create debt—just like \nspending money doesn’t inherently create financial debt. But using \na design system will keep you on budget by keeping your design \n\n1212ChapterC 20Ct.Ipnoddu\nand code overhead low, while still allowing you to grow and evolve \nyour application.\nDesign consistently\nStandardized components used consistently and repetitively \ncreate a more predictable and easy to understand application.",
      "metadata": {
        "startIndex": 6250,
        "endIndex": 7250,
        "chunkIndex": 8,
        "section": "03. Create solutions that work for multiple problems",
        "globalChunkIndex": 12
      }
    },
    {
      "id": "chunk-13",
      "text": "still allowing you to grow and evolve \nyour application.\nDesign consistently\nStandardized components used consistently and repetitively \ncreate a more predictable and easy to understand application. \nStandardized components also allow designers to spend less \ntime focused on style and more time developing a better user \nexperience.\nPrototype  faster\nWorking within an existing design system allows you to piece \ntogether flows and interactions as quickly as pulling LEGO blocks \nfrom a bin. This allows you to build an endless amount of prototypes \nand variants for experimentation, helping your team gain insights \nand data fast.\nIterate  more  quickly\nWhether evolving the style of your UI or making UX changes to a \nflow, using a design system reduces effort from hundreds of lines \nof code to as little as a few characters. This makes iterations quick \nand painless, and experimentation much faster.",
      "metadata": {
        "startIndex": 7050,
        "endIndex": 7958,
        "chunkIndex": 9,
        "section": "03. Create solutions that work for multiple problems",
        "globalChunkIndex": 13
      }
    },
    {
      "id": "chunk-14",
      "text": "changes to a \nflow, using a design system reduces effort from hundreds of lines \nof code to as little as a few characters. This makes iterations quick \nand painless, and experimentation much faster.\n\n1312ChapterC 20Ct.Ipnoddu\nImprove usability\nInconsistent interface conventions hinder usability. When CSS \nfor countless unique interface elements and their interactions \nincrease, so does cognitive load and page weight. This makes \nfor a terrible user experience. It can also create conflicting CSS \nand JavaScript, potentially breaking your app. By using a design \nsystem, you’re able to avoid these conflicts by building a holistic \nlibrary of components, instead of per page, which means you’ll \nspend less time in quality assurance.\nBuild in accessibility\nAccessibility can be implemented at the component level by \noptimizing for those with disabilities, on slow Internet speeds, \nor on old computers. This is an easy usability win.",
      "metadata": {
        "startIndex": 7758,
        "endIndex": 8697,
        "chunkIndex": 10,
        "section": "03. Create solutions that work for multiple problems",
        "globalChunkIndex": 14
      }
    },
    {
      "id": "chunk-15",
      "text": "uild in accessibility\nAccessibility can be implemented at the component level by \noptimizing for those with disabilities, on slow Internet speeds, \nor on old computers. This is an easy usability win. In “Chapter \n3, Building your design system,” Katie Sylor-Miller explains how \ndesign systems can help improve your product’s accessibility and \ncompliance with your country’s laws.\nMyths of design systems\nEven with all their benefits, buy-in for creating a design system \ncan still be a hard sell internally. Designers can feel limited or \nrestrained, but often these perceived weaknesses are the \ngreatest strengths of a design system.\nLet’s debunk common myths you’ll hear as you sell the idea of \ncreating a design system.\n\n1412ChapterC 20Ct.Ipnoddu\nMyth 1: Too limiting\nMyth: Designers embedded in discrete areas of an app see \nqualities that may be different from other areas. Because of this, a \nuniversal system is perceived as being too limiting and might not \nserve the needs of these",
      "metadata": {
        "startIndex": 8497,
        "endIndex": 9492,
        "chunkIndex": 11,
        "section": "03. Create solutions that work for multiple problems",
        "globalChunkIndex": 15
      }
    },
    {
      "id": "chunk-16",
      "text": "dded in discrete areas of an app see \nqualities that may be different from other areas. Because of this, a \nuniversal system is perceived as being too limiting and might not \nserve the needs of these specific areas.\nReality: Designers often end up creating custom solutions to \nimprove discrete areas of the app, adding to design and technical \ndebt. With a design system, new solutions can be created and fed \nback into the system.\nMyth 2: loss of creativity\nMyth: If designers are restricted to using a design system, then \ndesigners will no longer be free to explore style. Front- end \nbacklogs are often full of design style updates. Evolving the visual \nstyle of an app is typically no small task. This can also be a great \nrisk, as it removes resources from new feature work and may \nnegatively impact usability.\nReality: The components of a design system are interdependent. \nThis means when a change is made in one location, the change \nwill be inherited throughout the whole system.",
      "metadata": {
        "startIndex": 9292,
        "endIndex": 10284,
        "chunkIndex": 12,
        "section": "03. Create solutions that work for multiple problems",
        "globalChunkIndex": 16
      }
    },
    {
      "id": "chunk-17",
      "text": "gatively impact usability.\nReality: The components of a design system are interdependent. \nThis means when a change is made in one location, the change \nwill be inherited throughout the whole system. This makes style \nupdates within a system trivial in effort but much greater in \nimpact. What once was weeks— if not months—of work, can now \nbe accomplished in an afternoon.\nMyth 3: one and done\nMyth: Once the design system is designed and built, the work is \ncomplete.\n\n1512ChapterC 20Ct.Ipnoddu\nReality: A design system is living, meaning it will require ongoing \nmaintenance and improvements as needs arise. Because your \napplication is powered by the reusable components of your system, \nhowever, the application automatically inherits improvements to \nthe system, lowering the effort to maintain the application. This is \nthe power of scaling that a design system offers.\nA lot of the original vision was about the visual  \nidentity...we started to understand that it had  \nto be a system with",
      "metadata": {
        "startIndex": 10084,
        "endIndex": 11084,
        "chunkIndex": 13,
        "section": "03. Create solutions that work for multiple problems",
        "globalChunkIndex": 17
      }
    },
    {
      "id": "chunk-18",
      "text": "n the application. This is \nthe power of scaling that a design system offers.\nA lot of the original vision was about the visual  \nidentity...we started to understand that it had  \nto be a system with really strong interaction  \ndesign fundamentals as well.\nRich FULCHER — GOOGLE\nConclusion\nDesign systems are not a fad or even an untested hypothesis. \nFor design to find the scale necessary to match the rapid growth \nof technology, component-based design and development is a \nproven and dependable solution.\nNow that you’ve seen the true value of creating a design system, \nlet’s dive into the actual design process in the next chapter.\n\n1612ChapterC 20Ct.Ipnoddu\nFurther reading",
      "metadata": {
        "startIndex": 10884,
        "endIndex": 11884,
        "chunkIndex": 14,
        "section": "03. Create solutions that work for multiple problems",
        "globalChunkIndex": 18
      }
    },
    {
      "id": "chunk-19",
      "text": "that card component for the umpteenth time",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "08. Things you could be doing instead of designing and building",
        "globalChunkIndex": 19
      }
    },
    {
      "id": "chunk-20",
      "text": "Chapter — 02\nDesigning your \ndesign system\nStep by step\nBy Jina Anne\n\n1812ChapterC 20Ct.Ipnoddu\nStarting a design system can feel daunting. There are so many \nthings to consider: the design style, how to design for modularity \nand scalability, how it will be used by other teams, how to sell the \nidea to the decision makers in the company. Where is a designer \nto start?\nBig problems are always more manageable when broken into \nsmaller pieces. Before diving into the design process, start by \nconsidering who needs to be involved in the creation of your \ndesign system and how the team will work together.\nOnce you’ve got the right people assembled, you’re ready to start \nthinking about the design language of the system, which will \ninclude color, typography, spacing, and more. Your visual design \nlanguage will be the foundation of your UI library—a series of \ncomponents that can be assembled to create an interface quickly.\nLet’s take a step-by-step look at how you can start designing your",
      "metadata": {
        "startIndex": 0,
        "endIndex": 999,
        "chunkIndex": 0,
        "section": "13. Starting a Design System",
        "globalChunkIndex": 20
      }
    },
    {
      "id": "chunk-21",
      "text": "gn \nlanguage will be the foundation of your UI library—a series of \ncomponents that can be assembled to create an interface quickly.\nLet’s take a step-by-step look at how you can start designing your \ndesign system.\nWho should be involved\nBefore beginning work on your design system, take a moment to \nthink about the team you’ll need to bring it to life. Who needs to \nbe involved? Spoiler alert! You’re going to need more than just \ndesigners.\n\n1912ChapterC 20Ct.Ipnoddu\nWe have this program called the guild...  \nessentially we take one person from each  \npillar...and for our design system we use them  \nas our user research group.\nRachel cohen — LINKEDIN\nHere’s a quick list of the disciplines that can be represented in your \nteam to create an effective design system:\n ÒDesigners to define the visual elements of the system\n ÒFront-end developers to create modular, efficient code\nAccessibility experts to ensure your system conforms to standards \nlike WCAG\n ÒContent strategists who can help",
      "metadata": {
        "startIndex": 799,
        "endIndex": 1799,
        "chunkIndex": 1,
        "section": "13. Starting a Design System",
        "globalChunkIndex": 21
      }
    },
    {
      "id": "chunk-22",
      "text": "visual elements of the system\n ÒFront-end developers to create modular, efficient code\nAccessibility experts to ensure your system conforms to standards \nlike WCAG\n ÒContent strategists who can help the team nail the voice \nand tone of the system\n ÒResearchers who can help you understand customer \nneeds\n ÒPerformance experts who can ensure your system loads \nquickly on all devices\n ÒProduct managers to ensure the system is aligning to \ncustomer needs\n ÒLeaders (VPs and directors) to champion and align the \nvision throughout the company including up to executive \nleadership\n\n2012ChapterC 20Ct.Ipnoddu\nOnce you’ve got the right skillsets represented in the design \nsystems team, identify strong leaders to represent each area who \ncan drive decisions forward. Know who on the team can advocate \nfor the areas of the design system.\nWith a team of experts guided by strong leadership, your next task \nis to establish the right team model to help you achieve your goals.\nChoosing the right team",
      "metadata": {
        "startIndex": 1599,
        "endIndex": 2597,
        "chunkIndex": 2,
        "section": "13. Starting a Design System",
        "globalChunkIndex": 22
      }
    },
    {
      "id": "chunk-23",
      "text": "e \nfor the areas of the design system.\nWith a team of experts guided by strong leadership, your next task \nis to establish the right team model to help you achieve your goals.\nChoosing the right team model\nThe team model that brings people together is as important \nas the team creating your design system. In “Team Models  for \nScaling a Design System,” design systems veteran Nathan Curtis \noutlines three popular team models used in many companies.\nThe solitary model: an “overlord” rules the design system.\nFigure 1: The solitary design system team model—one \nperson rules it all. Image by Nathan Curtis, reused \nwith permission.\nThe centralized team model: A single team maintains the design \nsystem as their full time job.\n\n2112ChapterC 20Ct.Ipnoddu\nFigure 2: The centralized design system team model—\none team rules the system. Image by Nathan Curtis, \nreused with permission.\nThe federated model: team members from across the company \ncome together to work on the system.\nFigure 3: The",
      "metadata": {
        "startIndex": 2397,
        "endIndex": 3391,
        "chunkIndex": 3,
        "section": "13. Starting a Design System",
        "globalChunkIndex": 23
      }
    },
    {
      "id": "chunk-24",
      "text": "m team model—\none team rules the system. Image by Nathan Curtis, \nreused with permission.\nThe federated model: team members from across the company \ncome together to work on the system.\nFigure 3: The federated design system team model—\npeople from various teams assemble to manage and \ngovern the system. Image by Nathan Curtis, reused with \npermission.\nThere are strengths and weaknesses in each of the above \nmodels. A solitary model is fast and scrappy, but with one person \nin charge of so much the “overlord” can become a bottleneck to \nthe completion of many tasks. . A centralized team keeps the \nsystem well maintained, but they may not be as connected to the \n\n2212ChapterC 20Ct.Ipnoddu\ncustomers’ needs as they may be less involved in user research. \nAnd a federated team has great insight into what is needed for \nall the product features and user needs, but can be quite busy \nworking on those areas already.\nMany teams are moving away from the solitary model to the \ncentralized or",
      "metadata": {
        "startIndex": 3191,
        "endIndex": 4186,
        "chunkIndex": 4,
        "section": "13. Starting a Design System",
        "globalChunkIndex": 24
      }
    },
    {
      "id": "chunk-25",
      "text": "ight into what is needed for \nall the product features and user needs, but can be quite busy \nworking on those areas already.\nMany teams are moving away from the solitary model to the \ncentralized or federated model because, as Nathan mentions in \nhis article, overlords don’t scale. The centralized or federated \nmodels are usually much better for scaling a design system.\nI wrote about the The Salesforce Team Model in response to \nNathan’s article. When I was at Salesforce on the Lightning  \nDesign System team, we used a combination of the centralized \nand federated models. In an enterprise organization as big as \nSalesforce, a centralized design systems team was not enough on \nits own. With so many key players involved and the large amount \nof ground we had to cover across products and platforms, we \nneeded an approach that would be more sustainable.\nFigure 4: A hybrid design system team model that we \nused at Salesforce—a central team and members of \nother teams come together to",
      "metadata": {
        "startIndex": 3986,
        "endIndex": 4981,
        "chunkIndex": 5,
        "section": "13. Starting a Design System",
        "globalChunkIndex": 25
      }
    },
    {
      "id": "chunk-26",
      "text": "d platforms, we \nneeded an approach that would be more sustainable.\nFigure 4: A hybrid design system team model that we \nused at Salesforce—a central team and members of \nother teams come together to manage and govern the \nsystem.\n\n2312ChapterC 20Ct.Ipnoddu\nThough the Lightning Design System has a core team, there \nare also core contributors from many of the product and feature \nareas in the Salesforce ecosystem that act as a federation of \npractitioners who surface new ideas and make requests for the \ndesign system to evolve. Researchers, accessibility specialists, \nlead product designers, prototypers, and UX engineers work \nwith the central design system team to both consume and help \nestablish the patterns, components, and the overall design system. \nEngineers refine all code to make sure the system is performant \nand production ready.\nThough the solitary model is less popular in most teams because \nthe primary contributor can become a bottleneck, there are \nsituations where it can",
      "metadata": {
        "startIndex": 4781,
        "endIndex": 5781,
        "chunkIndex": 6,
        "section": "13. Starting a Design System",
        "globalChunkIndex": 26
      }
    },
    {
      "id": "chunk-27",
      "text": "re the system is performant \nand production ready.\nThough the solitary model is less popular in most teams because \nthe primary contributor can become a bottleneck, there are \nsituations where it can work quite well. In the midst of a political \ncampaign moving at breakneck speeds, Mina  Markham had little \ntime to bring in reinforcements as she developed new online assets \nfor Hillary Clinton. She created a design system called Pantsuit to \nhelp many teams in many locations expedite design and production \nwhile maintaining consistency in the campaign brand. The solitary \nmodel let Mina focus on speed first and longevity second, which is \na different tack than a typical enterprise might take.\nFigure 5: Pantsuit, a design system created by Mina \nMarkham for the 2016 Hillary Clinton campaign.\n\n2412ChapterC 20Ct.Ipnoddu\nAs you determine what team model works for you, consider your \ngoals. If you want to move fast, the solitary method is ideal initially, \nthough some work may need to be",
      "metadata": {
        "startIndex": 5581,
        "endIndex": 6579,
        "chunkIndex": 7,
        "section": "13. Starting a Design System",
        "globalChunkIndex": 27
      }
    },
    {
      "id": "chunk-28",
      "text": "gn.\n\n2412ChapterC 20Ct.Ipnoddu\nAs you determine what team model works for you, consider your \ngoals. If you want to move fast, the solitary method is ideal initially, \nthough some work may need to be done later to fully adopt it across \nother teams. If you want to move fast, but want to encourage buy-\nin from the start, consider the centralized team model. And to get \nthe most buy-in and shared ownership, the federated model is \na good option. In any case, remember that a design system is a \nproduct so staff it like a product instead of a project; you want \npeople committed to maintaining and evolving it.\nWith the team and the model that organizes them established, \nit’s time to start your design system just as you would any new \nproduct: by talking to your customers.\nInterviewing  customers\nAs with any product design process, it’s important to do your \nresearch. Who will be using your design system and how will they \nuse it?",
      "metadata": {
        "startIndex": 6379,
        "endIndex": 7319,
        "chunkIndex": 8,
        "section": "13. Starting a Design System",
        "globalChunkIndex": 28
      }
    },
    {
      "id": "chunk-29",
      "text": "product: by talking to your customers.\nInterviewing  customers\nAs with any product design process, it’s important to do your \nresearch. Who will be using your design system and how will they \nuse it? Your design system will get used much more often if you \ncreate it to fit into the workflow of other teams. By interviewing \nusers, you can pinpoint problems ahead of time, define principles \nthat will help others use the system properly, and focus your \nenergies on the things that will be most important.\n\n2512ChapterC 20Ct.Ipnoddu\nPRO TIP — Building empowering style guides with practical \nresearch\nIsaak Hayes and Donna Chan delivered an interesting talk \ntitled, “Building Empowering Style Guides with Practical \nResearch (https://dbtr.co/empowering-style-guides),” at \nClarity Conference (https://dbtr.co/clarity-conf). The talk \nproposes a series of useful techniques that can help you \nconduct research effectively for your design system.",
      "metadata": {
        "startIndex": 7119,
        "endIndex": 8066,
        "chunkIndex": 9,
        "section": "13. Starting a Design System",
        "globalChunkIndex": 29
      }
    },
    {
      "id": "chunk-30",
      "text": "owering-style-guides),” at \nClarity Conference (https://dbtr.co/clarity-conf). The talk \nproposes a series of useful techniques that can help you \nconduct research effectively for your design system. After \nthe interviews, they use the data to create design principles, \nmetrics, and user stories.\nA less common group of people to interview are members of your \nopen source community. This is likely in organizations that provide \ndeveloper tools for their customer and partner communities. If \nyou plan to open source your design system—a potentially bigger \nproject—then you’ll need to speak with potential contributors and \nconsumers to discover what use cases your design system will \nneed to satisfy.\nAnd then there are the executives, leaders, and management. It \nis important to get their thoughts as well. You will need their buy-\nin to support and fund the system. Listen to their concerns and \nuse them as actionable goals and metrics to achieve.",
      "metadata": {
        "startIndex": 7866,
        "endIndex": 8823,
        "chunkIndex": 10,
        "section": "13. Starting a Design System",
        "globalChunkIndex": 30
      }
    },
    {
      "id": "chunk-31",
      "text": "agement. It \nis important to get their thoughts as well. You will need their buy-\nin to support and fund the system. Listen to their concerns and \nuse them as actionable goals and metrics to achieve. Examples of \nrequests might be faster shipping of features, better performance, \nand improved UI quality.\n\n2612ChapterC 20Ct.Ipnoddu\nWith insights in hand from customer interviews, it’s time to take \nan inventory. There are two types of interface inventories to be \ncreated:\n ÒAn inventory of the visual attributes (such as spacing, \ncolor, and typography), which will help us create a codified \nvisual language\n ÒAn inventory of each UI element (such as buttons, cards, \nand modals), which will help us create a UI library of \ncomponents\nLet’s first focus on a global visual inventory. We’ll get to the UI \nelement inventory later.\nCreating a visual inventory\nOf course, if you’re starting a design system for a product that \ndoesn’t yet exist you can skip this step and jump straight to \ncreating a",
      "metadata": {
        "startIndex": 8623,
        "endIndex": 9624,
        "chunkIndex": 11,
        "section": "13. Starting a Design System",
        "globalChunkIndex": 31
      }
    },
    {
      "id": "chunk-32",
      "text": "he UI \nelement inventory later.\nCreating a visual inventory\nOf course, if you’re starting a design system for a product that \ndoesn’t yet exist you can skip this step and jump straight to \ncreating a visual language for your new product. Lucky you!\nConducting a Visual Audit\nAs we start to take inventory, it’s good practice to take a look at \nthe CSS used to create all of those elements you just captured in \nyour visual inventory. Use a tool like CSS Stats to see how many \nrules, selectors, declarations, and properties you have in your style \nsheets. More relevant, it will show you how many unique colors, \nfont sizes, and font families you have. It also shows a bar chart for \nthe number of spacing and sizing values. This is a great way to see \nwhere you can merge or remove values.\n\n2712ChapterC 20Ct.Ipnoddu\nFigure 6: Facebook’s 38 unique text colors found by CSS \nStats.\nIf you’re creating an inventory in Sketch use the Sketch-Style-\nInventory plugin to aggregate all colors, text styles,",
      "metadata": {
        "startIndex": 9424,
        "endIndex": 10425,
        "chunkIndex": 12,
        "section": "13. Starting a Design System",
        "globalChunkIndex": 32
      }
    },
    {
      "id": "chunk-33",
      "text": "erC 20Ct.Ipnoddu\nFigure 6: Facebook’s 38 unique text colors found by CSS \nStats.\nIf you’re creating an inventory in Sketch use the Sketch-Style-\nInventory plugin to aggregate all colors, text styles, and symbols \nquickly. It also gives you the ability to merge similar styles into one.\nCreating a visual  design language\nI must admit, as an art school graduate the visual design language \nin a design system is my favorite part to work on. I love thinking \nabout color theory, typography, and layout, which are at the core \nof any design system.\n\n2812ChapterC 20Ct.Ipnoddu\nIf we break apart each component of a design system we find these \nfundamental elements that make up its visual design language:\n ÒColors\n ÒTypography (size, leading, typefaces, and so on)\n ÒSpacing (margins, paddings, positioning coordinates, \nborder spacing)\n ÒImages (icons, illustrations)\nDepending on your needs, you may also include the following to \nfurther standardize the user experience:\n ÒVisual form (depth,",
      "metadata": {
        "startIndex": 10225,
        "endIndex": 11218,
        "chunkIndex": 13,
        "section": "13. Starting a Design System",
        "globalChunkIndex": 33
      }
    },
    {
      "id": "chunk-34",
      "text": "ositioning coordinates, \nborder spacing)\n ÒImages (icons, illustrations)\nDepending on your needs, you may also include the following to \nfurther standardize the user experience:\n ÒVisual form (depth, elevation, shadows,  \nrounded corners, texture)\n ÒMotion\n ÒSound\nConsider the role each of these design elements plays in a simple \ncomponent like a button. A button typically has a background \ncolor, typography for the label, and spacing inside it. There may \nbe an icon next to the label to create a visual cue. A border on \nthe edge serves as simple ornamentation and may even round the \ncorners. Finally, hovering over or clicking the button could trigger \nanimation or sound as feedback to the user. Though a button may \nseem simple, there are many design decisions required to bring it \nto life.\n\n2912ChapterC 20Ct.Ipnoddu\nFigure 7: The many variations of buttons in the Buzzfeed \nSolid design system: buttons applied to both button \nelements and links, in the following modifiers: primary,",
      "metadata": {
        "startIndex": 11018,
        "endIndex": 12015,
        "chunkIndex": 14,
        "section": "13. Starting a Design System",
        "globalChunkIndex": 34
      }
    },
    {
      "id": "chunk-35",
      "text": "ife.\n\n2912ChapterC 20Ct.Ipnoddu\nFigure 7: The many variations of buttons in the Buzzfeed \nSolid design system: buttons applied to both button \nelements and links, in the following modifiers: primary, \nsecondary, transparent, negative, white, disabled, with \nicons, social, small, small with icons, small social, as well \nas a custom button that you can color to your needs.\nDesign tokens\nBefore we dive into visual design standards, I want to discuss \ndesign tokens. Design tokens are the “subatomic” foundation of \na design system implementation. At its simplest, they are name \nand value pairs stored as data to abstract the design properties \nyou want to manage. With the values for all design tokens stored \nin one place, it’s easier to achieve consistency while reducing the \nburden of managing your design system.\nExample: SPACING_MEDIUM: 1rem.\n\n3012ChapterC 20Ct.Ipnoddu\nIn design tokens you can store colors, spacing, sizing, animation \ndurations, etc, and distribute them to various",
      "metadata": {
        "startIndex": 11815,
        "endIndex": 12807,
        "chunkIndex": 15,
        "section": "13. Starting a Design System",
        "globalChunkIndex": 35
      }
    },
    {
      "id": "chunk-36",
      "text": "anaging your design system.\nExample: SPACING_MEDIUM: 1rem.\n\n3012ChapterC 20Ct.Ipnoddu\nIn design tokens you can store colors, spacing, sizing, animation \ndurations, etc, and distribute them to various platforms.\nFigure 8: Example of border radius design tokens on the \nLightning Design System.\nWe’ll look more closely at design tokens in Chapter 3.\nColor\nThe colors you choose for your design system are more than just \nan extension of your brand. A UI uses color to convey:\n ÒFeedback: Error and success states\n ÒInformation: Charts, graphs and wayfinding elements\n ÒHierarchy: Showing structured order through color and \ntypography\nCommon colors in a design system include 1-3 primaries that \nrepresent your brand. If none of these work well as a link and button \n\n3112ChapterC 20Ct.Ipnoddu\ncolor, then you may have an extra color for that as well. It’s a good \nidea to use the same color for links and button backgrounds as it \nmakes it easier for users to recognize interactive elements.\nYou’ll",
      "metadata": {
        "startIndex": 12607,
        "endIndex": 13605,
        "chunkIndex": 16,
        "section": "13. Starting a Design System",
        "globalChunkIndex": 36
      }
    },
    {
      "id": "chunk-37",
      "text": "then you may have an extra color for that as well. It’s a good \nidea to use the same color for links and button backgrounds as it \nmakes it easier for users to recognize interactive elements.\nYou’ll likely have neutrals for general UI backgrounds and borders—\nusually greys. And finally, you’ll have colors that are for states such \nas error, warning, and success. Group these colors to see how well \nthey work together and refine as needed.\nFigure 9: Color palette with design tokens in the Carbon \ndesign system.\n\n3212ChapterC 20Ct.Ipnoddu",
      "metadata": {
        "startIndex": 13405,
        "endIndex": 14405,
        "chunkIndex": 17,
        "section": "13. Starting a Design System",
        "globalChunkIndex": 37
      }
    },
    {
      "id": "chunk-38",
      "text": "The in-progress book, Programming Design Systems by \nRune Madsen, has some great chapters on color available \nonline to read, including “A short history of color theory”.\nPRO TIP — Checking color contrast\nThere are a variety of color contrast checkers (https://dbtr.\nco/color-contrast) you can use to ensure your color palette \nworks for everyone who will use your products. Be sure to \ncheck contrast ratios for background and text color pairings.\nLarger design systems sometimes include colors for objects and \nproducts. For example, at Salesforce we had a color for contacts, \nfor sales deals, or groups, and so on. We also had them for products: \nSales Cloud, Marketing Cloud, Analytics Cloud, etc. Color can be a \nhelpful wayfinding tool for your users.\nFigure 10: Colors used for objects in Salesforce.\n\n3312ChapterC 20Ct.Ipnoddu\nUsing color for wayfinding can be tricky to do while maintaining \naccessibility, as people who are color blind may not be able to \ndiscern some",
      "metadata": {
        "startIndex": 0,
        "endIndex": 980,
        "chunkIndex": 0,
        "section": "PRO TIP",
        "globalChunkIndex": 38
      }
    },
    {
      "id": "chunk-39",
      "text": "d for objects in Salesforce.\n\n3312ChapterC 20Ct.Ipnoddu\nUsing color for wayfinding can be tricky to do while maintaining \naccessibility, as people who are color blind may not be able to \ndiscern some differences.\nDepending on how strict you want to be with your palette, you \nmay want to include a range of tints—a color mixed with white—\nand shades—a color mixed with black. Sometimes you may use \nother colors instead of white or black to avoid muddiness, such as \nan orange to darken a yellow so it doesn’t appear brown.\nThese color variations allow designers to have choices. But \nbe warned, having too many choices can lead to major design \ninconsistencies. Keep your inclusion of tints, shades, and neutral \npalettes slim to prevent misuse of the system while still giving \ndesigners the flexibility they need. You can always add more \ncolors as you find the need.\n\n3412ChapterC 20Ct.Ipnoddu\nFigure 11: The Pivotal UI style guide chooses to give a \nwide range of color tints and shades with",
      "metadata": {
        "startIndex": 780,
        "endIndex": 1777,
        "chunkIndex": 1,
        "section": "PRO TIP",
        "globalChunkIndex": 39
      }
    },
    {
      "id": "chunk-40",
      "text": "xibility they need. You can always add more \ncolors as you find the need.\n\n3412ChapterC 20Ct.Ipnoddu\nFigure 11: The Pivotal UI style guide chooses to give a \nwide range of color tints and shades with their design \ntokens. While I personally prefer to only give a leaner set \nof options (as seen in the Sass style guide), some design \nsystems prefer to offer more choices. Consider which \napproach works for you as you balance concerns like \ncreative freedom versus tighter consistency.\nTypography",
      "metadata": {
        "startIndex": 1577,
        "endIndex": 2577,
        "chunkIndex": 2,
        "section": "PRO TIP",
        "globalChunkIndex": 40
      }
    },
    {
      "id": "chunk-41",
      "text": "The fonts you choose have a high impact on both your brand and \nyour user experience. Keep legibility in mind as you select the \nright fonts for your system. Keeping to common system fonts like \nHelvetica, Times New Roman, or Verdana can be a great shortcut, \nas they are familiar to the user’s eye. Some companies prefer \ncustom web fonts to better reflect their brand, but pay special \nattention to how you use them as performance can be affected.\nMost design systems I’ve worked on include just two typefaces: \none font for both headings and body copy, and a monospace \n\n3512ChapterC 20Ct.Ipnoddu\nfont for code. Sometimes there’s an additional font for headings \nthat compliments the body font. Most design systems do not \nhave a need for more, unless you have a system that supports \nmultiple brands. It’s best to keep the number low as it’s not only a \nbest practice of typographic design, it also prevents performance \nissues caused by excessive use of web fonts.\n“Line spacing (leading) is at",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "FONTS AND WEIGHTS",
        "globalChunkIndex": 41
      }
    },
    {
      "id": "chunk-42",
      "text": "nds. It’s best to keep the number low as it’s not only a \nbest practice of typographic design, it also prevents performance \nissues caused by excessive use of web fonts.\n“Line spacing (leading) is at least space- and-a-half within \nparagraphs, and paragraph spacing is at least 1.5 times \nlarger than the line spacing.”",
      "metadata": {
        "startIndex": 800,
        "endIndex": 1800,
        "chunkIndex": 1,
        "section": "FONTS AND WEIGHTS",
        "globalChunkIndex": 42
      }
    },
    {
      "id": "chunk-43",
      "text": "(WCAG) 2.0\nW3C\n\n3612ChapterC 20Ct.Ipnoddu\nFigure 12: Google’s Roboto shown in varying weights.\nThese days it’s trendy to use a font at a very thin weight, but be \naware that legibility can become an issue. If you want to use light \nor thin weights, only use them at larger text sizes.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "WEB CONTENT\nACCESSIBILITY GUIDELINES",
        "globalChunkIndex": 43
      }
    },
    {
      "id": "chunk-44",
      "text": "When selecting the size to set your type, consider the legibility of \nthe font you’ve chosen. In most cases, a 16px font size works well. \nIt’s the default font size in most browsers, and it’s quite easy to \nread for most people. I like using 16px as it works with the 4-based \nmetrics used by Apple and Google (and is gaining traction as the \nstandard approach). I recommend this as your baseline, though I \nwould use it in a relative format like 1rem for CSS-based systems.\nYou can use a modular scale for larger or smaller font sizes for \nother elements such as headings. A modular scale is a set of \nnumbers in which you have 1 base number, and a ratio to generate \n\n3712ChapterC 20Ct.Ipnoddu\nthe next number. You keep applying the ratio to the new number \nto get yet another number.\nPRO TIP — Understanding modular scale\nLearn more about modular scales to create more meaningful  \ntypography.\nFigure 13: The Modular Scale tool helps you find one \nthat works for you.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 972,
        "chunkIndex": 0,
        "section": "TYPE SCALE",
        "globalChunkIndex": 44
      }
    },
    {
      "id": "chunk-45",
      "text": "another number.\nPRO TIP — Understanding modular scale\nLearn more about modular scales to create more meaningful  \ntypography.\nFigure 13: The Modular Scale tool helps you find one \nthat works for you. It even provides a Sass version of \nthe tool, which you could add to your design token set.\nAs you design your type treatments, be sure to give thought to \nhow it will respond to various screen sizes to maintain legibility. \nYou won’t want your headings to be too large for mobile devices. \nAnd for much larger displays, you have the room to bump up sizes.\nA common method is to enlarge headings on larger viewports. \nYou can also use viewport units to scale your type based on a \npercentage of your screen size.\n\n3812ChapterC 20Ct.Ipnoddu",
      "metadata": {
        "startIndex": 772,
        "endIndex": 1772,
        "chunkIndex": 1,
        "section": "TYPE SCALE",
        "globalChunkIndex": 45
      }
    },
    {
      "id": "chunk-46",
      "text": "Leading, or line-height in CSS, can improve readability and \naesthetics of your typography. While the best line-height can vary \ndepending on the font face and the line length, a general rule of \nthumb is to have leading at around 1.4–1.5x the font-size. 1.5 is \nrecommended by the W3C Web Accessibility Initiative.\nIt also makes your math more predictable, but you don’t have \nto calculate it. You can define your line-height without a unit of \nmeasurement and the browser will do all the hard math for you.\nFor headings, tighten it up depending on your typeface. In most \ncases, I find a 1.25 or 1.125 ratio works quite well.\nFigure 14: Tachyons also use 1.5 for body and 1.25 for \nheadings.\n\n3912ChapterC 20Ct.Ipnoddu",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "LEADING",
        "globalChunkIndex": 46
      }
    },
    {
      "id": "chunk-47",
      "text": "The system you use for spacing and sizing looks best when you \nhave rhythm and balance. This means using numbers based on \npatterns and proportions. Using a consistent spacing scale also \npromotes maintainability through ratios by making layouts more \npredictable and more likely to “fit” and align well.\nWhen I designed an Android app, I studied Google’s design \nguidelines. I noticed a pattern of using 8dp between elements and \n16dp for outer gutters. It broke me out of using a 10-based scale \nI was accustomed to, as I found that 4-based worked so much \nbetter.\nA 4-based scale is growing in popularity as the recommended \nscale for many reasons. Both iOS and Android use and recommend \nmetrics that are divisible by or multiples of 4. Standard ICO size \nformats, which are used by most operating systems, for icons \ntended be 4-based (16, 24, 32, etc.) so that they scaled more easily. \nThe browser’s default font size is usually 16.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 940,
        "chunkIndex": 0,
        "section": "SPACING AND SIZING",
        "globalChunkIndex": 47
      }
    },
    {
      "id": "chunk-48",
      "text": "Standard ICO size \nformats, which are used by most operating systems, for icons \ntended be 4-based (16, 24, 32, etc.) so that they scaled more easily. \nThe browser’s default font size is usually 16. When everything is \nusing this system, things are more likely to fit in place and line up. \nAnd finally, responsive math works out well.\n\n4012ChapterC 20Ct.Ipnoddu\nFigure 15: The Google Android design guidelines (before \nthis site was replaced by material design). Studying \nthese guidelines made me a better mobile designer.\nFor horizontal spacing, an 8-based scale works quite well. You \ncan make margins and padding equal or in proportion to the font \nsize. But for vertical spacing, I tend to use a 12-based system. This \nis due to the line-height I get of 1.5 (with the default font size of \n16px) getting us to 24.\nOccasionally, you may have to break this rule. If you’ve added a \n1px border to something, this border can throw off alignment by \na hair.",
      "metadata": {
        "startIndex": 740,
        "endIndex": 1700,
        "chunkIndex": 1,
        "section": "SPACING AND SIZING",
        "globalChunkIndex": 48
      }
    },
    {
      "id": "chunk-49",
      "text": "1.5 (with the default font size of \n16px) getting us to 24.\nOccasionally, you may have to break this rule. If you’ve added a \n1px border to something, this border can throw off alignment by \na hair. So you might find yourself using a padding or margin that \nsubtracts that amount. This is something that you do on a case-\nby-case basis.\nYou probably want elements to grow and shrink with the content. \nFor general sizing, avoid setting widths and heights unless totally \nnecessary. You can achieve responsive design much easier if you \nlet elements flow to fill the space they’re given in the layout.\n\n4112ChapterC 20Ct.Ipnoddu\nImages",
      "metadata": {
        "startIndex": 1500,
        "endIndex": 2500,
        "chunkIndex": 2,
        "section": "SPACING AND SIZING",
        "globalChunkIndex": 49
      }
    },
    {
      "id": "chunk-50",
      "text": "For icons and illustrations, I find using a vector format (SVG) \nworks best for scalability and responsive design. However, if you \nfind yourself needing to use photography, you may need to use a \nrasterized image format like JPG or PNG.\nFor most photos, illustrations, and diagrams, you can allow \nthe image to go 100% to the container or viewport and let the \nheight automatically set itself by not defining it. This works best \nfor responsive layouts. You may also want to define some preset \nwidths for images if you don’t want it to go full width (for example, \nhalf-width, a third, or a fourth). I recommend setting these as max-\nwidths so that the image can rescale for smaller screens.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "FILE FORMATS",
        "globalChunkIndex": 50
      }
    },
    {
      "id": "chunk-51",
      "text": "Before drawing your icons, come up with your guidelines around \nthem first. Will they be filled or outline? What is the line weight? \nWill they use more than 1 color? What sizes will they be? Is there \nan icon art boundary set inside an outer boundary?\nYou may have different styles for different icon types. For example, \nutility and action icons (like a notifications bell or a settings cog \nicon) may be solid and one color, while navigation icons may be \nmulticolored and more creative. Clear guidelines will keep your \nicons unified.\n\n4212ChapterC 20Ct.Ipnoddu\nFigure 16: Apple shows the different icon types in their \necosystem: app icons, glyphs, and glyphs used on color.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "ICONOGRAPHY",
        "globalChunkIndex": 51
      }
    },
    {
      "id": "chunk-52",
      "text": "Illustrations are a great way to add some character to your product. \nYou can use these for empty states, loading screens, modals, and \nother components that invite visual interest.\nShopify went to great lengths to produce unique illustrations for \nall of the empty states of their platform, which conveyed a strong \nsense of brand personality.\nSimilar to icons, it’s helpful to have guidelines for the style of your \nillustrations.\n\n4312ChapterC 20Ct.Ipnoddu\nFigure 17: Illustration guidelines by Al Power.\nVisual form\nVisual form, or the material quality of your UI, is about the \nbackground images, gradients, and textures, shadows and \nelevation (z-indexes), rounded corners, and borders. These are \nvisual qualities that help emphasize and decorate elements to add \nvisual hierarchy and aesthetics. In any case, all are examples of \nornamentation that need to be standardized.\nGoogle does a great job indicating how depth and elevation work \nwith layering of components.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 977,
        "chunkIndex": 0,
        "section": "ILLUSTRATIONS",
        "globalChunkIndex": 52
      }
    },
    {
      "id": "chunk-53",
      "text": "hierarchy and aesthetics. In any case, all are examples of \nornamentation that need to be standardized.\nGoogle does a great job indicating how depth and elevation work \nwith layering of components.\n\n4412ChapterC 20Ct.Ipnoddu\nFigure 18: An example of depth through elevation in \nGoogle’s material design implemented through z-indexes \nand shadows.\nMotion and sound\nWhen you define your visual language, motion and sound might \nnot immediately come to mind. You experience these in a different \nway. But motion and sound can have a high impact on the \nexperience of your app. You’ll want to have that systemized as well \nfor consistency. I personally haven’t explored these areas as much \nas I’d like to admit, but there are some great examples in the wild.\n\n4512ChapterC 20Ct.Ipnoddu\nFigure 19: IBM’s animation guidelines draw upon their \nrich history of products and technology.\n\n4612ChapterC 20Ct.Ipnoddu\nCreating a user  \ninterface library\nBefore we conducted a visual inventory, which looked at",
      "metadata": {
        "startIndex": 777,
        "endIndex": 1776,
        "chunkIndex": 1,
        "section": "ILLUSTRATIONS",
        "globalChunkIndex": 53
      }
    },
    {
      "id": "chunk-54",
      "text": "s animation guidelines draw upon their \nrich history of products and technology.\n\n4612ChapterC 20Ct.Ipnoddu\nCreating a user  \ninterface library\nBefore we conducted a visual inventory, which looked at the visual \nqualities of elements, such as color, spacing, and typography. \nNow, we will conduct a UI inventory, in which we look at the actual \npieces of UI—like buttons, cards, lists, forms, and more. Where \nvisual language is all about the visual approach and how things \nlook on a global visual level, a user interface library (otherwise \nknown as a pattern library) looks at actual components of a UI.\nLet’s take a look at each of these design elements and the role \nthey’ll play in your design system. Take stock of all interface \nelements in production to see just how much design debt you \nneed to address and what elements are most commonly used. \nWarning! This can get a bit depressing, as most companies have \nan intense amount of inconsistency in their UIs.\nTo create an interface",
      "metadata": {
        "startIndex": 1576,
        "endIndex": 2569,
        "chunkIndex": 2,
        "section": "ILLUSTRATIONS",
        "globalChunkIndex": 54
      }
    },
    {
      "id": "chunk-55",
      "text": "you \nneed to address and what elements are most commonly used. \nWarning! This can get a bit depressing, as most companies have \nan intense amount of inconsistency in their UIs.\nTo create an interface inventory simply open all products in \nproduction at your organization, screenshot all buttons, forms, \nvarious type styles, images, and collect them in a slide deck or on \nbig posters where the whole team can see.\nYou can do this with cut out print-outs or through screenshots.\nGather the folks you’re involving (as mentioned earlier in this \nchapter). Have them conduct this inventory with you, either \nthrough a shared presentation or via a hands-on activity. The idea \nis to gather the different components you’re using and categorize \nand merge them.\n\n4712ChapterC 20Ct.Ipnoddu\nSome like dividing the pieces into elements, components, regions, \nutilities, and so on. Atomic Design is a great example of this line of \nthinking, which is a great conceptual model.\nBut when it comes down to it,",
      "metadata": {
        "startIndex": 2369,
        "endIndex": 3366,
        "chunkIndex": 3,
        "section": "ILLUSTRATIONS",
        "globalChunkIndex": 55
      }
    },
    {
      "id": "chunk-56",
      "text": "ding the pieces into elements, components, regions, \nutilities, and so on. Atomic Design is a great example of this line of \nthinking, which is a great conceptual model.\nBut when it comes down to it, everything is pretty much a \ncomponent, so at the end of the day, you could label all as such. \nBut in general, what I see most design systems break things down \ninto are:\n Òelements (or basics, or atoms)—these are small, stand- \nalone components like buttons and icons\n Òcomponents (or molecules, or modules)—these are usually \nan assembly of small components into a larger component \nlike a search form (which includes a form input, a button, \nand potentially even a search icon)\n Òregions (or zones, or organisms)—these are an area of the \nUI like a left-hand navigation\n Òlayouts—how the pieces are laid out on the page (like a \nheader region, followed by a sidebar and main content \narea, followed by a footer)\nAfter you complete the inventory, you can merge and remove what \nyou don’t need",
      "metadata": {
        "startIndex": 3166,
        "endIndex": 4162,
        "chunkIndex": 4,
        "section": "ILLUSTRATIONS",
        "globalChunkIndex": 56
      }
    },
    {
      "id": "chunk-57",
      "text": "es are laid out on the page (like a \nheader region, followed by a sidebar and main content \narea, followed by a footer)\nAfter you complete the inventory, you can merge and remove what \nyou don’t need (either in a spreadsheet or even directly in a code \nrefactor if you want more immediate change). Also, document \nwhat the component is and when to use it. This will become your \nUI library (or pattern library, or component library, depending on \nwhat your organization chooses to call it.).\n\n4812ChapterC 20Ct.Ipnoddu\nFigure 20: The US Government agency 18F has one of \nmy favorite UI libraries: the U.S. Web Design Standards.\nMost design system documentation includes the component’s \nname, description, example, and code. Others may show meta \ndata, release histories, examples, and more. What matters most \nis that you show what’s necessary for your team to get your work \ndone.\n\n4912ChapterC 20Ct.Ipnoddu\nFigure 21: The Rizzo component library by Lonely \nPlanet.",
      "metadata": {
        "startIndex": 3962,
        "endIndex": 4931,
        "chunkIndex": 5,
        "section": "ILLUSTRATIONS",
        "globalChunkIndex": 57
      }
    },
    {
      "id": "chunk-58",
      "text": "s, examples, and more. What matters most \nis that you show what’s necessary for your team to get your work \ndone.\n\n4912ChapterC 20Ct.Ipnoddu\nFigure 21: The Rizzo component library by Lonely \nPlanet.\n\n5012ChapterC 20Ct.Ipnoddu\nConclusion\nCreating a design system not only helps your team produce more \nconsistent user experiences, it also builds bridges between design \nand development. By creating a common visual language codified \nthrough design tokens, and a set of components and patterns \ncataloged in a UI library, you’ll vastly improve designer/developer \ncommunication. You’ll also have fine-tuned control of the UI in a \nway that is manageable, scalable, and robust.\nFurther reading",
      "metadata": {
        "startIndex": 4731,
        "endIndex": 5731,
        "chunkIndex": 6,
        "section": "ILLUSTRATIONS",
        "globalChunkIndex": 58
      }
    },
    {
      "id": "chunk-59",
      "text": "system for the U.S. government by 18F",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "05. Building a large-scale design system: How we created a design",
        "globalChunkIndex": 59
      }
    },
    {
      "id": "chunk-60",
      "text": "Chapter — 03\nBuilding your  \ndesign system\nA strong foundation\nBy Katie Sylor-Miller\n\n5212ChapterC 20Ct.Ipnoddu\nModern design systems are the result of many years of evolution in \nthe way we write front-end code. When I started my career, most \nsites were built with single-use, inefficient, fragile, and inconsistent \nfront-end codebases. Through hard- won experience and many \nyears of collaboration and iteration, front-end developers have \nestablished more sophisticated practices for writing and organizing \nour code. Now, there is an explosion of front-end frameworks and \ntooling to help you write better, more maintainable HTML, CSS, \nand JavaScript.\nThis represents an exciting paradigm shift in front-end development, \nbut the number of choices available can be overwhelming.  \nA cursory glance at the table of contents for “Cody Lindley’s \nFront End Developer Handbook 2017’s section on tools” reveals \na bewildering array of considerations.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 953,
        "chunkIndex": 0,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 60
      }
    },
    {
      "id": "chunk-61",
      "text": "s available can be overwhelming.  \nA cursory glance at the table of contents for “Cody Lindley’s \nFront End Developer Handbook 2017’s section on tools” reveals \na bewildering array of considerations. I couldn’t possibly cover \nall of the technology choices available—the factors that go into \nyour decision-making will be largely situational, and this is only a \nchapter!\nInstead, I’ll save you the headache of attending the school of hard \nknocks by walking you through what I’ve learned from building \nand contributing to 3 different design systems. First, I’ll cover the \ntechnology-agnostic foundational principles that should guide \nthe development of your design system. Then, I’ll focus on some \ncommon pitfalls and how you can avoid falling prey to them. \nThroughout, I’ll introduce you to some of the tools that will help \nyou along the way, but remember this: Your technical approach \ndoesn’t matter as much as creating a living, breathing system \nthat’s flexible, maintainable, stable,",
      "metadata": {
        "startIndex": 753,
        "endIndex": 1750,
        "chunkIndex": 1,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 61
      }
    },
    {
      "id": "chunk-62",
      "text": "some of the tools that will help \nyou along the way, but remember this: Your technical approach \ndoesn’t matter as much as creating a living, breathing system \nthat’s flexible, maintainable, stable, scalable, and successful in the \nlong-term.\n\n5312ChapterC 20Ct.Ipnoddu\nFoundations\nRegardless of the technologies and tools behind them, a successful \ndesign system follows these guiding principles:\n ÒIt’s consistent. The way components are built and managed \nfollows a predictable pattern.\n ÒIt’s self-contained. Your design system is treated as a \nstandalone dependency.\n ÒIt’s reusable. You’ve built components so they can be \nreused in many contexts.\n ÒIt’s accessible. Applications built with your design system \nare usable by as many people as possible, no matter how \nthey access the web.\n ÒIt’s robust. No matter the product or platform to which your \ndesign system is applied, it should perform with grace and \nminimal bugs.\nLet’s take a look at each of these principles in more",
      "metadata": {
        "startIndex": 1550,
        "endIndex": 2538,
        "chunkIndex": 2,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 62
      }
    },
    {
      "id": "chunk-63",
      "text": "he web.\n ÒIt’s robust. No matter the product or platform to which your \ndesign system is applied, it should perform with grace and \nminimal bugs.\nLet’s take a look at each of these principles in more detail.\nConsistency\nYour first, most important task when starting out is to define the \nrules of your system, document them, and ensure that everyone \nfollows them. When you have clearly documented code standards \nand best practices in place, designers and developers from across \nyour organization can easily use and, more importantly, contribute \nto your design system.\n\n5412ChapterC 20Ct.Ipnoddu\nCode style guides\nCode style guides provide the grammar rules of syntax and \nsemantics for your code. Code syntax is the set of rules for \nstructuring and formatting your code (e.g. curly braces always go \non a new line). Code semantics provide the rules for making your \ncode understandable (e.g. alphabetize CSS property declarations).",
      "metadata": {
        "startIndex": 2338,
        "endIndex": 3275,
        "chunkIndex": 3,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 63
      }
    },
    {
      "id": "chunk-64",
      "text": "structuring and formatting your code (e.g. curly braces always go \non a new line). Code semantics provide the rules for making your \ncode understandable (e.g. alphabetize CSS property declarations). \nBut don’t get bogged down fighting pointless wars over tabs versus \nspaces. The most important thing is to end up with consistently \nwritten code, not to achieve theoretical perfection!\nAutomating code style\nTo enforce your code standards and achieve consistency in your \nsystem, help your contributors write code that follows the rules \nthrough linting and tooling.\nPRO TIP — Front-end guidelines questionnaire\nUnsure where to start making decisions about your technical \napproach? Brad Frost has written a handy Frontend \nGuidelines  Questionnaire to guide you.\nPRO TIP — A starting point for code style\nStart with an open source code style guide—I prefer Airbnb’s \n“Mostly Reasonable” rules for CSS, JavaScript, and React— \nthen modify it to fit your needs.",
      "metadata": {
        "startIndex": 3075,
        "endIndex": 4037,
        "chunkIndex": 4,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 64
      }
    },
    {
      "id": "chunk-65",
      "text": "u.\nPRO TIP — A starting point for code style\nStart with an open source code style guide—I prefer Airbnb’s \n“Mostly Reasonable” rules for CSS, JavaScript, and React— \nthen modify it to fit your needs. Be sure to include your team’s \ncode style rules in your design system’s documentation.\n\n5512ChapterC 20Ct.Ipnoddu\nLinting is an automated process of analyzing code and raising \nerrors when code either doesn’t adhere to your syntax rules or \nis broken, buggy, or malformed. Linting tools such as CSSLint \nor StyleLint for CSS, and JSHint or ESLint for JavaScript, can be \nrun manually as part of your local development process, as an \nautomated pre-commit hook before code is checked into source \ncontrol (the best option), or run as part of your build process.\nPRO TIP — Automagically pretty\nYou can stop worrying about writing your JavaScript \naccording to code syntax rules entirely by using Prettier to \nautomatically reformat code without changing the underlying \nfunctionality.\nCode editor",
      "metadata": {
        "startIndex": 3837,
        "endIndex": 4833,
        "chunkIndex": 5,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 65
      }
    },
    {
      "id": "chunk-66",
      "text": "can stop worrying about writing your JavaScript \naccording to code syntax rules entirely by using Prettier to \nautomatically reformat code without changing the underlying \nfunctionality.\nCode editor configuration\nAn often-overlooked but important corollary to linting is providing \nan Editor Config to enforce code style in your editor(s) of choice. \nEditorConfig.org (figure 1) provides a cross- platform format to \ndefine stylistic rules for most code editors and IDEs, so you can \nautomatically convert your tabs into spaces—thus ending the tabs \nversus spaces war!\n\n5612ChapterC 20Ct.Ipnoddu\nFigure 1: Example .editorconfig file from EditorConfig.\norg\nSelf-contained\nYour design system should live in a source control repository \nindependent from your main codebase. Although it will require \nmore work to get up and running, a separate repository brings \nmany long-term benefits:\n ÒIt enables versioned releases of your code (more on this \nlater)\n ÒIt allows you to share code across multiple",
      "metadata": {
        "startIndex": 4633,
        "endIndex": 5632,
        "chunkIndex": 6,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 66
      }
    },
    {
      "id": "chunk-67",
      "text": "ore work to get up and running, a separate repository brings \nmany long-term benefits:\n ÒIt enables versioned releases of your code (more on this \nlater)\n ÒIt allows you to share code across multiple teams, products, \nand codebases\n ÒIt forces you to develop components in isolation so they’re \nnot tied to a single use case\n ÒIt provides infrastructure for a robust front-end testing \narchitecture\n ÒIt forms a foundation for a living style guide website\n\n5712ChapterC 20Ct.Ipnoddu\nA standalone design system repository functions as a single \nsource of truth. There is only one place where components \nare defined, which then gets shared into other codebases as a \ndiscrete dependency. Because all usages point back to a canonical \nimplementation, changes in a single place propagate through the \nentire system.\nIdeally, all of the code for each component within your system is \nco-located: CSS, JavaScript, HTML templates, and documentation \nall live in the same place, possibly the same directory.",
      "metadata": {
        "startIndex": 5432,
        "endIndex": 6433,
        "chunkIndex": 7,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 67
      }
    },
    {
      "id": "chunk-68",
      "text": "ire system.\nIdeally, all of the code for each component within your system is \nco-located: CSS, JavaScript, HTML templates, and documentation \nall live in the same place, possibly the same directory. If you’re \nusing React with CSS-in-JS, each component may even be \nencapsulated in a single file. The closer the pieces are to each \nother, the easier it is to trace and manage dependencies between \nbits of code, and the easier it will be to update and maintain.\nReusable\nSuccessful design systems are highly reusable. Bootstrap, the \nmost-used front-end library of all time, powers hundreds (if not \nthousands) of websites because it was architected with reusability \nin mind. Writing components to be reused in multiple contexts \nis vitally important, yet hard to do well— make components too \nfocused for a single use case or too inflexible, and users will end \nup creating their own patterns.\nTo be reusable and scalable, patterns need to be modular, \ncomposable, generic, and flexible.\n ÒModular",
      "metadata": {
        "startIndex": 6233,
        "endIndex": 7234,
        "chunkIndex": 8,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 68
      }
    },
    {
      "id": "chunk-69",
      "text": "ed for a single use case or too inflexible, and users will end \nup creating their own patterns.\nTo be reusable and scalable, patterns need to be modular, \ncomposable, generic, and flexible.\n ÒModular components are self-contained with no \ndependencies\n\n5812ChapterC 20Ct.Ipnoddu\n ÒComposable components can be combined to create new \npatterns\n ÒGeneric components can handle multiple use cases\n ÒFlexible components can be tweaked and extended to \nwork in a variety of contexts\nPRO TIP — Stay DRY\nA fundamental best practice in software development is \nDon’t Repeat Yourself (DRY). When two different pieces of \ncode perform the same function, you double the possibility of \nbugs, unintended side effects, and the amount of time spent \nmaintaining functionality. The goal of your design system \nis to DRY up your development and reduce duplication by \ncreating reusable patterns.\nModular CSS architecture\nReusability and scalability in design systems begin with taking a \nmodular approach to your",
      "metadata": {
        "startIndex": 7034,
        "endIndex": 8031,
        "chunkIndex": 9,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 69
      }
    },
    {
      "id": "chunk-70",
      "text": "to DRY up your development and reduce duplication by \ncreating reusable patterns.\nModular CSS architecture\nReusability and scalability in design systems begin with taking a \nmodular approach to your code architecture. CSS, however, is not \ninherently modular. So over time, systems like SMACSS, OOCSS, \nand BEM have added structure and modularity to CSS. More \nrecently, CSS-in-JS approaches such as Styled Components have \nsolved the problem by defining CSS properties in JavaScript code \nstructures.\nWhether you use one of these systems or roll with your own, the \nfundamentals of any good CSS architecture are the same:\n ÒIt has clear naming conventions for components, variations, \nand utilities\n\n5912ChapterC 20Ct.Ipnoddu\n ÒIt’s tightly-scoped and has low-specificity CSS that limits \nunintentional side effects\n ÒIt has utility classes that allow you to modify styles in a \nmanaged way\n ÒIt has rules for building modular, composable, generic, and \nflexible components\n“The Web is",
      "metadata": {
        "startIndex": 7831,
        "endIndex": 8819,
        "chunkIndex": 10,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 70
      }
    },
    {
      "id": "chunk-71",
      "text": "s \nunintentional side effects\n ÒIt has utility classes that allow you to modify styles in a \nmanaged way\n ÒIt has rules for building modular, composable, generic, and \nflexible components\n“The Web is fundamentally designed to work for all people, \nwhatever their hardware, software, language, culture, \nlocation, or physical or mental ability. When the Web meets \nthis goal, it is accessible to people with a diverse range of \nhearing, movement, sight, and cognitive ability.”\nWEB ACCESSIBILITY INITIATIVE ( WAI)\nW3C\nTo learn more about architecting CSS so that it meets these \ncriteria, I highly recommend Harry Roberts’ https://CSSguidelin.es/ \nthen adding this type of documentation to your system.\nPRO TIP — Namespacing\nWorking with legacy code? Choose a unique, short, and simple \nnamespace to prefix your classes, e.g. `.ds-[component \nname]`. This will avoid class collisions when mixing multiple \nlibraries on a page, and ensure you know that your `.ds-btn` \nclass is different from the",
      "metadata": {
        "startIndex": 8619,
        "endIndex": 9614,
        "chunkIndex": 11,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 71
      }
    },
    {
      "id": "chunk-72",
      "text": "to prefix your classes, e.g. `.ds-[component \nname]`. This will avoid class collisions when mixing multiple \nlibraries on a page, and ensure you know that your `.ds-btn` \nclass is different from the `.btn` class from Bootstrap.\n\n6012ChapterC 20Ct.Ipnoddu\nAccessible\nFor too long, accessibility, or a11y, has been misunderstood \nas building sites for a small group of users of assistive \ntechnology—a blind person using a screen reader—and far \ntoo often dismissed as too complex, too time-consuming, \nor “not our customers.” Accessibility, however, is not just \nfor a single, small group, but for an estimated 15% of people \nworldwide—56.7 million people in America alone—with a wide \nspectrum of permanent or temporary visual, auditory, motor, \nand cognitive impairments.\n[Accessibility testing] gives developers a  \nstarting point to say ‘here are some errors \nthat I have tangible ways to go fix now.\nAlicia SEDLOCK — Front-End Engineer  \n& Accessibility Advocate\nThankfully these attitudes are",
      "metadata": {
        "startIndex": 9414,
        "endIndex": 10413,
        "chunkIndex": 12,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 72
      }
    },
    {
      "id": "chunk-73",
      "text": "ives developers a  \nstarting point to say ‘here are some errors \nthat I have tangible ways to go fix now.\nAlicia SEDLOCK — Front-End Engineer  \n& Accessibility Advocate\nThankfully these attitudes are changing and our industry is \nembracing a more inclusive definition of accessibility. Making your \nsite accessible to users with disabilities improves the experience \nfor everyone who visits your site. If that isn’t enough motivation, \nimproving your site’s accessibility can help improve SEO, and it’s \nbecoming increasingly more important from a legal standpoint to \navoid costly lawsuits.\nIn a landmark case against the grocery chain Winn-Dixie, a federal \njudge ruled that websites are subject to the provisions of the \nAmericans with Disabilities Act (ADA). If you’re just learning about \naccessibility, there are a lot of resources to help you get started.  \n\n6112ChapterC 20Ct.Ipnoddu\nI recommend reading the introductory articles from the W3C’s Web \nAccessibility Initiative (WAI) WebAIM, and",
      "metadata": {
        "startIndex": 10213,
        "endIndex": 11214,
        "chunkIndex": 13,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 73
      }
    },
    {
      "id": "chunk-74",
      "text": "bility, there are a lot of resources to help you get started.  \n\n6112ChapterC 20Ct.Ipnoddu\nI recommend reading the introductory articles from the W3C’s Web \nAccessibility Initiative (WAI) WebAIM, and the A11y Project. You \ncan inspect the current state of your site using Tota11y, an a11y \nvisualizer bookmarklet by Khan Academy. Starting an accessibility \npractice where none has existed before can be challenging, but \nwhen you leverage your design system, it’s easier than you might \nthink.\nEnforce a11y with your design system\nTo ensure everyone at your organization builds accessible sites, \nfeatures, and apps, enforce accessibility best practices in your \ndesign system code.\n ÒTest your color usage against established color contrast \nguidelines (figure 2).\n ÒBuild components to be keyboard and screen reader \naccessible by default. The Ebay Accessibility MIND  \npattern library is an amazing, thorough resource to help \nguide development of accessible components and best \npractices.",
      "metadata": {
        "startIndex": 11014,
        "endIndex": 12008,
        "chunkIndex": 14,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 74
      }
    },
    {
      "id": "chunk-75",
      "text": "board and screen reader \naccessible by default. The Ebay Accessibility MIND  \npattern library is an amazing, thorough resource to help \nguide development of accessible components and best \npractices. Encourage contributors to build according to \nthese guidelines and test their code using keyboard-only \nnavigation and assistive technology devices like screen \nreaders.\n ÒInclude in your documentation code standards and \nguidelines for common a11y best practices such as using \nlarger, legible text sizes, always associating a form field with \na label, and properly adding alt text attributes to images, \nto name a few. Salesforce’s Lightning design  system \nand Shopify’s Polaris are great examples of accessibility \nguidelines in practice.\n\n6212ChapterC 20Ct.Ipnoddu\nJesse Bennett-Chamberlain Shopify\nListen Online \nImplementing And Rolling Out Polaris\nThese accessible practices improve usability for everyone by \nmaking it easier to view, interact with, and navigate a site, improving \nform",
      "metadata": {
        "startIndex": 11808,
        "endIndex": 12804,
        "chunkIndex": 15,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 75
      }
    },
    {
      "id": "chunk-76",
      "text": "Shopify\nListen Online \nImplementing And Rolling Out Polaris\nThese accessible practices improve usability for everyone by \nmaking it easier to view, interact with, and navigate a site, improving \nform completion rates and reducing user mistakes.\nFigure 2: Eight Shapes Contrast Grid allows you to test \ncolor combinations for compliance with color contrast \nguidelines.\nUse the power of your single source of truth to create a foundation \nfor accessibility, thus relieving some of the burdens from product \nteams. It’s much easier to build in accessibility from the start than \nto bolt it on after a feature has been designed and built.\n\n6312ChapterC 20Ct.Ipnoddu\nNate Whitson, LinkedIn \nListen Online: Accessibility\nRobust\nA robust design system has a strong foundation of tests behind \nit. Testing provides confidence in your code, which facilitates \nadoption. Users will know that they can upgrade or change their \nUI without it breaking in unexpected ways.\nAdditionally, your design system is",
      "metadata": {
        "startIndex": 12604,
        "endIndex": 13600,
        "chunkIndex": 16,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 76
      }
    },
    {
      "id": "chunk-77",
      "text": "ng provides confidence in your code, which facilitates \nadoption. Users will know that they can upgrade or change their \nUI without it breaking in unexpected ways.\nAdditionally, your design system is uniquely positioned to form a \nfoundation for robustly testing your front-end code.\nI like to think about it almost like...there’s an  \nimplicit contract that this is always going to \nwork.\nAlicia SEDLOCK — Front-End Engineer  \n& Accessibility Advocate\n\n6412ChapterC 20Ct.Ipnoddu\nTest your design system instead \nof your complicated UI\nKeeping tests up to date for pages, applications, and features—\nespecially on a rapidly changing site or one with heavy \nexperimentation—requires a lot of work. Tests get out of date \nquickly! You can narrow the scope of your tests and gain higher \nlevels of confidence in your site-wide front-end code by heavily \ntesting your design system components. You already need to \ngenerate example code for the different states of each component \nfor your",
      "metadata": {
        "startIndex": 13400,
        "endIndex": 14386,
        "chunkIndex": 17,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 77
      }
    },
    {
      "id": "chunk-78",
      "text": "evels of confidence in your site-wide front-end code by heavily \ntesting your design system components. You already need to \ngenerate example code for the different states of each component \nfor your documentation—use those as your test fixtures.\nTypes of tests\nThere are 4 types of tests used for ensuring stability in your design \nsystem:\n ÒUnit testing: These tests verify that small units of \ncode (usually individual JavaScript functions) behave \nas expected. Unit tests execute functions with a set \nof predefined inputs, then verify that they return the \nexpected output. Some popular frameworks to use are \nMocha, Jasmine, and Jest.\n ÒFunctional testing: In functional tests, examples of your \ncode, or “fixtures” are run in a virtual “headless” browser, \nthen tested by performing simulated user actions, and \nchecking the new state of the browser for the expected \nresult of those actions. Functional testing frameworks \ninclude Nightwatch, Protractor, and Casper.\n ÒVisual regression",
      "metadata": {
        "startIndex": 14186,
        "endIndex": 15181,
        "chunkIndex": 18,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 78
      }
    },
    {
      "id": "chunk-79",
      "text": "ated user actions, and \nchecking the new state of the browser for the expected \nresult of those actions. Functional testing frameworks \ninclude Nightwatch, Protractor, and Casper.\n ÒVisual regression testing: These tests help catch \nunintended visual changes to component styles. The \ntest framework takes screenshots of your fixtures both \n\n6512ChapterC 20Ct.Ipnoddu\nbefore and after the changes, then compares them using \nan algorithm to detect visual differences. There are open \nsource frameworks like Wraith, Gemini, and BackstopJS, \nas well as paid services like Applitools and Percy.io. Go \nto Kevin Lamping’s excellent resource Visual Regression \nTesting for more information and options.\n ÒAutomated accessibility testing: Leverage tooling to \nensure that your components are accessible. Some options \nfor running automated a11y audits are Paypal’s AATT and \na11y by Addy Osmani, and aXe by Deque Systems.\nJesse Bennett-Chamberlain, Shopify\nListen online: \nChallenges Implementing Polaris",
      "metadata": {
        "startIndex": 14981,
        "endIndex": 15980,
        "chunkIndex": 19,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 79
      }
    },
    {
      "id": "chunk-80",
      "text": "me options \nfor running automated a11y audits are Paypal’s AATT and \na11y by Addy Osmani, and aXe by Deque Systems.\nJesse Bennett-Chamberlain, Shopify\nListen online: \nChallenges Implementing Polaris\n\n6612ChapterC 20Ct.Ipnoddu\nCommon challenges\nNo system is ever perfect. You will make decisions that you later \nregret, no matter how much time you put into designing your \ndesign system. You can, however, anticipate issues that arise as \nyour system grows, and work to avoid or mitigate their effect on \nyour project. There are 3 common challenges I’ve seen arise in \nmultiple design systems:\n ÒKeeping documentation up-to-date with your system code\n ÒHandling breaking changes\n ÒAvoiding performance degradations\n ÒLet’s look at each of these concerns in detail.\nMaintaining documentation\nThe first time I built a front-end component library, my team \ndecided it would be easier to create a documentation website \nwith a codebase separate from our application.",
      "metadata": {
        "startIndex": 15780,
        "endIndex": 16742,
        "chunkIndex": 20,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 80
      }
    },
    {
      "id": "chunk-81",
      "text": ".\nMaintaining documentation\nThe first time I built a front-end component library, my team \ndecided it would be easier to create a documentation website \nwith a codebase separate from our application. In hindsight, \nthis decision broke the cardinal rule of Don’t Repeat Yourself. \nWhenever a component changed in our main codebase, we had \nto remember to actually update the documentation, then do \nthe tedious work of duplicating the changed code in 2 different \ncodebases. Unsurprisingly, our documentation got out of date \nalmost immediately!\nLearn from our mistakes by reducing the distance between your \ndocumentation and code and using automation.\n\n6712ChapterC 20Ct.Ipnoddu\nMinimize separation between library \ncode and documentation code\nEarlier in the chapter, we discussed storing your design system \ncode in a separate repository that functions as your single source \nof truth. When documentation and code are co-located, it’s more \nlikely that you’ll remember to update the documentation",
      "metadata": {
        "startIndex": 16542,
        "endIndex": 17541,
        "chunkIndex": 21,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 81
      }
    },
    {
      "id": "chunk-82",
      "text": "gn system \ncode in a separate repository that functions as your single source \nof truth. When documentation and code are co-located, it’s more \nlikely that you’ll remember to update the documentation when a \ncomponent changes. Consider adding a pre-commit hook to your \ndesign system repository to warn contributors when their code \nadjustments don’t also contain updated documentation files.\nFigure 3: IBM’s Carbon design system co-locates each \ncomponent’s CSS, JavaScript, documentation, and \nexample HTML, which functions as both documentation \nexamples and test fixtures.\nAutomate  documentation\nStart by documenting your system using simple, human- readable \nfiles written in markdown, co-located with each component. \nGithub is already configured to render and display any file named \n\n6812ChapterC 20Ct.Ipnoddu\nREADME.md when you’re viewing a folder’s contents—you might \nnot need a flashy website at all!\nIf and when you do decide to create a full-featured documentation \nwebsite, use",
      "metadata": {
        "startIndex": 17341,
        "endIndex": 18335,
        "chunkIndex": 22,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 82
      }
    },
    {
      "id": "chunk-83",
      "text": "812ChapterC 20Ct.Ipnoddu\nREADME.md when you’re viewing a folder’s contents—you might \nnot need a flashy website at all!\nIf and when you do decide to create a full-featured documentation \nwebsite, use automation to simplify the process. Instead of creating \na new codebase for a separate website, use a tool that will auto-\ngenerate documentation for you—there are lots to choose from—\nreducing the amount of structural HTML you need to write and \nmaintain.\nPRO TIP — Cupper\nHeydon Pickering of the Paciello Group has open-sourced \nCupper, a documentation builder that creates fully accessible \ndocumentation. It’s a progressive web application (PWA) \nunder the hood, so you can save and view content offline on \nsupported devices.\nPRO TIP — Reducing Your CSS Payload\nConsider running automated process to help reduce your \nCSS payload, then use that information to decide which \ncomponents belong in your core file.",
      "metadata": {
        "startIndex": 18135,
        "endIndex": 19051,
        "chunkIndex": 23,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 83
      }
    },
    {
      "id": "chunk-84",
      "text": "orted devices.\nPRO TIP — Reducing Your CSS Payload\nConsider running automated process to help reduce your \nCSS payload, then use that information to decide which \ncomponents belong in your core file. UnCSS (https://dbtr.co/\nunCSS) removes unused selectors from your CSS and outputs \na new, reduced file. Another approach is to automatically \ndetermine the CSS necessary to render critical, above the \nfold content, and embed that in the head of your page to \nimprove render speed. Addy Osmani has compiled a helpful \nlist of Critical path CSS tools (https://dbtr.co/critical-CSS).\n\n6912ChapterC 20Ct.Ipnoddu\nFigure 4: The Cupper pattern library builder \ngenerates fully accessible documentation \nwebsites (formerly called Infusion Pattern \nLibrary Builder).\nHandling change\nAs adoption grows and your design system becomes more widely \nused, you will invariably realize that you didn’t get it all right the \nfirst time, and you will need a plan to handle breaking changes.",
      "metadata": {
        "startIndex": 18851,
        "endIndex": 19824,
        "chunkIndex": 24,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 84
      }
    },
    {
      "id": "chunk-85",
      "text": "As adoption grows and your design system becomes more widely \nused, you will invariably realize that you didn’t get it all right the \nfirst time, and you will need a plan to handle breaking changes. \nA breaking change is a situation where necessary changes to a \ncomponent’s code will break existing usages of that component \nor class. The Morningstar design system provides guidance \nto contributors on what is considered a breaking change. If \nmishandled, breaking changes can be a major pain point for your \nusers.\n\n7012ChapterC 20Ct.Ipnoddu\nThe wrong way: duplication\nInitially, all of the CSS and JavaScript for Etsy’s Web Toolkit lived \nin the same monorepo with the rest of the team’s site code. This \nmeant that whenever someone made a breaking change to a \ncomponent, their commit making the change had to also contain \nfixes and updates for every single usage of that component. At \nfirst, when just a small team built and used the system on a subset \nof pages, finding and making these",
      "metadata": {
        "startIndex": 19624,
        "endIndex": 20622,
        "chunkIndex": 25,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 85
      }
    },
    {
      "id": "chunk-86",
      "text": "the change had to also contain \nfixes and updates for every single usage of that component. At \nfirst, when just a small team built and used the system on a subset \nof pages, finding and making these changes was relatively easy. \nBut as adoption spread throughout the company, this quickly \nbecame unmanageable.\nIt became such a headache to make major structural changes to \nexisting components that our team at Etsy started to duplicate \nand deprecate—when we refactored our Tab component to make \nit fully accessible, we created a new component named “Tabs2,” \nand deprecated “Tabs” in the hopes that teams would take on the \nwork to upgrade their code. But without clear guidance on how, \nwhy, and a timeline stating when to upgrade, most uses haven’t \nbeen updated to use the new component. This kind of duplication \nis a code maintenance nightmare.\nThe right way: versioning\nBreaking changes are easier to manage if you store your design \nsystem code in its own source control repository.",
      "metadata": {
        "startIndex": 20422,
        "endIndex": 21416,
        "chunkIndex": 26,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 86
      }
    },
    {
      "id": "chunk-87",
      "text": "This kind of duplication \nis a code maintenance nightmare.\nThe right way: versioning\nBreaking changes are easier to manage if you store your design \nsystem code in its own source control repository. This gives you \nthe ability to do versioned releases of your code, which can be \nshared with other projects. Git allows you to tag a commit with \na release version number, and package managers like npm and \nYarn allow you to package up and publish multiple versions of your \ndesign system code.\n\n7112ChapterC 20Ct.Ipnoddu\nFigure 5: Example package.json, the package definition \nfile format for npm.\nWith versioned releases, the adopters that integrate your design \nsystem code can target a specific version as a dependency and \ncontrol when and how upgrades to new versions are handled. \nMake sure to publish release notes detailing changes so other \nteams can learn how upgrades will impact their codebase and \nbetter plan for upgrade work in their project timelines.",
      "metadata": {
        "startIndex": 21216,
        "endIndex": 22186,
        "chunkIndex": 27,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 87
      }
    },
    {
      "id": "chunk-88",
      "text": "ons are handled. \nMake sure to publish release notes detailing changes so other \nteams can learn how upgrades will impact their codebase and \nbetter plan for upgrade work in their project timelines.\n\n7212ChapterC 20Ct.Ipnoddu\nPRO TIP — Using semver\nMany versioned projects use semver, short for semantic \nversioning, to distinguish between types of releases. Semver \nuses 3 integers separated by dots to indicate major.minor. \npatch versions, for example, v1.2.3.\n ÒMajor versions (1.0.0) contain breaking changes from \nprior versions.\n ÒMinor versions (0.1.0) add new functionality that is \nbackward compatible. \n ÒPatches (0.0.1) contain bugfixes for existing functionality \nand are backward compatible. \n ÒSemver adds another layer of confidence that certain \nupgrades should be seamless to users, while others may \nrequire regression testing or code changes.\nAvoiding performance issues\nAs a design system grows over time, generally so does the file size \nof assets sent over the wire on each",
      "metadata": {
        "startIndex": 21986,
        "endIndex": 22983,
        "chunkIndex": 28,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 88
      }
    },
    {
      "id": "chunk-89",
      "text": "rs, while others may \nrequire regression testing or code changes.\nAvoiding performance issues\nAs a design system grows over time, generally so does the file size \nof assets sent over the wire on each page. This can negatively \naffect your site’s page load performance, which in turn negatively \naffects your company’s bottom line. Help the products built on \nyour design system avoid performance issues by taking a mobile-\nfirst approach and build your system with modularity in mind.\n\n7312ChapterC 20Ct.Ipnoddu\nMobile first\nPoor page load performance will have the largest negative effect \non mobile visits. According to statistics from Google and Akamai, \nmore than half of mobile visitors will abandon pages that take \nlonger than 3 seconds to load, yet the majority of mobile sites \ntake longer than 10 seconds to load. As mobile traffic overtakes \ndesktop, speeding up your page’s performance is more important \nthan ever to give you a competitive edge.\nBuild your design system",
      "metadata": {
        "startIndex": 22783,
        "endIndex": 23767,
        "chunkIndex": 29,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 89
      }
    },
    {
      "id": "chunk-90",
      "text": "s \ntake longer than 10 seconds to load. As mobile traffic overtakes \ndesktop, speeding up your page’s performance is more important \nthan ever to give you a competitive edge.\nBuild your design system mobile-first—test early and often on real \ndevices with real hardware and a real network connection so you \ncan understand the experiences of real users.\nFigure 6: WebPageTest performance results for Etsy.\ncom on an iPhone 6 over LTE network.\n\n7412ChapterC 20Ct.Ipnoddu\nLeverage  modularity\nInitially, it made sense to bundle all of the Etsy Web Toolkit \ncomponents and utilities into single files for CSS and JavaScript. \nWhile this is useful for prototyping, it adds unnecessary weight \nto production pages that don’t use all the components. Now, \nwe’re working to avoid performance problems by better using the \nmodularity inherent in the system. To do this, we are:\n ÒDeciding on a set of core components and utilities that are \nmost frequently used.",
      "metadata": {
        "startIndex": 23567,
        "endIndex": 24522,
        "chunkIndex": 30,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 90
      }
    },
    {
      "id": "chunk-91",
      "text": "working to avoid performance problems by better using the \nmodularity inherent in the system. To do this, we are:\n ÒDeciding on a set of core components and utilities that are \nmost frequently used. This base file will be included on all \npages that use the design system and can be cached by \nthe browser across page requests to improve load times.\n ÒEnsuring that all components are fully modular with no \ncross-component dependencies (unless they are explicit \nand managed by the system).\nPackaging and sharing the system’s code so that it can be \nconsumed as individual CSS and JavaScript modules added as \ndependencies only when a component is actually used on the \npage. We use an in-house system to define dependencies in our \nfront-end code. Build your design system modules so they work \nwith the dependency manager that your team uses. Webpack is a \npopular option.\n\n7512ChapterC 20Ct.Ipnoddu\nForward-thinking\nDesign tokens\nFor most of this chapter, I’ve focused on building design systems",
      "metadata": {
        "startIndex": 24322,
        "endIndex": 25323,
        "chunkIndex": 31,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 91
      }
    },
    {
      "id": "chunk-92",
      "text": "h the dependency manager that your team uses. Webpack is a \npopular option.\n\n7512ChapterC 20Ct.Ipnoddu\nForward-thinking\nDesign tokens\nFor most of this chapter, I’ve focused on building design systems \nfor web applications and sites. However, that’s not the full picture. \nModern organizations face unique challenges with their design \nsystems at scale. Today, we build for multiple web and native \nplatforms that need design consistency. Larger organizations \nmay have multiple sub-brands that want the shared support, \nfunctionality, and organization that a design system brings, but \neach needs a different, brand-aligned look and feel. The Salesforce \nUX team introduced a solution to both of these problems: design \ntokens.\nCross-platform  sharing\nDesign tokens are a way to abstract design details like colors, \nfonts, rounded corner radius, etc., into a format that can be \nshared across platforms using Salesforce’s Theo tool.",
      "metadata": {
        "startIndex": 25123,
        "endIndex": 26057,
        "chunkIndex": 32,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 92
      }
    },
    {
      "id": "chunk-93",
      "text": "platform  sharing\nDesign tokens are a way to abstract design details like colors, \nfonts, rounded corner radius, etc., into a format that can be \nshared across platforms using Salesforce’s Theo tool. Instead of \ndefining your main brand color as a SASS $variable in your web \napp, a UIColor in your iOS app, and a textColor in your Android \napp, you define a single design token in a shared JSON file that \ngets compiled into platform-specific code. Decide to change all of \nyour rounded corners from a 3px to 5px border- radius? Change \nthe value once in your tokens file, and it propagates to all of your \napps automagically.\n\n7612ChapterC 20Ct.Ipnoddu\nFigure 7: How design decisions are propagated via \ntokens in design systems.\nMulti-product  theming\nYou can also use tokens to “theme” the same structural styling for \nmultiple brands. One brand wants orange buttons and the other \nwants blue? No problem!",
      "metadata": {
        "startIndex": 25857,
        "endIndex": 26767,
        "chunkIndex": 33,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 93
      }
    },
    {
      "id": "chunk-94",
      "text": "ns in design systems.\nMulti-product  theming\nYou can also use tokens to “theme” the same structural styling for \nmultiple brands. One brand wants orange buttons and the other \nwants blue? No problem! You can define different token values for \neach brand, then combine each to the same, base CSS to output \nthemed versions of your design system. That way, all of the classes \nare the same, and all of the accessible JavaScript functionality you \nworked so hard to build can be used as-is with no modification for \neach brand.\n\n7712ChapterC 20Ct.Ipnoddu\nConclusion\nSystematizing your front-end code benefits everyone in your \norganization: developers move faster, designers don’t have to \nreinvent the wheel, and ultimately, your users have a better \nexperience. But starting out can feel overwhelming!\nThankfully, there is a wealth of resources and a growing community \nof folks sharing their own best practices to help you build your \nsystem.",
      "metadata": {
        "startIndex": 26567,
        "endIndex": 27510,
        "chunkIndex": 34,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 94
      }
    },
    {
      "id": "chunk-95",
      "text": "tter \nexperience. But starting out can feel overwhelming!\nThankfully, there is a wealth of resources and a growing community \nof folks sharing their own best practices to help you build your \nsystem. Anna Debenham’s “Styleguide Resources” lists nearly \n500 public design systems/style guides/pattern libraries to use as \ninspiration. While they look and feel very different, each shares \na common goal and is built upon foundational principles that our \nindustry has developed through many years of trial-and-error.\nA flexible, maintainable, stable, scalable, and successful design \nsystem begins with a strong foundation that goes beyond \nframeworks or tooling. If I’ve learned anything in my career, it’s that \nthe only constant in front-end development is change. Chances \nare, within a few years, the technology driving your front-end will \nlook very different than it does right now. If you build for the long-\nterm and plan to handle change, then you can implement new, \nbetter practices as",
      "metadata": {
        "startIndex": 27310,
        "endIndex": 28307,
        "chunkIndex": 35,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 95
      }
    },
    {
      "id": "chunk-96",
      "text": "rs, the technology driving your front-end will \nlook very different than it does right now. If you build for the long-\nterm and plan to handle change, then you can implement new, \nbetter practices as your system grows.\nThat’s not to say you should aim to create another Bootstrap \nright out of the gate. Even if your team can only implement a \nfew of the best practices we’ve discussed in this chapter, it’s still \nworthwhile—some of the techniques I recommend haven’t yet \nbeen implemented in the design system that I work on every day! \nDesign systems are not a one-and-done thing, but a continual \nprocess of iteration and change as we make mistakes, learn from \neach other, and create new and better approaches to front-end \ncode.\n\n7812ChapterC 20Ct.Ipnoddu\nFurther reading",
      "metadata": {
        "startIndex": 28107,
        "endIndex": 29107,
        "chunkIndex": 36,
        "section": "06. Design Systems are for People by Jina Anne",
        "globalChunkIndex": 96
      }
    },
    {
      "id": "chunk-97",
      "text": "Chapter — 04\nPutting your design \nsystem into practice\nBetter together\nBy Diane Mounter\n\n8012ChapterC 20Ct.Ipnoddu\nHow you develop your design system will influence how you share \nand encourage adoption of the system. Broadly speaking, there \nare 2 general approaches to developing and rolling out a new \ndesign system: incremental and large-scale redesigns.\nIn this chapter, we’ll walk through the 2 approaches, highlight the \npros and cons of each, and discuss adoption strategies.\nLarge-scale  redesign\nWhen a team takes this approach, it often means they spend \nmore time designing the system before rolling it out everywhere, \nincluding doing a visual refresh or consolidation of components. \nThis allows the team to develop a fuller system—from the primitive \nlayer of colors and typography to components, page layouts, and \ninteraction flows.\nSome teams approach their new system by creating imaginary \nproducts to help them step away from the constraints of working \nwithin a real",
      "metadata": {
        "startIndex": 0,
        "endIndex": 989,
        "chunkIndex": 0,
        "section": "11. Tokens in Design Systems",
        "globalChunkIndex": 97
      }
    },
    {
      "id": "chunk-98",
      "text": "ography to components, page layouts, and \ninteraction flows.\nSome teams approach their new system by creating imaginary \nproducts to help them step away from the constraints of working \nwithin a real application. Other teams design their new system \nalongside the redesign of a real product or feature.\nTesting with pilot projects\nAt Etsy, I worked with a team of designers and engineers on the \nredesign of seller tools. This project provided a great opportunity \nto test a new approach to our CSS and refresh our visual styles. \nWe built a new style guide alongside the seller tools redesign that \ndocumented implementation and design guidelines.\nThis became a pilot project for testing the new design system. \nRebuilding a real part of the product gave us a great playground for \ntesting new components, responsive layouts, and new typography \nstyles.\n\n8112ChapterC 20Ct.Ipnoddu\n“In From Design Systems: Pilots & Scorecards,” Dan Mall writes \nabout the criteria he uses to find good candidates for",
      "metadata": {
        "startIndex": 789,
        "endIndex": 1790,
        "chunkIndex": 1,
        "section": "11. Tokens in Design Systems",
        "globalChunkIndex": 98
      }
    },
    {
      "id": "chunk-99",
      "text": "ents, responsive layouts, and new typography \nstyles.\n\n8112ChapterC 20Ct.Ipnoddu\n“In From Design Systems: Pilots & Scorecards,” Dan Mall writes \nabout the criteria he uses to find good candidates for design \nsystems pilot projects. Though our approach at Etsy was more \nopportunistic, many of the attributes Mall lists happened to match \nthe seller tools project:",
      "metadata": {
        "startIndex": 1590,
        "endIndex": 2590,
        "chunkIndex": 2,
        "section": "11. Tokens in Design Systems",
        "globalChunkIndex": 99
      }
    },
    {
      "id": "chunk-100",
      "text": "many components that can be reused in other products?",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "01. Potential for common components. Does this pilot have",
        "globalChunkIndex": 100
      }
    },
    {
      "id": "chunk-101",
      "text": "patterns that can be reused in other products?",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "02. Potential for common patterns. Does this pilot have many",
        "globalChunkIndex": 101
      }
    },
    {
      "id": "chunk-102",
      "text": "component or pattern with high business value at the \nheart of this project? We’re talking about elements that are \nintegral to a flow or audience with unusually high value for \nthe organization.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "03. High-value elements. Even if uncommon, is there a",
        "globalChunkIndex": 102
      }
    },
    {
      "id": "chunk-103",
      "text": "implementation of the design system? Is a large refactor \nrequired?",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "04. Technical feasibility. How simple is a technical",
        "globalChunkIndex": 103
      }
    },
    {
      "id": "chunk-104",
      "text": "see it through and celebrate/evangelize using the design \nsystem (and even contribute to it)?",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "05. Available champion. Will someone working on this product",
        "globalChunkIndex": 104
      }
    },
    {
      "id": "chunk-105",
      "text": "of [3–4 weeks] (insert your timing here)?",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "06. Scope. Is this work accomplishable in our pilot timeframe",
        "globalChunkIndex": 105
      }
    },
    {
      "id": "chunk-106",
      "text": "from other legacy design and code that there are clear \nstart and end points?",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "07. Technical independence. Is the work decoupled enough",
        "globalChunkIndex": 106
      }
    },
    {
      "id": "chunk-107",
      "text": "design system?\n\n8212ChapterC 20Ct.Ipnoddu\n“We don’t really have one team doing all the work...pretty \nmuch every designer and engineer in our organization is a \npart of the system.” https://dbtr.co/twitter-horizon\nTina Koyoma  \nTwitter\nThere was one downside to building the new design system \nalongside a product—it ended up being biased to the needs of \nthat product. Afterward, it needed further development to work for \nthe whole Etsy application. Working in a silo with minimal outside \nfeedback allowed us to make progress quickly, but meant that we \nhad to work harder to encourage other teams to adopt the design \nsystem.\nShowing value through a \nsandbox environment\nWhile working on the new Etsy style guide, we set up a simple \nsandbox environment that allowed us to quickly prototype HTML/\nCSS mockups. As we prepared to share the new style guide with \nother designers, we realized the sandbox could be helpful with \nadoption.\nOne of our goals was to reduce the time designers and",
      "metadata": {
        "startIndex": 0,
        "endIndex": 992,
        "chunkIndex": 0,
        "section": "08. Marketing potential. Will this work excite others to use the",
        "globalChunkIndex": 107
      }
    },
    {
      "id": "chunk-108",
      "text": "pe HTML/\nCSS mockups. As we prepared to share the new style guide with \nother designers, we realized the sandbox could be helpful with \nadoption.\nOne of our goals was to reduce the time designers and developers \nhad to spend writing CSS, so they could spend more time iterating \non designs. The new approach we took with CSS, combined \nwith the sandbox environment, made prototyping designs in the \nbrowser fast and easy.\nThe best way for people to see value is to experience it.\n\n8312ChapterC 20Ct.Ipnoddu\nWe set everyone up with sandboxes for training. This approach \nempowered people to prototype and experiment with the style \nguide using the sandbox, revealing value through hands-on use.\nTo set people up for success, we wrote tutorials teaching them \nhow to apply different styles—such as atomic vs. component \nclasses, build mobile-first responsive layouts, and create complex \nviews such as a search results page—without writing CSS.",
      "metadata": {
        "startIndex": 792,
        "endIndex": 1735,
        "chunkIndex": 1,
        "section": "08. Marketing potential. Will this work excite others to use the",
        "globalChunkIndex": 108
      }
    },
    {
      "id": "chunk-109",
      "text": "teaching them \nhow to apply different styles—such as atomic vs. component \nclasses, build mobile-first responsive layouts, and create complex \nviews such as a search results page—without writing CSS. To help \npeople understand the why behind our decisions, we included \na presentation on our design principles with example scenarios, \ncode samples, and live coding demos.\nThe sandbox’s CSS environment mirrored production, so a \ndesigner’s prototypes easily translated to a developer’s production \nwork, avoiding costly and unnecessary new CSS. Since code \nprototypes are written in the same language, they gave developers \na better sense of the intent than a static mockup. Developers didn’t \nhave to translate like they do with comps from design tools. This \nfurther helped with adoption. A design system that both designers \nand developers love has a greater chance of success.\nDocumentation is key\nAnother key to adoption is up-to-date documentation.",
      "metadata": {
        "startIndex": 1535,
        "endIndex": 2490,
        "chunkIndex": 2,
        "section": "08. Marketing potential. Will this work excite others to use the",
        "globalChunkIndex": 109
      }
    },
    {
      "id": "chunk-110",
      "text": "This \nfurther helped with adoption. A design system that both designers \nand developers love has a greater chance of success.\nDocumentation is key\nAnother key to adoption is up-to-date documentation. As design \nsystems peers say, “If it’s not documented, it doesn’t exist.”\nWhen styles go undocumented you run the risk of people writing \nnew but duplicate code. Documentation becomes more important \nwhen introducing a new design system because old patterns \ncan outweigh new ones. Documentation helps promote those \nnew patterns, reduce the need to write new code, and makes \nimplementation easy with code examples and guidelines.\n\n8412ChapterC 20Ct.Ipnoddu\nOutdated documentation can cause damage too since it can lead \npeople down the wrong path and cause frustration. It’s worth \ninvesting time in developing practices that help you keep updated \ndocumentation.\nFind opportunities to check documentation accuracy—such \nas before and after an onboarding session, or as you add new \nstyles.",
      "metadata": {
        "startIndex": 2290,
        "endIndex": 3283,
        "chunkIndex": 3,
        "section": "08. Marketing potential. Will this work excite others to use the",
        "globalChunkIndex": 110
      }
    },
    {
      "id": "chunk-111",
      "text": "time in developing practices that help you keep updated \ndocumentation.\nFind opportunities to check documentation accuracy—such \nas before and after an onboarding session, or as you add new \nstyles. Writing docs on the fly helps you test your code and avoid \nbuilding documentation debt. If you can, add tests that check \ndocumentation when patterns are added and updated, and try to \nmake it easy for people to report inaccuracies.\nPRO TIP — Documenting styles\nDocument styles as you add them. It’s easier to do when \nyou’re writing the code while it’s fresh in your mind than \nwaiting to do it later.\nAt Etsy, some engineering teams created onboarding projects for \nnew engineers. This usually involved building a small feature from \nthe backlog that would help them get familiar with the engineering \nstack. I was stoked to see them implementing UI layouts without \nhelp from designers, just by following style guide documentation.\nPost-rollout  follow-up\nDesign systems are never done.",
      "metadata": {
        "startIndex": 3083,
        "endIndex": 4074,
        "chunkIndex": 4,
        "section": "08. Marketing potential. Will this work excite others to use the",
        "globalChunkIndex": 111
      }
    },
    {
      "id": "chunk-112",
      "text": "engineering \nstack. I was stoked to see them implementing UI layouts without \nhelp from designers, just by following style guide documentation.\nPost-rollout  follow-up\nDesign systems are never done. The launch of your new system \nshould be thought of as version 1.0, with many iterations will follow.\nWhether you form a full-time team to evolve and maintain your \nsystem or not, you likely have a few groups of people interacting \nwith it—makers of the system, users of the system, and users who \nalso contribute to the system. Whatever form your team takes, \n\n8512ChapterC 20Ct.Ipnoddu\nmakers need to stay in touch with the needs of users and the \norganization.\nA few months after rolling out the new design system at Etsy, we \nran working sessions with staff from a cross-section of teams. \nOur goal was to learn how to improve the experience for people \nusing and contributing to the system, how successful we’d been \nwith promoting the system, and where it was lacking.",
      "metadata": {
        "startIndex": 3874,
        "endIndex": 4849,
        "chunkIndex": 5,
        "section": "08. Marketing potential. Will this work excite others to use the",
        "globalChunkIndex": 112
      }
    },
    {
      "id": "chunk-113",
      "text": "section of teams. \nOur goal was to learn how to improve the experience for people \nusing and contributing to the system, how successful we’d been \nwith promoting the system, and where it was lacking. We took \na qualitative research approach so that we could be open to \ndiscovering things we didn’t realize were problems—this meant \na lot of face-to-face discussions with light agenda’s to stimulate \nconversation.\n“Clients, colleagues, and stakeholders should embrace the \npliable nature of the digital world to create living design \nsystems that adapt to the ever-shifting nature of the medium, \nuser needs, and the needs of the business.” \n(https://dbtr.co/frost).\nBrad Frost \nAuthor, Atomic Design\nPRO TIP — In-person feedback\nMake time for in-person feedback sessions with internal \nstakeholders, it will expose you to insights that might \notherwise never be uncovered.\n\n8612ChapterC 20Ct.Ipnoddu",
      "metadata": {
        "startIndex": 4649,
        "endIndex": 5649,
        "chunkIndex": 6,
        "section": "08. Marketing potential. Will this work excite others to use the",
        "globalChunkIndex": 113
      }
    },
    {
      "id": "chunk-114",
      "text": ", it will expose you to insights that might \notherwise never be uncovered.\n\n8612ChapterC 20Ct.Ipnoddu",
      "metadata": {
        "startIndex": 5449,
        "endIndex": 6449,
        "chunkIndex": 7,
        "section": "08. Marketing potential. Will this work excite others to use the",
        "globalChunkIndex": 114
      }
    },
    {
      "id": "chunk-115",
      "text": "We ran a user-journey mapping workshop with first-time \ncontributors to understand their experience. We suspected people \nhad mixed experiences—some seemed to struggle or give up on \ntheir contribution entirely, and some had taken a really long time \nto add their new pattern.\nFindings: We discovered how deflating the experience could be \neven when the contribution was successful. This led us to develop \na more collaborative pairing approach and take an encouraging \nmindset toward code review for first-time contributors.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "CONTRIBUTORS",
        "globalChunkIndex": 115
      }
    },
    {
      "id": "chunk-116",
      "text": "We met with early adopters on product teams with a particular \nfocus on understanding the engineering perspective. Most \nengineers hadn’t taken part in training sessions and had learned \nto use the new design system by reading the style guide.\nFindings: We learned a lot about out holes in our documentation. \nFor example, tutorials didn’t lend themselves well to engineers, \nutilities were useful but buried, and people felt concerned \nabout how to use styles safely in experiments. This led us to \nreorganize and elevate important information up-front, improve \nsearch and navigation, add tutorials that appealed more to \nengineers, and provide more clarity on style usage.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "ENGINEERING EARLY ADOPTERS",
        "globalChunkIndex": 116
      }
    },
    {
      "id": "chunk-117",
      "text": "We ran a session with product managers to walk through the \nnew system and discuss the impact of refactoring and building \nresponsive layouts as part of feature development. Building a \n\n8712ChapterC 20Ct.Ipnoddu\ndesign system that was responsive by default was a core goal—\nand new for many parts of the Etsy web application.\nFindings: We learned that most product managers trusted their \nengineering managers to guide them with impact on scope—this \nconfirmed communication with engineers was a priority. PMs \nunderstood there might be extra work initially, but moving to the \nnew design system would make front-end implementation easier \nin the future. We showed them they could scope work and make \nprogress iteratively.\nCollaboration  creates  \ninvestment  in  adoption\nIt might not be logistically possible to involve your entire company \nin design systems decisions, but some level of collaboration is \nworthwhile.\nBefore Etsy formed a dedicated design systems team, a working \ngroup made of a",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1001,
        "chunkIndex": 0,
        "section": "PRODUCT MANAGERS",
        "globalChunkIndex": 117
      }
    },
    {
      "id": "chunk-118",
      "text": "ly possible to involve your entire company \nin design systems decisions, but some level of collaboration is \nworthwhile.\nBefore Etsy formed a dedicated design systems team, a working \ngroup made of a cross-section of designers drove the evolution of \nthe system. This group met regularly to plan and prioritize projects, \nshare work, and get feedback.\nGroup members collaborated with engineers and specialists where \nneeded, in situations like running experiments on high converting \npages and measuring performance.\nThese collaborations spread adoption even further and resulted in \ndesign system champions across the company. People who spent \ntime contributing to the system were invested in it and promoted \nit to others. Working in a silo had helped us for the short term, but \nextending contributions to outside the team set us up for success \nin the long term.\n\n8812ChapterC 20Ct.Ipnoddu\nNate Whitson, LinkedIn\nListen Online:  \nThe Origin Story of Art Deco\nIncremental rollout\nNot all design",
      "metadata": {
        "startIndex": 801,
        "endIndex": 1800,
        "chunkIndex": 1,
        "section": "PRODUCT MANAGERS",
        "globalChunkIndex": 118
      }
    },
    {
      "id": "chunk-119",
      "text": "butions to outside the team set us up for success \nin the long term.\n\n8812ChapterC 20Ct.Ipnoddu\nNate Whitson, LinkedIn\nListen Online:  \nThe Origin Story of Art Deco\nIncremental rollout\nNot all design systems teams are able to take the time to develop \na fully-fledged system before rolling it out. Many teams have to roll \nout parts of a design system at a time.\nOn the plus side, with an incremental rollout, teams can adopt new \nparts of the system as they become available, which can feel less \ndaunting and disruptive. However, teams will also need to give \nmore thought to communication and promotion of the system. \nWithout a launch, there isn’t a big moment to get everyone’s \nattention. Instead, you need to find and create occasions to \nintroduce people to your design system.\nWhen I joined GitHub and began exploring how the small, then- \npart-time team might turn Primer into a more robust design \nsystem, I knew we weren’t able to go away for a long period of \ntime and develop a complete",
      "metadata": {
        "startIndex": 1600,
        "endIndex": 2601,
        "chunkIndex": 2,
        "section": "PRODUCT MANAGERS",
        "globalChunkIndex": 119
      }
    },
    {
      "id": "chunk-120",
      "text": "itHub and began exploring how the small, then- \npart-time team might turn Primer into a more robust design \nsystem, I knew we weren’t able to go away for a long period of \ntime and develop a complete system. There was a ton of work in \nflight, and no planned re-design or siloed feature we could use as \na pilot project.\nWe needed to figure out the biggest pain points, reduce them to \ntheir smallest part, and roll out Primer updates incrementally.\n\n8912ChapterC 20Ct.Ipnoddu\nSolve problems and win early adopters\nOne of the biggest pain points at GitHub was the amount of time \npeople were spending writing CSS, particularly for things that \nshould have been systematized, such as spacing and typography \nstyles.\nOur solution ended up being the introduction of utilities (single \npurpose classes, often referred to as atomic or functional classes) \nbased on system variables. We weren’t able to start with auditing \ncomponents and page layouts—we had to start small and test the \nfoundation of the",
      "metadata": {
        "startIndex": 2401,
        "endIndex": 3401,
        "chunkIndex": 3,
        "section": "PRODUCT MANAGERS",
        "globalChunkIndex": 120
      }
    },
    {
      "id": "chunk-121",
      "text": "ften referred to as atomic or functional classes) \nbased on system variables. We weren’t able to start with auditing \ncomponents and page layouts—we had to start small and test the \nfoundation of the system before extending to larger parts. Adding \nutilities enabled us to make styles available without refactoring \ntons of UI. Designers and developers could start to use the \nprimitive styles of the system as soon as we rolled them out.\nOnce people discovered they could use utilities instead of write \nnew CSS, Primer started to catch speed. It solved a real problem \nwhile allowing us to test the primitive layers of the system. From \nthere, we could start to replace and update the component layer \nof styles.\nImprove documentation and findability\nLike at Etsy, documentation was key to adoption at GitHub. Tons \nof widely used patterns in the GitHub codebase weren’t in Primer \nand thus weren’t documented.\nWe sorted through piles of custom CSS and created a directory \nin the GitHub codebase",
      "metadata": {
        "startIndex": 3201,
        "endIndex": 4200,
        "chunkIndex": 4,
        "section": "PRODUCT MANAGERS",
        "globalChunkIndex": 121
      }
    },
    {
      "id": "chunk-122",
      "text": "n at GitHub. Tons \nof widely used patterns in the GitHub codebase weren’t in Primer \nand thus weren’t documented.\nWe sorted through piles of custom CSS and created a directory \nin the GitHub codebase that formed a “waiting room” for patterns \nthat should be moved into Primer. We focused a lot of effort on \ngetting as much as possible documented, whether it was in Primer \nor not. We also focused on adding more layers of documentation, \nincluding describing our class naming conventions, accessibility \n\n9012ChapterC 20Ct.Ipnoddu\nprinciples, recommendations for tooling to work with our system, \nhow to run linters, and an overview of our style organization and \npackages.\nJust having styles documented wasn’t enough, though. We needed \nto prioritize the style guide navigation and search for findability.\nFigure 1: GitHub’s Primer, components and behaviors \nfor building things on the Web.\nWe originally modeled the navigation to match our package \norganization—core, product, and",
      "metadata": {
        "startIndex": 4000,
        "endIndex": 4984,
        "chunkIndex": 5,
        "section": "PRODUCT MANAGERS",
        "globalChunkIndex": 122
      }
    },
    {
      "id": "chunk-123",
      "text": "search for findability.\nFigure 1: GitHub’s Primer, components and behaviors \nfor building things on the Web.\nWe originally modeled the navigation to match our package \norganization—core, product, and marketing—prioritizing that \ninformation over the findability of searching for specific styles. \nThe style guide also lacked search and hid styles behind several \nlayers of navigation, forcing multiple clicks before people found \nwhat they were looking for.\nI found myself acting as a human style guide search, with people \npinging me to find what they were looking for rather than finding \nit themselves.\n\n9112ChapterC 20Ct.Ipnoddu\nWith research outlining people’s struggles to find styles, and the \nfact that we were wrestling with an aging web app we originally \nused for the style guide, we decided it was worth the effort to \nrebuild and redesign.\nThe new documentation site listed all our styles in the navigation, \nand we added a contextual search that helped people find \ndocumentation with",
      "metadata": {
        "startIndex": 4784,
        "endIndex": 5783,
        "chunkIndex": 6,
        "section": "PRODUCT MANAGERS",
        "globalChunkIndex": 123
      }
    },
    {
      "id": "chunk-124",
      "text": "ded it was worth the effort to \nrebuild and redesign.\nThe new documentation site listed all our styles in the navigation, \nand we added a contextual search that helped people find \ndocumentation with similar keywords—such as finding “color” \nwithin utilities vs. support variables.\nFigure 2: Primer documentation and search.\nGetting a documentation site set up early on was important. \nLooking back, I don’t think it was the wrong choice to repurpose \nan old web app at first—it may not have been ideal, but it did \nwhat we needed. It is important to re-evaluate the quality of your \ndocumentation site over time though, to ensure it meets user \nneeds, and is scaling with your design system as it grows.\n\n9212ChapterC 20Ct.Ipnoddu\nGrow adoption through many touchpoints\nWhen you don’t have that big moment to launch your design \nsystem, use every opportunity to share its value. You’re building \nsystems to solve real problems and you know what your goals \nare—take some time to share those goals",
      "metadata": {
        "startIndex": 5583,
        "endIndex": 6581,
        "chunkIndex": 7,
        "section": "PRODUCT MANAGERS",
        "globalChunkIndex": 124
      }
    },
    {
      "id": "chunk-125",
      "text": "g moment to launch your design \nsystem, use every opportunity to share its value. You’re building \nsystems to solve real problems and you know what your goals \nare—take some time to share those goals and how you plan to \nreach them. These details are helpful when you’re trying to show \nhow changing something like a few lines of CSS matters.\nAt GitHub, we used lots of small interactions to promote Primer \nand the design systems team. Here are a few ways we made our \npiecemeal approach successful:",
      "metadata": {
        "startIndex": 6381,
        "endIndex": 7381,
        "chunkIndex": 8,
        "section": "PRODUCT MANAGERS",
        "globalChunkIndex": 125
      }
    },
    {
      "id": "chunk-126",
      "text": "We started to jump in and comment on pull requests in the GitHub \napp that touched CSS or design patterns we were trying to improve. \nThis gave us an opportunity to suggest changes in line with the \nnew design system, and point people to our documentation site \nso they knew it existed.\nWe spread the word about our team and our availability to help \nby adding simple comments to pull requests, such as, “Ping the \ndesign systems team,” or, “Find us in the design systems Slack \nchannel.”\nOver time, people started to CC us on issues and pull requests, \nand we took advantage of features like Code Owners so we got \nautomatically requested for review when someone made CSS \nchanges.\n\n9312ChapterC 20Ct.Ipnoddu\nFigure 3: Servbot comments on pull requests to \nrecommend using system variables instead of static \nvalues.\nRecently, we’ve started adding bot scripts that comment on pull \nrequests with simple feedback.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 914,
        "chunkIndex": 0,
        "section": "CREATIVE COMMENTS IN CODE REVIEW",
        "globalChunkIndex": 126
      }
    },
    {
      "id": "chunk-127",
      "text": "re 3: Servbot comments on pull requests to \nrecommend using system variables instead of static \nvalues.\nRecently, we’ve started adding bot scripts that comment on pull \nrequests with simple feedback. With lots of points of communication \nabout our team and Primer, we’re growing awareness and adoption \nof design systems.\nSHOW, DON’T TELL\nWe noticed when teams updated the GitHub UI, they would go \nto another part of the website and literally copy and paste the \nmarkup and CSS. Refactoring away old instances of patterns is \nour best fight against the continued reuse of old patterns. It is \na long-term initiative, but we can prioritize the most popular and \ntroublesome patterns.",
      "metadata": {
        "startIndex": 714,
        "endIndex": 1714,
        "chunkIndex": 1,
        "section": "CREATIVE COMMENTS IN CODE REVIEW",
        "globalChunkIndex": 127
      }
    },
    {
      "id": "chunk-128",
      "text": "Most teams at GitHub have an on-call duty rotation called First \nResponder. It means one or more team members are on call to \ntriage issues, respond to support requests, or provide code review.\nAs support requests grew for design systems, we adopted this \nprocess to help respond to people in a timely manner. Over time, \nwe’ve iterated on the process and created a number of automated \n\n9412ChapterC 20Ct.Ipnoddu\nscripts that help track notification items that need attention. \nResponding to people quickly increases the likelihood that they \nreact positively to our team and recommendations.\nFigure 4: First responders use a hubot script to see \nwhich items need their attention.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "RESPOND QUICKLY TO SUPPORT REQUESTS",
        "globalChunkIndex": 128
      }
    },
    {
      "id": "chunk-129",
      "text": "Particularly early on, we made the simple effort to be available \nvia Slack to answer questions, pair on code, or jump on a call to \nwalk through something. It takes time away from deeper work, but \nallocating time to this is worth it to help win friends and champions \non other teams.\nFigure 5: The GitHub Design Systems team are available \nto help in our slack channel.\n\n9512ChapterC 20Ct.Ipnoddu\nPublishing and  \ndistribution at scale\nMost of my recent experience working on design systems has been \non large-scale web applications like Etsy and GitHub. The scale to \nwhich those systems need to be distributed and published usually \nrequires more complex infrastructure than a small company with a \nsmall system and small team.\nHowever, many companies intend to grow the size of their team \nand scale of their product over time, so understanding how to set \nyour design system up for scalability will benefit you in the future.\nLet’s walk through methods of style organization, distribution, and",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "PRESENCE AND RESPONSIVENESS",
        "globalChunkIndex": 129
      }
    },
    {
      "id": "chunk-130",
      "text": "cale of their product over time, so understanding how to set \nyour design system up for scalability will benefit you in the future.\nLet’s walk through methods of style organization, distribution, and \npublic vs. private documentation and code, to help you consider \nwhat’s right for you and your team.\nPackage management and \norganizing modules\nDesign systems should be built for change, large or small. This \nisn’t just important for how you code your system or use things \nlike variables or design tokens—it’s important for how you organize \nmodules, and version, and distribute them too.\nAt GitHub, we iterated on how we organize and package styles \nmultiple times. Like Etsy, we pulled our design system out of the \nGitHub monorepo into its own repo. We wanted to have more \ncontrol over the changes made and when those changes made it \nback into GitHub.com.\n\n9612ChapterC 20Ct.Ipnoddu\nWe also use Primer for more websites and applications beyond \nGitHub.com.",
      "metadata": {
        "startIndex": 800,
        "endIndex": 1764,
        "chunkIndex": 1,
        "section": "PRESENCE AND RESPONSIVENESS",
        "globalChunkIndex": 130
      }
    },
    {
      "id": "chunk-131",
      "text": "to have more \ncontrol over the changes made and when those changes made it \nback into GitHub.com.\n\n9612ChapterC 20Ct.Ipnoddu\nWe also use Primer for more websites and applications beyond \nGitHub.com. Conference websites like git-merge.com are built \nwith Primer, as well as community websites such as developer. \nGitHub.com and opensourcefriday.com.\nNot all these sites need the full suite of styles we use for GitHub.\ncom, and GitHub.com doesn’t use all the marketing- oriented \nstyles in the core application. This led to taking a modular approach \nwith style organization and influenced how we packaged and \ndistributed Primer.\nNate Whitson, LinkedIn \nListen online:  \nVersioning\nVersioning the entire system \nvs. versioning by module\nVersioning the entire system means everything within the system \nbelongs to just one version number and can only be installed in \nits entirety. This could be likened to browser or software versions.",
      "metadata": {
        "startIndex": 1564,
        "endIndex": 2501,
        "chunkIndex": 2,
        "section": "PRESENCE AND RESPONSIVENESS",
        "globalChunkIndex": 131
      }
    },
    {
      "id": "chunk-132",
      "text": "Versioning the entire system means everything within the system \nbelongs to just one version number and can only be installed in \nits entirety. This could be likened to browser or software versions. \nWhen you update to a new version of Google Chrome or your \nphone’s OS, for instance, you’re updating the whole piece of \nsoftware in one go.\nIf you were to version your design system in the same way, it would \nmean everything within the design system would be updated too.\nFor example, you may have updated your font styles, added a new \nnavigation component, or deprecated an old grid layout. When \na user of your design system chooses to upgrade, they get all \n\n9712ChapterC 20Ct.Ipnoddu\nof those changes together. This still gives teams the flexibility of \nwhen to update the system, but a more granular approach can be \nhelpful as your system scales.\nVersioning individual modules means having a version number \nfor every component or group of styles within the design system.",
      "metadata": {
        "startIndex": 2301,
        "endIndex": 3283,
        "chunkIndex": 3,
        "section": "PRESENCE AND RESPONSIVENESS",
        "globalChunkIndex": 132
      }
    },
    {
      "id": "chunk-133",
      "text": "stem, but a more granular approach can be \nhelpful as your system scales.\nVersioning individual modules means having a version number \nfor every component or group of styles within the design system. \nSo if you put your button component into one module and your \nutility styles into another, they would each have their own version \nnumber, such as primer-buttons@2.4.0 and primer-utilities@2.8.0.\nYou can still maintain a package that includes the entire set of \nthe modules and version that too. For example, primer-css@9.5.0 \nincludes primer-buttons, primer-utilities, and all the other Primer \nmodules. So you can provide the best of both worlds—the option \nto use the entire system, or just use individual modules.\nThis modular versioning approach does require more effort for initial \nsetup because you need to work out what to boil each module down \nto. For instance, should you have a module for layout utilities as well \nas a grid system, or combine them all into one layout module?\nThe",
      "metadata": {
        "startIndex": 3083,
        "endIndex": 4078,
        "chunkIndex": 4,
        "section": "PRESENCE AND RESPONSIVENESS",
        "globalChunkIndex": 133
      }
    },
    {
      "id": "chunk-134",
      "text": "because you need to work out what to boil each module down \nto. For instance, should you have a module for layout utilities as well \nas a grid system, or combine them all into one layout module?\nThe benefit of this approach is that users of your design system \ncan choose to upgrade just the bits they need. Giving teams the \noption to selectively update when they have the time to do it can \nmean they’re more likely to iteratively keep up to date—whereas \nthe overhead of updating the entire system in one go can act as a \nbarrier.\nVersioning by package enables a design systems team to push \nupdates more frequently without the pressure of forcing an update \nto the entire system.\nCompared with versioning the entire system in one go, versioning \nby module creates more flexibility around major design systems \n\n9812ChapterC 20Ct.Ipnoddu\nreleases, can lead to a culture of continuous development, and \nenable your systems team to move faster overall.\nReleases, branches, and version",
      "metadata": {
        "startIndex": 3878,
        "endIndex": 4865,
        "chunkIndex": 5,
        "section": "PRESENCE AND RESPONSIVENESS",
        "globalChunkIndex": 134
      }
    },
    {
      "id": "chunk-135",
      "text": "round major design systems \n\n9812ChapterC 20Ct.Ipnoddu\nreleases, can lead to a culture of continuous development, and \nenable your systems team to move faster overall.\nReleases, branches, and version numbers\nDesign system teams often have to balance competing priorities. \nAttending to bug fixes or other commitments has to be balanced \nwith intensive projects requiring more research and planning, such \nas developing a new color system or bringing in a newly supported \nfeature like a CSS grid.\nYour publishing workflow needs to work for both the users and \nthe maintainers of the design system. Maintainers want to have \nconfidence in what they test and ship. Users of the system want \nto have clarity on status and what type of updates they’re getting.\nAt GitHub, we found the combination of versioning and organizing \nreleases with Git branches gave us the right amount of flexibility in \nplanning and shipping new design system releases.",
      "metadata": {
        "startIndex": 4665,
        "endIndex": 5610,
        "chunkIndex": 6,
        "section": "PRESENCE AND RESPONSIVENESS",
        "globalChunkIndex": 135
      }
    },
    {
      "id": "chunk-136",
      "text": "re getting.\nAt GitHub, we found the combination of versioning and organizing \nreleases with Git branches gave us the right amount of flexibility in \nplanning and shipping new design system releases.\n\n9912ChapterC 20Ct.Ipnoddu\nFigure 6: Tracking multiple Primer releases with GitHub \nProject boards.\nWe maintain a “dev” branch that includes work in progress and \ncreates a new branch for each individual release. Since Git allows \nus to create multiple branches of the design systems code, we \ncan work on a minor or patch release at the same time as a major \nrelease. This means we can take our time with a major release \nthat might include breaking changes, while also shipping timely \nupdates and bug fixes in minor and patch releases.\nVersioning our system and using Semver makes this workflow \npossible. We can clearly point to a specific version number for each \nrelease, and know by the Semver system what type of updates are \nincluded with it, and therefore what type of testing we need to",
      "metadata": {
        "startIndex": 5410,
        "endIndex": 6407,
        "chunkIndex": 7,
        "section": "PRESENCE AND RESPONSIVENESS",
        "globalChunkIndex": 136
      }
    },
    {
      "id": "chunk-137",
      "text": "possible. We can clearly point to a specific version number for each \nrelease, and know by the Semver system what type of updates are \nincluded with it, and therefore what type of testing we need to do.\nSince Semver is a well-recognized standard for versioning, it helps \nclearly communicate to users of Primer—internally at GitHub or \nexternally—what updates they’re getting and \nwhat type of testing they may need to do in \norder to use the updates.\nNate Whitson, LinkedIn\nListen online:  \nBuilding a Public vs. a Private System \nPublic vs. private\nAs your system and its number of users grow, you might find \nyourself considering whether to make your design system public \n\n10012ChapterC 20Ct.Ipnoddu\nto some degree. There isn’t a one-size-fits-all solution to this—it \nshould be based on what’s right for your team. Making a system \npublic doesn’t have to be an all-or-nothing approach, there are \nmultiple ways of breaking down what’s public.\nMany pioneering teams have created and published",
      "metadata": {
        "startIndex": 6207,
        "endIndex": 7205,
        "chunkIndex": 8,
        "section": "PRESENCE AND RESPONSIVENESS",
        "globalChunkIndex": 137
      }
    },
    {
      "id": "chunk-138",
      "text": "s right for your team. Making a system \npublic doesn’t have to be an all-or-nothing approach, there are \nmultiple ways of breaking down what’s public.\nMany pioneering teams have created and published beautifully \ndesigned documentation, such as Material Design, Lightning  \nDesign System, and Shopify’s Polaris. We shouldn’t assume the \nsolution that worked for these companies is right for everyone else. \nThese are companies making a significant investment in design \nsystems. Plus, they have the broader objective of wanting external \ndevelopers to use these systems to build on their platform.\nWhen deciding what, if anything, is made public, you should \nprioritize based on your company’s needs, rather than standards \nset by other companies.\nHere are a few ways you can make \nyour design system public:",
      "metadata": {
        "startIndex": 7005,
        "endIndex": 8005,
        "chunkIndex": 9,
        "section": "PRESENCE AND RESPONSIVENESS",
        "globalChunkIndex": 138
      }
    },
    {
      "id": "chunk-139",
      "text": "public:",
      "metadata": {
        "startIndex": 7805,
        "endIndex": 8805,
        "chunkIndex": 10,
        "section": "PRESENCE AND RESPONSIVENESS",
        "globalChunkIndex": 139
      }
    },
    {
      "id": "chunk-140",
      "text": "You might decide that making the source code public isn’t right for \nyour team, but you want to make the documentation public.\nMarvel’s style guide and MailChimp’s patterns are examples of \npublic documentation sites that don’t (yet) share their source \ncode.\nOPEN-SOURCE DESIGN SYSTEMS\nMany companies open-source their design system. This means \nthe general public can open issues to request new features, \n\n10112ChapterC 20Ct.Ipnoddu\ngive feedback, or let the maintainers know of bugs. Maintainers \ncan also choose to accept contributions in the form of code or \ndocumentation changes via pull requests. If the maintainers \nchoose, they can make the design system available for modification \nand reuse by adding a license.\nThe US Web Standards, Primer, Help Scout, and Solid are all \nexamples of design systems open-sourced on Github.com.\nFigure 7: Buzzfeed’s design system, Solid, is open-\nsourced on GitHub.\nOPEN-SOURCE THE DOCS WITH YOUR CODE ON GITHUB\nYou don’t necessarily have to share a",
      "metadata": {
        "startIndex": 0,
        "endIndex": 996,
        "chunkIndex": 0,
        "section": "PUBLIC DOCUMENTATION ONLY",
        "globalChunkIndex": 140
      }
    },
    {
      "id": "chunk-141",
      "text": "f design systems open-sourced on Github.com.\nFigure 7: Buzzfeed’s design system, Solid, is open-\nsourced on GitHub.\nOPEN-SOURCE THE DOCS WITH YOUR CODE ON GITHUB\nYou don’t necessarily have to share a crafted documentation \nwebsite—you can just share documentation written in markdown \nformat and it will be rendered and styled on GitHub. Another \noption is to publish the docs via GitHub pages. This can be a \nlow-barrier way to share documentation since GitHub hosts the \ndocumentation, giving you a default public URL if you don’t add a \ncustom domain.\n\n10212ChapterC 20Ct.Ipnoddu",
      "metadata": {
        "startIndex": 796,
        "endIndex": 1796,
        "chunkIndex": 1,
        "section": "PUBLIC DOCUMENTATION ONLY",
        "globalChunkIndex": 141
      }
    },
    {
      "id": "chunk-142",
      "text": "If you want to keep the source-code and/or the npm packages \nprivate, you could choose to share the code for your design \nsystem so it can be used by others. This might be a nice option if \nyou don’t want to make in-progress work on your system public, or \nadd the overhead of managing open-source contributions, but are \nstill happy to share the code for use by others.\nProjects like Lab by Compositor (a design tool for creating React \ncomponents for design systems) use the Releases feature on \nGitHub to share release notes and a ZIP file download of the \nsoftware. They also use the repo to host documentation and \nissues to get feedback from users.\nFigure 8: Color swatches in Storybook.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "SHARE A ZIP FILE TO DOWNLOAD",
        "globalChunkIndex": 142
      }
    },
    {
      "id": "chunk-143",
      "text": "Storybook has become a popular tool for design systems teams, \nespecially for those using React, though it can also be used with \n\n10312ChapterC 20Ct.Ipnoddu\nSass or CSS-based design systems too. As Brad Frost describes, \nStorybook is a “workshop” tool designed to output rendered \nexamples of your styles and components, which you can use in \ndevelopment for testing changes. Style guide documentation is \nyour “storefront” and includes crafted and detailed documentation \nwith information like usage guidelines and code-style principles.\nFigure 9: Notification styles in Storybook.\nProviding rendered examples of your components, even without \ndetailed documentation, is still very useful to users, maintainers, \nand would-be contributors of your design system. It provides a \ncatalog of what’s included in your design system.\nPattern Lab (created by Brad Frost), Fractal, and React styleguidist \nare other tools that provide similar features to Storybook with \noptions for documentation and code",
      "metadata": {
        "startIndex": 0,
        "endIndex": 999,
        "chunkIndex": 0,
        "section": "PUBLISH A STORYBOOK OF YOUR UI COMPONENTS",
        "globalChunkIndex": 143
      }
    },
    {
      "id": "chunk-144",
      "text": "cluded in your design system.\nPattern Lab (created by Brad Frost), Fractal, and React styleguidist \nare other tools that provide similar features to Storybook with \noptions for documentation and code examples. All these tools can \nbe used without sharing your design system’s source code, and \ngive you options as to what level of documentation you share.\n\n10412ChapterC 20Ct.Ipnoddu\nAs you consider varying degrees of access \nto your system, also consider some of the \nreasons teams make their systems public:",
      "metadata": {
        "startIndex": 799,
        "endIndex": 1799,
        "chunkIndex": 1,
        "section": "PUBLISH A STORYBOOK OF YOUR UI COMPONENTS",
        "globalChunkIndex": 144
      }
    },
    {
      "id": "chunk-145",
      "text": "Anything behind authentication, like outside VPNs or firewalls, \nmeans one more barrier to access. I know this firsthand since \nwe have a new, in-progress documentation site for Primer that \nrequires staff login. People frequently think the style guide had \nbeen taken down or don’t even know it exists.\nAuthentication also makes it difficult to give external contractors \naccess. It’s a small barrier, but it can have a negative impact \nand mean people who could be using your design system \ndocumentation can’t or won’t because it’s too much hassle.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "NO AUTHENTICATION BARRIERS TO SHARING",
        "globalChunkIndex": 145
      }
    },
    {
      "id": "chunk-146",
      "text": "Design systems are a popular topic in the design and front- end \ncommunity right now and might be part of a prospect’s decision to \nchoose one company over another.\nDesign systems can be a sign of maturity for a team, and also \nprovide insight into what it might be like to work at that company. \nEspecially if you’re trying to recruit directly for your design systems \nteam, making the documentation public is an obvious way to \nattract people and set expectations.\n\n10512ChapterC 20Ct.Ipnoddu",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "HELPS WITH RECRUITING THROUGH \nPREVIEWING DESIGN MATURITY",
        "globalChunkIndex": 146
      }
    },
    {
      "id": "chunk-147",
      "text": "Making your documentation and/or your source-code public opens \nyou up to external contributions, whether via simple feedback \ncomments or direct contributions to code. This risks overhead, \nparticularly if your system becomes popular, but the benefit is that \nyou get feedback and insights from a wider range of people.\nPrimer is open-sourced on GitHub. We’ve been increasingly working \nin the open and sharing issues and pull requests so people can see \nhow we work. We’ve noticed a gradual increase in contributions \nfrom the community and internal GitHub contributors. People \ngenerally feel proud to contribute to an open-source project that \ncan benefit anyone.\nConclusion\nThere’s a lot that goes into the rollout of your design system, and \nmuch of it will extend naturally from how you decide to build your \nsystem, who you’re working with, and the best way to spread \nadoption inside your company.\nCreating a perfect rollout strategy is less important than ensuring \nyou’re involving the",
      "metadata": {
        "startIndex": 0,
        "endIndex": 997,
        "chunkIndex": 0,
        "section": "OPENS YOU UP FOR INPUT FROM THE COMMUNITY",
        "globalChunkIndex": 147
      }
    },
    {
      "id": "chunk-148",
      "text": "ide to build your \nsystem, who you’re working with, and the best way to spread \nadoption inside your company.\nCreating a perfect rollout strategy is less important than ensuring \nyou’re involving the right people, being clear about your end goals \nand how your strategy supports those, and documenting your plan \nmethodically through each step.\nDesign systems are always evolving, and the way you share and \nencourage adoption of new iterations will evolve along the way as \nwell. An intentional, thoughtful strategy with room to scale will go \na long way to making sure adoption is treated as a crucial part of \nthe building process.\n\n10612ChapterC 20Ct.Ipnoddu\nFurther reading",
      "metadata": {
        "startIndex": 797,
        "endIndex": 1797,
        "chunkIndex": 1,
        "section": "OPENS YOU UP FOR INPUT FROM THE COMMUNITY",
        "globalChunkIndex": 148
      }
    },
    {
      "id": "chunk-149",
      "text": "Chapter — 05\nExpanding your \ndesign system\nMore than the sum of its parts\nBy Marco Suarez and Sophie Tahran\n\n10812ChapterC 20Ct.Ipnoddu\nAs mentioned in Chapter 1, early software programming was limited \nby the speed and capability of hardware. But over time, hardware \nbecame increasingly faster and cheaper, and the inefficiency of \nsoftware became even more noticeable.\nAs product teams are expected to move faster and faster, speed \nand efficiency is an ever-growing concern. However, design \nsystems enable teams to find speed, efficiency, and consistency \nthrough reusability. As you experience these benefits, other areas \nof inefficiency that were once unnoticeable become glaring.\nAlignment is often one of those areas. Aligning team members, \nteams, and a company around things like direction, expectations, \nand quality is critical to moving and scaling quickly. Without \nalignment, friction increases and velocity slows—something \nproduct teams cannot afford.\nA design system is a",
      "metadata": {
        "startIndex": 0,
        "endIndex": 992,
        "chunkIndex": 0,
        "section": "03. Maintaining Design Systems",
        "globalChunkIndex": 149
      }
    },
    {
      "id": "chunk-150",
      "text": "direction, expectations, \nand quality is critical to moving and scaling quickly. Without \nalignment, friction increases and velocity slows—something \nproduct teams cannot afford.\nA design system is a fantastic way to create alignment around \ninterface design and implementation. But beyond components, \nteams can build alignment with vision, design principles, process, \nand voice and tone.\n\n10912ChapterC 20Ct.Ipnoddu\nVision\nA vision statement moves everyone toward a common destination. \nVision is your North Star. It’s a reusable statement that gives \ncontext to your work to help your team stay on track and in \nsync. A vision statement declares what your team, product, or \ncompany is attempting to achieve and why it’s worth achieving. \nIt’s comprehensive yet memorable, elevating yet attainable.\nVision creates clarity, making non-essentials easier to identify. \nMomentum is far easier to build once everyone knows where \nthey’re going and why.\nA few years ago, the Starbucks product team was",
      "metadata": {
        "startIndex": 792,
        "endIndex": 1792,
        "chunkIndex": 1,
        "section": "03. Maintaining Design Systems",
        "globalChunkIndex": 150
      }
    },
    {
      "id": "chunk-151",
      "text": "e.\nVision creates clarity, making non-essentials easier to identify. \nMomentum is far easier to build once everyone knows where \nthey’re going and why.\nA few years ago, the Starbucks product team was reorganizing \nand needed to clarify—for themselves and the entire company—\ntheir reason for existing. In a corporation as large as Starbucks, \nit’s vital to clearly and succinctly express the purpose and value \nof your team.\n“We create digital products that make our customers happy and \nour partners proud.” This statement became their rallying cry. The \nvision grounded decision-making to improve the experience for \ncustomers and partners (baristas, managers, office employees) as \nwell as achieve business goals.\nPRO TIP — Creating your vision statement\nTo create your vision statement, describe what your team, \napplication, or company should look like in two to five years. \nDoes the culmination of your present work add up to that \ndescription?",
      "metadata": {
        "startIndex": 1592,
        "endIndex": 2544,
        "chunkIndex": 2,
        "section": "03. Maintaining Design Systems",
        "globalChunkIndex": 151
      }
    },
    {
      "id": "chunk-152",
      "text": "ement\nTo create your vision statement, describe what your team, \napplication, or company should look like in two to five years. \nDoes the culmination of your present work add up to that \ndescription? Is that description worth spending the next \nseveral years realizing? If not, adjust your aim. Maybe you \nneed course-correcting or maybe you need to aim higher.\n\n11012ChapterC 20Ct.Ipnoddu\n“It helped us create a system that, we think, is \nclear and scalable across the various global \nmarkets we serve while still being unique.”\nJason Stoff — STARBUCKS\nInformal vision statements for discrete projects also became \nuseful. “Clarity first, then elegance if possible,” was the guiding \nprinciple of a recent redesign.\nWhen we had a few design options for a given \nfeature to discuss as a team, we referred \nback to our goal of clarity at the expense of \nall else, then worked to find a way (if possible) \nto make it elegant.\nJason Stoff — STARBUCKS\nNick Grossman of Union Square Ventures gives several",
      "metadata": {
        "startIndex": 2344,
        "endIndex": 3345,
        "chunkIndex": 3,
        "section": "03. Maintaining Design Systems",
        "globalChunkIndex": 152
      }
    },
    {
      "id": "chunk-153",
      "text": "red \nback to our goal of clarity at the expense of \nall else, then worked to find a way (if possible) \nto make it elegant.\nJason Stoff — STARBUCKS\nNick Grossman of Union Square Ventures gives several examples \nof how a North Star impacts company alignment\nin his talk, “Purpose, Mission and Strategy.” One example he gives \nis about Foursquare’s product focus moving from the consumer \napp to the direction of being a location data platform that could \npower other applications. This was a massive shift in direction. \nIt was the vision “making cities more delightful” that provided a \nmuch-needed North Star for employees to accept and embrace \nthis new model. Grossman says, “It was a watershed moment for \naligning the company around a new direction.”\n\n11112ChapterC 20Ct.Ipnoddu\nIt’s helpful to assess your progress as a team. At Etsy, we held \nretrospectives after every major launch. A retro is a meeting to \ncelebrate the things that went well and identify the things that \ndidn’t for a",
      "metadata": {
        "startIndex": 3145,
        "endIndex": 4139,
        "chunkIndex": 4,
        "section": "03. Maintaining Design Systems",
        "globalChunkIndex": 153
      }
    },
    {
      "id": "chunk-154",
      "text": "l to assess your progress as a team. At Etsy, we held \nretrospectives after every major launch. A retro is a meeting to \ncelebrate the things that went well and identify the things that \ndidn’t for a particular launch. It’s also an opportune time to check \nyour alignment with your vision.\nDesign principles\nDesigners often operate with their own implicit set of standards to \nevaluate the quality of their work. But when teams grow, explicit \nstandards become necessary to unify all with a shared language \nand a guide to evaluating the work. How do you define good \ndesign? How do you know what’s essential and what’s arbitrary? \nHow do you know when something is ready to ship? How do you \nknow if you’re on the path to achieving your vision?\n\n11212ChapterC 20Ct.Ipnoddu\nPRO TIP — Setting the groundwork for your principles\nCreating your principles can seem like an overwhelming \ntask. Before getting to work, establish a set of goals your \nprinciples must achieve.",
      "metadata": {
        "startIndex": 3939,
        "endIndex": 4908,
        "chunkIndex": 5,
        "section": "03. Maintaining Design Systems",
        "globalChunkIndex": 154
      }
    },
    {
      "id": "chunk-155",
      "text": "oddu\nPRO TIP — Setting the groundwork for your principles\nCreating your principles can seem like an overwhelming \ntask. Before getting to work, establish a set of goals your \nprinciples must achieve. Here are a few examples:\n ÒShould they describe the output or process?\n ÒShould they be a sentence or a phrase?\n ÒWho should they benefit?\n ÒHow should they be used?\nBegin your work with a large amount of raw data collected \nfrom your team through discussions, survey, or interviews. \nThen, work through a process of combining, refining, and \nevaluating until you’ve arrived at a comprehensive and \ndistilled set of principles. Etsy has a great article about \ntheir own principles creation process (https://dbtr.co/etsy- \ndesign-principles).\n\n11312ChapterC 20Ct.Ipnoddu\nPrinciples are important for design systems  \nprimarily for describing how it was created, \nand how the makers of it would intend it to be \nused.\nRich FULCHER — GOOGLE\nFigure 1: Lyft’s design principles build upon each other.\nA",
      "metadata": {
        "startIndex": 4708,
        "endIndex": 5706,
        "chunkIndex": 6,
        "section": "03. Maintaining Design Systems",
        "globalChunkIndex": 155
      }
    },
    {
      "id": "chunk-156",
      "text": "design systems  \nprimarily for describing how it was created, \nand how the makers of it would intend it to be \nused.\nRich FULCHER — GOOGLE\nFigure 1: Lyft’s design principles build upon each other.\nA system of principles can provide the answers. Design principles \nact as a reusable standard for designers to measure their work. \nThey replace subjective ideals with a shared understanding of \nwhat design must do for users. Just as guardrails keep you safe \nand on the road, design principles keep teams on the path to \nachieving their vision.\nPosting your principles on the office walls, creating a computer \ndesktop wallpaper, adding them to your design systems site, or \nprinting them on notebooks are all great ways to keep them top \nof mind. Task your most senior designers with using them in every \n\n11412ChapterC 20Ct.Ipnoddu\ndesign critique to ensure the new language is adopted. This new \nsystem of language will become a vital part of your design system \nbecause it creates alignment,",
      "metadata": {
        "startIndex": 5506,
        "endIndex": 6501,
        "chunkIndex": 7,
        "section": "03. Maintaining Design Systems",
        "globalChunkIndex": 156
      }
    },
    {
      "id": "chunk-157",
      "text": "in every \n\n11412ChapterC 20Ct.Ipnoddu\ndesign critique to ensure the new language is adopted. This new \nsystem of language will become a vital part of your design system \nbecause it creates alignment, enabling your design team to scale.\nDisagreements happened less and less \nbecause we were now aligned.\nSteven Fabre — INVISION\nWhile designing InVision Studio, the design team realized far too \nmuch time was spent debating solutions. So a set of principles \nwas drafted to help navigate the complexity of designing software. \nThese principles were used to guide individual decision-\nmaking, help reach agreements faster as a team, and acted \nas a transcendent standard to create harmony and cohesion \nthroughout the product. The principles were modified over time \nas Studio evolved and needs changed, but these principles aligned \nthe team and helped them keep the velocity they needed.\nJesse Bennett-Chamberlain, Shopify\nListen online:  \nPrinciples And Why They’re Important",
      "metadata": {
        "startIndex": 6301,
        "endIndex": 7279,
        "chunkIndex": 8,
        "section": "03. Maintaining Design Systems",
        "globalChunkIndex": 157
      }
    },
    {
      "id": "chunk-158",
      "text": "lved and needs changed, but these principles aligned \nthe team and helped them keep the velocity they needed.\nJesse Bennett-Chamberlain, Shopify\nListen online:  \nPrinciples And Why They’re Important\n\n11512ChapterC 20Ct.Ipnoddu\nProcess\nProviding a clearly defined process for how user experience \nproblems are approached and solved builds alignment within \nproduct teams. This consistency helps to remove friction and build \nvelocity.\nIt is only in the repetition of the craft that he \nor she masters the art.\nSamuel Avital — MIME\nProcess guides designers through a series of clearly defined \nmilestones, each with different objectives and deliverables. These \nmilestones act as interdependent components that, when used \ntogether, improve the probability of arriving at optimal solutions.\nA repeatable process offers several key benefits:",
      "metadata": {
        "startIndex": 7079,
        "endIndex": 8079,
        "chunkIndex": 9,
        "section": "03. Maintaining Design Systems",
        "globalChunkIndex": 158
      }
    },
    {
      "id": "chunk-159",
      "text": "e process offers several key benefits:",
      "metadata": {
        "startIndex": 7879,
        "endIndex": 8879,
        "chunkIndex": 10,
        "section": "03. Maintaining Design Systems",
        "globalChunkIndex": 159
      }
    },
    {
      "id": "chunk-160",
      "text": "you to focus solely on the tasks at hand without worrying \nabout what to do next",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "01. It provides clear expectations within each step, allowing",
        "globalChunkIndex": 160
      }
    },
    {
      "id": "chunk-161",
      "text": "and used to inform future iterations or course-correct low \nperforming launches",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "02. It builds data within each step that can be referenced",
        "globalChunkIndex": 161
      }
    },
    {
      "id": "chunk-162",
      "text": "of each team member involved—bringing the right people \nin at the right times, making everyone’s involvement \nbeneficial to the quality of the output\n\n11612ChapterC 20Ct.Ipnoddu",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "03. It creates an understanding of the roles and responsibilities",
        "globalChunkIndex": 162
      }
    },
    {
      "id": "chunk-163",
      "text": "efficient, and predictable while also improving the quality \nand consistency of your work.\nAt InVision, our process has 6 steps:\nFigure 2: The InVision design process.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "04. A repeatable process will ensure progress is smooth,",
        "globalChunkIndex": 163
      }
    },
    {
      "id": "chunk-164",
      "text": "to gain a deep understanding of the problem space and \nidentify how it aligns with our business goals. Product \nmanagement leads this phase and works with the research \nteam to conduct interviews, gather data, and perform \ncompetitive research.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "01. Understand: First, we use customer research and insights",
        "globalChunkIndex": 164
      }
    },
    {
      "id": "chunk-165",
      "text": "possible solutions. They work with product and research \nteams to produce wireframes, core flows, and user \njourneys.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "02. Explore: The design team then ideates and explores",
        "globalChunkIndex": 165
      }
    },
    {
      "id": "chunk-166",
      "text": "product team works to align everyone on what success \nlooks like. The output of this work is a problem statement \nand defining measurements of success.\n\n11712ChapterC 20Ct.Ipnoddu",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "03. Define: Once a potential solution has been identified, the",
        "globalChunkIndex": 166
      }
    },
    {
      "id": "chunk-167",
      "text": "They work with the research, product, and engineering \nteams to develop core flows, prototypes, and identify tech \nrequirements.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "04. Design: Refining the solution is design team’s responsibility.",
        "globalChunkIndex": 167
      }
    },
    {
      "id": "chunk-168",
      "text": "into reality. The product team orchestrates quality \nassurance, support documentation, and the sales and \nmarketing teams.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "05. Build: Engineering translates the design and prototypes",
        "globalChunkIndex": 168
      }
    },
    {
      "id": "chunk-169",
      "text": "launched solution. The product team collaborates with the \nresearch, design, and engineering teams to gather insights \nto measure against our success metrics. We use these \ninsights to inform our next steps and start the process \nover again.\nVoice and tone\nSophie Tahran, InVision’s UX Writer, weighs in on the value of \nwriting guidelines—and how to create them.\nGreat writing is an essential part of great design, but even in-\nhouse UX writers aren’t able to edit every single word in a product. \nThat’s where writing guidelines come into play. A source of truth \npromotes good communication, credibility, and consistency—no \nmatter who’s writing content.\nEvery writing guide should cover both voice and tone. While your \nvoice generally stays the same (like a personality), your tone shifts \naccording to the situation (like an attitude). Both are an essential \npart of communication—and you can’t ship a product without \neffectively communicating it.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 956,
        "chunkIndex": 0,
        "section": "06. Learn: At this point, we observe the effectiveness of our",
        "globalChunkIndex": 169
      }
    },
    {
      "id": "chunk-170",
      "text": "like a personality), your tone shifts \naccording to the situation (like an attitude). Both are an essential \npart of communication—and you can’t ship a product without \neffectively communicating it.\n\n11812ChapterC 20Ct.Ipnoddu\nBecause voice identifies who we are and defines our relationships, \nbuilding writing guidelines early on is one of the best ways to gain \ncredibility with your users. They’ll begin to recognize you, and \nknow that they can trust you.\nWriting guidelines also help evolve your voice. Just as your \npersonality matures over time, your voice will evolve as your \ncompany grows. Guidelines define what you should sound like \nright now, so when you do steer away from them, you’ll know that \nyou’re doing so intentionally. (“I’ll just throw an emoji in this subject \nline,” turns into, “Hey, let’s test how emoji perform and see if \nthey’re worth adding to our writing guidelines.”) Without thoughtful \nwriting guidelines, teams risk allowing their voice to be determined \nby",
      "metadata": {
        "startIndex": 756,
        "endIndex": 1753,
        "chunkIndex": 1,
        "section": "06. Learn: At this point, we observe the effectiveness of our",
        "globalChunkIndex": 170
      }
    },
    {
      "id": "chunk-171",
      "text": "rns into, “Hey, let’s test how emoji perform and see if \nthey’re worth adding to our writing guidelines.”) Without thoughtful \nwriting guidelines, teams risk allowing their voice to be determined \nby patterns instead of users’ needs, and end up making decisions \nsolely based on what they’ve done in the past.\nJesse Bennett-Chamberlain, Shopify \nListen online: Voice and Tone in Polaris\n\n11912ChapterC 20Ct.Ipnoddu\nBuilding writing guidelines\nStart with an audit. Talk to people across (and outside) the company: \ndesigners, writers, support agents, co- founders, users, etc. \nYour goal is to get their impression of the company’s personality. \nConsider not only conducting interviews, but also creating mood \nboards—visual collections of colors, people, places, and more—to \nrepresent more emotional, intangible qualities.",
      "metadata": {
        "startIndex": 1553,
        "endIndex": 2553,
        "chunkIndex": 2,
        "section": "06. Learn: At this point, we observe the effectiveness of our",
        "globalChunkIndex": 171
      }
    },
    {
      "id": "chunk-172",
      "text": ", intangible qualities.",
      "metadata": {
        "startIndex": 2353,
        "endIndex": 3353,
        "chunkIndex": 3,
        "section": "06. Learn: At this point, we observe the effectiveness of our",
        "globalChunkIndex": 172
      }
    },
    {
      "id": "chunk-173",
      "text": "Have a core group of people, normally writers, narrow down the \nbest words to describe what you found. Is your voice human, real, \nand bold? Or is it kind, experienced, and empowering? Take into \nconsideration not only how you sound now, but also what you \naspire to be and avoid (“InVision is never clickbait-y or pandering”).\nTone can be more difficult to hammer down. It shifts according to \nthe situation, so it’s sometimes more helpful to provide direction \nthan it is to identify characteristics. State your key priorities, like, \n“Always provide clarity,” and, “Consider the user’s emotional and \nmental state.” This is also a good place to determine whether \nhumor has a place in your writing, and where you fall on the \nformality spectrum.\nOnce you’ve identified the more nebulous aspects of your voice \nand tone, carry that same thinking into the tangible. What should \nyour different channels look like?",
      "metadata": {
        "startIndex": 0,
        "endIndex": 915,
        "chunkIndex": 0,
        "section": "DEFINE THE FINDINGS",
        "globalChunkIndex": 173
      }
    },
    {
      "id": "chunk-174",
      "text": "fall on the \nformality spectrum.\nOnce you’ve identified the more nebulous aspects of your voice \nand tone, carry that same thinking into the tangible. What should \nyour different channels look like? Do you use sentence case or \ntitle case?\nYou may find that you have a need for multiple guidelines— voice \nand tone within your design system, a company-wide style guide \n\n12012ChapterC 20Ct.Ipnoddu\nfocusing on words only, and brand guidelines that also encompass \nvisual design.\nGET BUY-IN\nPotentially more important than building voice and tone guidelines \nis encouraging everyone to follow them. Anyone who works with \ncontent should have a chance to sign off.",
      "metadata": {
        "startIndex": 715,
        "endIndex": 1715,
        "chunkIndex": 1,
        "section": "DEFINE THE FINDINGS",
        "globalChunkIndex": 174
      }
    },
    {
      "id": "chunk-175",
      "text": "Your guidelines need to be easily found and integrated. If you’re \nbuilding voice and tone into your design system, follow MailChimp \nand Shopify’s lead in giving writing its own section, separate from \ncomponents, principles, and layers. You can also go one step \nfurther by creating a separate list of copy patterns (like Mailchimp \ndid) for grab-and-go words.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "FIND A HOME",
        "globalChunkIndex": 175
      }
    },
    {
      "id": "chunk-176",
      "text": "Writing guidelines are living, breathing documents that require \nmaintenance as your company grows. From the start, use an \neditable Paper or Google Doc—and better yet, schedule monthly \ncheck-ins.\nInvest time in writing guidelines from the start. Most companies \nhave more people representing their voice than you’d expect, from \nproduct designers to support agents. By having a source of truth—\nand creating it together—you can offer users a better experience.\n\n12112ChapterC 20Ct.Ipnoddu\nWhen you have guidelines that are in conflict, \nthen you have to go back to the principles and  \ndecide which are more important.\nLori Kaplan — ATLASSIAN\nConclusion\nJust as design is far more than the sum of its parts, your design \nsystem can serve as far more than a components-only guide. \nVision, principles, process, and voice and tone expand your design \nsystem into additional areas where reusability can also increase \nspeed and efficiency.\nDesign systems have changed the way we design and build",
      "metadata": {
        "startIndex": 0,
        "endIndex": 995,
        "chunkIndex": 0,
        "section": "DEVELOP",
        "globalChunkIndex": 176
      }
    },
    {
      "id": "chunk-177",
      "text": "ciples, process, and voice and tone expand your design \nsystem into additional areas where reusability can also increase \nspeed and efficiency.\nDesign systems have changed the way we design and build \napplications—so much so that we must look at the future of design \nthrough the lens of systems. In a future where design systems gain \nwide adoption, design could take on many new, exciting forms.\n\n12212ChapterC 20Ct.Ipnoddu\nFurther reading",
      "metadata": {
        "startIndex": 795,
        "endIndex": 1795,
        "chunkIndex": 1,
        "section": "DEVELOP",
        "globalChunkIndex": 177
      }
    },
    {
      "id": "chunk-178",
      "text": "Chapter — 06\nThe future of  \ndesign systems\nTo infinity and beyond\nBy Roy Stanfield\n\n12412ChapterC 20Ct.Ipnoddu\nI find it exciting to see design systems empower design teams to \nscale and consistently produce solid products, but I know we’re \nonly scratching the surface of our potential. There’s so much more \nwe can accomplish.\nAt Airbnb, we’ve been pondering how we might push our design \nsystem in new directions, and we’re inspired by design- forward \ncompanies that share our desire to craft the future of design \nsystems.\nIn this chapter, I want to introduce you to a new way of thinking \nabout design systems. Design systems can transcend the walls of \na single company to exist as shared standards and customizable \ntooling with help from the open source community, which can \naccelerate development and eliminate the need to start systems \nfrom scratch. If we’re really bold, we could be creating adaptive, \nintelligent systems that are context-aware and compose \nthemselves—reducing our",
      "metadata": {
        "startIndex": 0,
        "endIndex": 998,
        "chunkIndex": 0,
        "section": "12. MailChimp’s VoiceandTone.com",
        "globalChunkIndex": 178
      }
    },
    {
      "id": "chunk-179",
      "text": "evelopment and eliminate the need to start systems \nfrom scratch. If we’re really bold, we could be creating adaptive, \nintelligent systems that are context-aware and compose \nthemselves—reducing our workload and ultimately unlocking AI-\npowered design.\nBut, I’m getting ahead of myself. Let’s start with nuts and bolts.\nBuilding a common foundation\nA designer’s familiarity with the concept of a design system is \nbased on the systems they’ve encountered, what platforms \nthey’ve been tasked to support, and where they’ve worked.\nBooks like this one help us converge on a high-level definition \nfor design systems, but a more rigorous definition will ensure the \nutility and flexibility of our work.\n\n12512ChapterC 20Ct.Ipnoddu\nFinding a standard that supports shared goals will involve \ndecoupling a design system from its implementation, cataloging \ncommon UI and associated states, and more strictly defining \ndesign primitives and components.",
      "metadata": {
        "startIndex": 798,
        "endIndex": 1746,
        "chunkIndex": 1,
        "section": "12. MailChimp’s VoiceandTone.com",
        "globalChunkIndex": 179
      }
    },
    {
      "id": "chunk-180",
      "text": "that supports shared goals will involve \ndecoupling a design system from its implementation, cataloging \ncommon UI and associated states, and more strictly defining \ndesign primitives and components. This could then be expressed \nin a file format that’s able to define a component or design system \nmore completely.\nImagine as if where I built this thing, gravity  \nworks one way, and when I install it in your \noffice gravity works another way.\nTim Sheiner — SALESFORCE\nAn example of differing goals\nCurrently, existing systems reflect the specific needs of the \ncompanies that created them. Since each company is building an \nentirely independent system, design system development starts \nfrom scratch—possibly with help from a web toolkit like Bootstrap, \nrelying on the internal knowledge of the team, and only focusing \non top-level needs. As a result, even the best systems contain \nflaws and lack the necessary tooling to speed development and \ntrack results.",
      "metadata": {
        "startIndex": 1546,
        "endIndex": 2513,
        "chunkIndex": 2,
        "section": "12. MailChimp’s VoiceandTone.com",
        "globalChunkIndex": 180
      }
    },
    {
      "id": "chunk-181",
      "text": "on the internal knowledge of the team, and only focusing \non top-level needs. As a result, even the best systems contain \nflaws and lack the necessary tooling to speed development and \ntrack results. And if a company’s priorities shift, its design system \nmust shift, causing another section of the design system to be \nbuilt in the same limited way.\nFor example, one of the reasons Airbnb created DLS was to \nminimize and sync differences in UI between our supported \nAndroid, iOS, and web platforms. In The Way We Build, VP of \nDesign Alex Schleifer writes, “Universal and Unified define the \nsystem’s approach we apply when defining patterns. Is it part of a \ngreater whole? Does it work across devices?”\n\n12612ChapterC 20Ct.Ipnoddu\nIn our idealized vision, a mockup easily ports between platforms—\ncreating a better design and development experience. This cross-\nplatform UI would give Airbnb guests and hosts alike the same \nend-product experience as if they jumped between mobile app \nand",
      "metadata": {
        "startIndex": 2313,
        "endIndex": 3308,
        "chunkIndex": 3,
        "section": "12. MailChimp’s VoiceandTone.com",
        "globalChunkIndex": 181
      }
    },
    {
      "id": "chunk-182",
      "text": "forms—\ncreating a better design and development experience. This cross-\nplatform UI would give Airbnb guests and hosts alike the same \nend-product experience as if they jumped between mobile app \nand desktop web.\nIn contrast, supporting multiple device platforms was initially less \nof a concern at Etsy, where the main priority was to scale its web \nplatform. During my time there, the team built the web toolkit \nwith the core website as its primary focus. Later, Etsy expanded \nupon its toolkit to support different branding elements for other \ninternal web initiatives. Karyn Campbell describes what it was like \nmodifying the Etsy design system while making Etsy Studio. “While \nwe made a conscious decision to depart in some instances with \nthe etsy.com UI in order to birth this new brand, we also retained \nmany underlying components that our design systems team had \ncreated.”\nA priority at Airbnb was having the same functional and visual voice \nacross platforms.",
      "metadata": {
        "startIndex": 3108,
        "endIndex": 4082,
        "chunkIndex": 4,
        "section": "12. MailChimp’s VoiceandTone.com",
        "globalChunkIndex": 182
      }
    },
    {
      "id": "chunk-183",
      "text": "birth this new brand, we also retained \nmany underlying components that our design systems team had \ncreated.”\nA priority at Airbnb was having the same functional and visual voice \nacross platforms. A priority at Etsy was to support multiple web \nproducts with varying brand initiatives. Both were valid needs. A \nshared standard for design systems would need to ensure a solid \nfoundation so that both these and other real- world priorities could \nmore easily be achieved.\nGathering examples of different design system priorities will help \ncreate a checklist to make sure your design system standards \naddress real concerns. Any company adopting these suggested \nstandards could be assured their design system development \nfocuses on immediate company needs, as well as adhering to \nstandards they plug in to a growing body of open source code and \ntools that support most operational transformations that could be \nencountered.",
      "metadata": {
        "startIndex": 3882,
        "endIndex": 4815,
        "chunkIndex": 5,
        "section": "12. MailChimp’s VoiceandTone.com",
        "globalChunkIndex": 183
      }
    },
    {
      "id": "chunk-184",
      "text": "on immediate company needs, as well as adhering to \nstandards they plug in to a growing body of open source code and \ntools that support most operational transformations that could be \nencountered.\n\n12712ChapterC 20Ct.Ipnoddu\nBut what should be in the \ndesign system standard?\nImagine a tool that can specify which design primitives, (e.g., \nfonts, spacing, color—more on that below), components (and \ntheir states), platforms, and what documentation and testing are \nneeded to have a fully formed design system. The tool would also \nallow the designer to specify which components were not yet \nneeded and which platforms could be added later. With this tool, \na designer would have a framework stating what aspects of the \ndesign system were completed or outstanding. A product manager \ncould export documentation, and a developer could easily export \nUI and UI tests—no longer needing to translate UI from Sketch to \ncode, or from web code to native implementation.\nIf created today, not only",
      "metadata": {
        "startIndex": 4615,
        "endIndex": 5611,
        "chunkIndex": 6,
        "section": "12. MailChimp’s VoiceandTone.com",
        "globalChunkIndex": 184
      }
    },
    {
      "id": "chunk-185",
      "text": "xport documentation, and a developer could easily export \nUI and UI tests—no longer needing to translate UI from Sketch to \ncode, or from web code to native implementation.\nIf created today, not only would this tool provide industry- wide \nsavings, but it would start to standardize the low-level definition of \na design system. Working backward, let’s now imagine what kind \nof definitions such a tool would need in order to exist.\nFirst, decouple the design system from any specific \nimplementation. We’re not creating React components (nor other \nweb implementations), nor Android UI, iOS UI, or even Sketch \nfiles. Instead, our system is an abstraction that can be deployed \nto any target implementation. We’re going to need a file format \nto describe this abstracted design system. The exported format \ncould be rendered into views by open source modules specific to \neach target implementation.",
      "metadata": {
        "startIndex": 5411,
        "endIndex": 6313,
        "chunkIndex": 7,
        "section": "12. MailChimp’s VoiceandTone.com",
        "globalChunkIndex": 185
      }
    },
    {
      "id": "chunk-186",
      "text": "ation. We’re going to need a file format \nto describe this abstracted design system. The exported format \ncould be rendered into views by open source modules specific to \neach target implementation.\n\n12812ChapterC 20Ct.Ipnoddu\nFigure 1: Single source of truth concept proposed by the \nDesign Tools team at Airbnb, originally illustrated by Jon \nGold.\nNext, codify the definitions of design primitives and components \nso they are fully expressed in the design system format. Dang, .dsf \nextension is already in use! Guess we’ll have to settle for the .dang \nfile extension!\nDesign primitives are the building blocks of a UI. These include \nspecific predefined colors, fonts, spacings, and more. They \nare foundational visual elements that can be combined into \ncomponents. Changing primitives is echoed throughout a given \ndesign system’s components, and doing so changes the overall \nfeeling of a brand. Additionally, what are components? We’ll also \nneed to codify those.",
      "metadata": {
        "startIndex": 6113,
        "endIndex": 7086,
        "chunkIndex": 8,
        "section": "12. MailChimp’s VoiceandTone.com",
        "globalChunkIndex": 186
      }
    },
    {
      "id": "chunk-187",
      "text": "hanging primitives is echoed throughout a given \ndesign system’s components, and doing so changes the overall \nfeeling of a brand. Additionally, what are components? We’ll also \nneed to codify those. Components are mostly views composed of \ndesign primitives and smaller components whose minimal internal \nlogic is mapped exclusively to state and state change. Benjamin \nWilkins, Design Lead on the Design Tools team at Airbnb, describes \n\n12912ChapterC 20Ct.Ipnoddu\nthe difference between primitives and components in minute 7:00 \nof his talk, “Thinking  in Symbols for Universal Design.”\nNext, we’ll need to catalog all of the common UI components \nin use today. Just as a typeface may have its unique take on \nthe letter “A” (the letter’s visual appearance may vary between \ntypefaces while its meaning is maintained), a .dang file would have \na text input component that varies in visual representation but not \nfunctionality.",
      "metadata": {
        "startIndex": 6886,
        "endIndex": 7817,
        "chunkIndex": 9,
        "section": "12. MailChimp’s VoiceandTone.com",
        "globalChunkIndex": 187
      }
    },
    {
      "id": "chunk-188",
      "text": "e letter’s visual appearance may vary between \ntypefaces while its meaning is maintained), a .dang file would have \na text input component that varies in visual representation but not \nfunctionality. The catalog will need to group components with \ntheir accompanying states (selected, focus, on-tap, error, etc.) \nand detail interactions to distinguish between mobile, desktop, \nand TV UI.\nWhat are the benefits of this catalog? To start, functional tests \nfor common components could be easily automated through \ncontributions from the open source community. In many cases, \nUI engineers would no longer need to write their own tests. \nThe cataloged components would also enable a marketplace of \nboilerplate design systems that can be installed interchangeably, \nand against which custom UI can be built and substituted. This \nmeans bootstrapping the creation of every design system is no \nlonger necessary.\nLastly, we need to allow for the evolution, growth, and extensibility \nof design systems",
      "metadata": {
        "startIndex": 7617,
        "endIndex": 8616,
        "chunkIndex": 10,
        "section": "12. MailChimp’s VoiceandTone.com",
        "globalChunkIndex": 188
      }
    },
    {
      "id": "chunk-189",
      "text": "built and substituted. This \nmeans bootstrapping the creation of every design system is no \nlonger necessary.\nLastly, we need to allow for the evolution, growth, and extensibility \nof design systems built upon the shared standard. Just because \nwe’re aware of which components are needed today doesn’t \nmean that we’re able to predict all the elements needed for future \ninnovation. A process for modifying existing components or \ncreating wholly new ones is in order. Thoughtfully standardizing \nour collective knowledge will produce a more consistent user \nexperience, accelerate development, decrease investment needed \nfrom individual companies, and enable open source and collective \ndevelopment of next-generation design tools that conform to \nshared conventions.\n\n13012ChapterC 20Ct.Ipnoddu\nCreating a single  \nsource of truth\nThe elements that make up a design system—principles, UI \ncomponents, patterns, and documentation—create the human-\ncomputer interaction layer for our apps.",
      "metadata": {
        "startIndex": 8416,
        "endIndex": 9408,
        "chunkIndex": 11,
        "section": "12. MailChimp’s VoiceandTone.com",
        "globalChunkIndex": 189
      }
    },
    {
      "id": "chunk-190",
      "text": "pnoddu\nCreating a single  \nsource of truth\nThe elements that make up a design system—principles, UI \ncomponents, patterns, and documentation—create the human-\ncomputer interaction layer for our apps. Product designers and \nsystem designers are directly responsible for this layer, and \ntherefore should own the design system and its representation in \nthe codebase.\nThere are two hurdles to achieving a single source of truth. First, \nour current design tools are inadequate. Most only allow us to \nproduce images of UI and prevent designers from achieving \nproduct level fidelity. Second, if the implementation of a design \nsystem is spread across multiple repositories (Android, iOS, React \nNative, React, etc.), collected in a Sketch file, and documented on \na website, then there really is no single codebase to represent a \ntruthful account of the system.\nLacking a single source of truth, the design system—spread out \nover multiple codebases—becomes an amalgam of sources that \neasily fall out",
      "metadata": {
        "startIndex": 9208,
        "endIndex": 10209,
        "chunkIndex": 12,
        "section": "12. MailChimp’s VoiceandTone.com",
        "globalChunkIndex": 190
      }
    },
    {
      "id": "chunk-191",
      "text": "le codebase to represent a \ntruthful account of the system.\nLacking a single source of truth, the design system—spread out \nover multiple codebases—becomes an amalgam of sources that \neasily fall out of sync.\nOur tools\nDesigners use tools like Sketch, Illustrator, or Photoshop to draw \npictures of UIs, yet these are actually just representations of \ninteractive components that look different, behave differently, and \ncontain different data depending upon the state of the app at a \ngiven time. As Colm Tuite notes in the article “Design tools are \nrunning out of track. Here’s how we  can fix them,“ Think of the \nnumber of simple interactions which are commonplace in almost \n\n13112ChapterC 20Ct.Ipnoddu\nall of our products yet cannot be communicated through our \ndesign tools.”\nTuite then mentions interactions and states such as hovering over \na button, focusing an input, checking a checkbox, and identifying \nscroll areas.",
      "metadata": {
        "startIndex": 10009,
        "endIndex": 10941,
        "chunkIndex": 13,
        "section": "12. MailChimp’s VoiceandTone.com",
        "globalChunkIndex": 191
      }
    },
    {
      "id": "chunk-192",
      "text": "cannot be communicated through our \ndesign tools.”\nTuite then mentions interactions and states such as hovering over \na button, focusing an input, checking a checkbox, and identifying \nscroll areas. He points out that our design tools aren’t prompting \ndesigners to think with product level fidelity, and so a designer’s \nwork is usually missing some of its most important details.\n“For each change or addition to the system, a cascade of \nwork is created. Documentation has to be updated, each of \nour apps’ code has to be changed (in Swift, Java, and \nJavaScript), and Sketch templates have to be redrawn. \nThese efforts have to be coordinated, and each source must \nalways be in sync with the others. Code is relatively easy to \ntie together, and we already have an infrastructure that \nallows for version control and continuous integration of our \napplications. Until now though, maintaining Sketch templates \nrelied on manually-intensive human touch points.”\nJon Gold  \nAirbnb",
      "metadata": {
        "startIndex": 10741,
        "endIndex": 11725,
        "chunkIndex": 14,
        "section": "12. MailChimp’s VoiceandTone.com",
        "globalChunkIndex": 192
      }
    },
    {
      "id": "chunk-193",
      "text": "that \nallows for version control and continuous integration of our \napplications. Until now though, maintaining Sketch templates \nrelied on manually-intensive human touch points.”\nJon Gold  \nAirbnb\n\n13212ChapterC 20Ct.Ipnoddu\nFigure 2: Detail of the Airbnb DLS system Sketch file. \nDLS, UX Platforms, Infrastructure. © Airbnb, Inc.\nSketches of apps are then handed off to developers who have to \ntranslate them into working UI. Between the designer and the 4 \ndevelopers that it takes to convert the design into Android, iOS, \nReact Native, and React, it takes 5 different members of the team \nbegin to bring the design up to product- level fidelity. Since the \noriginal sketch was missing details about state and interactions, \na back-and-forth conversation between designer and multiple \ndevelopers is needed to make the designs production-ready. And \nbecause the implementation is coded by 4 different humans, it’s \nlikely that unwanted variation creeps into each implementation.\nFor similar",
      "metadata": {
        "startIndex": 11525,
        "endIndex": 12521,
        "chunkIndex": 15,
        "section": "12. MailChimp’s VoiceandTone.com",
        "globalChunkIndex": 193
      }
    },
    {
      "id": "chunk-194",
      "text": "opers is needed to make the designs production-ready. And \nbecause the implementation is coded by 4 different humans, it’s \nlikely that unwanted variation creeps into each implementation.\nFor similar reasons, many designers have focused on sharpening \ntheir coding skills for at least 1 platform. There are many advantages \nto this, but if you’re a systems designer creating components \nfor cross-platform use, coding those components for a single \nimplementation is not yet enough.\n\n13312ChapterC 20Ct.Ipnoddu\nMultiple  implementations\nThe attempt to reach a single source of truth is further complicated \nwhen working on cross-platform design systems. Jon Gold \nidentifies places where Airbnb’s DLS workflow could be improved \nin “Painting with Code.”\nAt Airbnb, Gold has taken some exciting first steps toward solving \nthis problem with his project React Sketch.app. With this tool, \nlayered Sketch files can be generated from the React codebase.",
      "metadata": {
        "startIndex": 12321,
        "endIndex": 13271,
        "chunkIndex": 16,
        "section": "12. MailChimp’s VoiceandTone.com",
        "globalChunkIndex": 194
      }
    },
    {
      "id": "chunk-195",
      "text": "e.”\nAt Airbnb, Gold has taken some exciting first steps toward solving \nthis problem with his project React Sketch.app. With this tool, \nlayered Sketch files can be generated from the React codebase. \nThis means components in the Airbnb React repo, which already \nhave product-level fidelity, can be populated with real data and \nrendered to a Sketch file. It’s another reward for those adventurous \ndesigners willing to learn React!\nIt’s also a touchstone technology, pointing us toward \nunderstanding mockups not as the source of truth, but instead \nas another target for automated output. With these generated \nfiles, we get a clear picture of which components are sitting in the \nrepo. Best of all, a product designer relying on Sketch does not \nhave to change their workflow and can use more accurate files \n(generated by the codebase, not by hand) to compose their work. \nAt last, we can have confidence in how the components look at \nproduct-level fidelity and in how these components behave",
      "metadata": {
        "startIndex": 13071,
        "endIndex": 14070,
        "chunkIndex": 17,
        "section": "12. MailChimp’s VoiceandTone.com",
        "globalChunkIndex": 195
      }
    },
    {
      "id": "chunk-196",
      "text": "curate files \n(generated by the codebase, not by hand) to compose their work. \nAt last, we can have confidence in how the components look at \nproduct-level fidelity and in how these components behave with \nreal data.\nThe key in making great and growable systems is much more \nto design how its modules communicate rather than what \ntheir internal properties and behaviors should be.",
      "metadata": {
        "startIndex": 13870,
        "endIndex": 14870,
        "chunkIndex": 18,
        "section": "12. MailChimp’s VoiceandTone.com",
        "globalChunkIndex": 196
      }
    },
    {
      "id": "chunk-197",
      "text": "13412ChapterC 20Ct.Ipnoddu\nReact Sketch.app is great because it syncs the React and React \nNative repos and Airbnb’s design system Sketch files. But what \nabout the Android and iOS implementations? How can designers \nmake sure these are in sync? React Sketch.app points the way, but \nwe’ll have to go further.\nHere, we can learn from tools and WYSIWYGs of the recent past \nlike Dreamweaver and Interface Builder. Tools in this category \nallow users to combine elements of UI, hook the UI up to data \nand interaction, and then export deployable code. Unfortunately, \nthese software produce code that’s not maintainable by humans, \nand so few companies use them as an official part of their process. \nDid these tools promise too much and deliver too little?\nLuckily, design system components are simple views with minimal \nlogic. Learn more about views and MVC architecture  here and \nhere. Unlike the promise of tools like Dreamweaver and Interface \nBuilder, components are easily exported view files",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "ALAN KAY  \nLEGEND",
        "globalChunkIndex": 197
      }
    },
    {
      "id": "chunk-198",
      "text": "views with minimal \nlogic. Learn more about views and MVC architecture  here and \nhere. Unlike the promise of tools like Dreamweaver and Interface \nBuilder, components are easily exported view files that developer \npartners can incorporate into existing workflows.\nSolving two problems with one tool\nTo create a designer-controlled source of truth, we’ll need next-\ngeneration design system tools to enable the composition of \ncomponents and to automate the output of the design system \nto any number of target clients (codebases, vector files, and \ndocumentation sites).\nAs outlined in the section above, if we standardize an export \nformat that contains production-level fidelity for components, \nthen other interpreter modules can be freely built to compile a \nsingle component file into all the various flavors of production \ncode. Then, varied implementations of any given component \n\n13512ChapterC 20Ct.Ipnoddu\nwould flow from a single source of truth and would plug right into \nexisting",
      "metadata": {
        "startIndex": 800,
        "endIndex": 1795,
        "chunkIndex": 1,
        "section": "ALAN KAY  \nLEGEND",
        "globalChunkIndex": 198
      }
    },
    {
      "id": "chunk-199",
      "text": "the various flavors of production \ncode. Then, varied implementations of any given component \n\n13512ChapterC 20Ct.Ipnoddu\nwould flow from a single source of truth and would plug right into \nexisting workflows—saving resource-intensive and error- prone \nhuman interpretation of mocked UI. Product designers and design \nsystem designers would finally control the UI they have always \nbeen responsible for.\nAt Airbnb, we’re tackling this challenge in a variety of ways, \nincluding with Lona, our tool for defining design systems and using \nthem to generate cross-platform UI code, Sketch files, images, and \nother artifacts. A highly experimental prototype, Lona represents \nour exploratory approach to discovering what’s next for design at \nscale. Taking a research-based approach to the future of design \nsystems encourages experimentation and collaboration.\nIntelligent systems \ncompose themselves\nIf you’ve not heard of Alan Kay, make sure to look him up.",
      "metadata": {
        "startIndex": 1595,
        "endIndex": 2553,
        "chunkIndex": 2,
        "section": "ALAN KAY  \nLEGEND",
        "globalChunkIndex": 199
      }
    },
    {
      "id": "chunk-200",
      "text": "search-based approach to the future of design \nsystems encourages experimentation and collaboration.\nIntelligent systems \ncompose themselves\nIf you’ve not heard of Alan Kay, make sure to look him up. He’s \ncredited with inventing the graphical user interface, Object \nOriented Programming, and—with his concept of the Dynabook—\neven the tablet. Given that design systems fit firmly inside of the \nworld that Kay and his peers built, it’s worth listening to him.\nOnce the magic of design system standards enables both private \nand open source development for cross-platform use, design \nsystems will most likely reach new heights of functionality and \npopularity. Whereas siloed development requires talented people \nto reinvent the design system anew for each employer, standards-\nbased design systems might easily plug into a passionate \ncommunity that will add capabilities to our nascent tools.\n\n13612ChapterC 20Ct.Ipnoddu\nTaking inspiration from Kay and the PARC maxim—“The best way \nto predict",
      "metadata": {
        "startIndex": 2353,
        "endIndex": 3352,
        "chunkIndex": 3,
        "section": "ALAN KAY  \nLEGEND",
        "globalChunkIndex": 200
      }
    },
    {
      "id": "chunk-201",
      "text": "ms might easily plug into a passionate \ncommunity that will add capabilities to our nascent tools.\n\n13612ChapterC 20Ct.Ipnoddu\nTaking inspiration from Kay and the PARC maxim—“The best way \nto predict the future is to invent it”—I’ll sketch out a stretch goal \nfor the future of design systems and tools in the paragraphs that \nfollow.\nVirtuous  cycle—plugging \ninto  the  feedback  loop\nOften, our design systems contain components that aren’t tracked \nin any special way. Without special consideration and considerable \ndevelopment effort, the design systems team is blind to the usage \nstatistics and performance metrics directly associated with the \nsystem. To gain insight into design systems, teams must manually \ntrack which components each product team uses, and then try \nto glean usability information from product team UX research and \nperformance metrics.\nAt Airbnb, we see data from the large proportion of our native \napps, which now use design system components.",
      "metadata": {
        "startIndex": 3152,
        "endIndex": 4129,
        "chunkIndex": 4,
        "section": "ALAN KAY  \nLEGEND",
        "globalChunkIndex": 201
      }
    },
    {
      "id": "chunk-202",
      "text": "y \nto glean usability information from product team UX research and \nperformance metrics.\nAt Airbnb, we see data from the large proportion of our native \napps, which now use design system components. Connecting \nthese stats to user metrics lets us know which components might \nbe underperforming and deserve special attention.\nSimilar metrics also have an internal benefit. Dashboards \ncontaining usage data aid the internal perception of the system \namong product designers and engineers alike. It’s easy to imagine \nthat tracking the use of a design system can go beyond recording \nend-user impressions (views) and interactions. Even analyzing the \nusage of documentation, design files, and other internal tools can \nlead to insights that better enable product teams.\nBut why should such insights be limited to just a few companies \nwith the resources to create similar tooling? A module could be \nbuilt for just this purpose.",
      "metadata": {
        "startIndex": 3929,
        "endIndex": 4858,
        "chunkIndex": 5,
        "section": "ALAN KAY  \nLEGEND",
        "globalChunkIndex": 202
      }
    },
    {
      "id": "chunk-203",
      "text": "sights that better enable product teams.\nBut why should such insights be limited to just a few companies \nwith the resources to create similar tooling? A module could be \nbuilt for just this purpose. It would track where canon components \n\n13712ChapterC 20Ct.Ipnoddu\nare used in product and then apply a flag to that component. These \nflagged components could be polled, and usage stats could come \nstraight back to the design systems team. The insights would then \nbe used to improve internal tools and the system itself.\nLayout aware\nAnother promising direction would be for our components to \nbecome somewhat layout aware, and then declare their intended \nuse to both the system at large as well as sibling components. \nGiven this new super power, design system components could \nnow communicate where they should generally be used and then \nshare information about what types of data they generally contain.",
      "metadata": {
        "startIndex": 4658,
        "endIndex": 5570,
        "chunkIndex": 6,
        "section": "ALAN KAY  \nLEGEND",
        "globalChunkIndex": 203
      }
    },
    {
      "id": "chunk-204",
      "text": "mponents. \nGiven this new super power, design system components could \nnow communicate where they should generally be used and then \nshare information about what types of data they generally contain. \nEven a simplified implementation of this functionality would help \ndesigners instantly swap abstracted data sets to, for instance, see \nhow translation might affect the layout of a particular component \ngiven a longer language like German or a right-to-left language \nlike Arabic.\nThis awareness might even go a step further with a given \ncomponent stating the kinds of screens or interactions preceded \nby its own display, and again which kinds of interactions or screens \nshould follow upon user interaction. This awareness would enable \npredictive assembly.\nPredictive  assembly—a  pattern  tool\nBecause each component now sends messages about where it’s \ntypically used and what type of data it usually contains, we should \nalso be able to see existing components predictively assembled \ninto",
      "metadata": {
        "startIndex": 5370,
        "endIndex": 6368,
        "chunkIndex": 7,
        "section": "ALAN KAY  \nLEGEND",
        "globalChunkIndex": 204
      }
    },
    {
      "id": "chunk-205",
      "text": "l\nBecause each component now sends messages about where it’s \ntypically used and what type of data it usually contains, we should \nalso be able to see existing components predictively assembled \ninto screens. A future tool might allow the product designer to \nview a particular component, click a randomize button, and see \n\n13812ChapterC 20Ct.Ipnoddu\nthe component in situ with other components arranged in an order \nthat more or less semantically makes sense.\nBy allowing designers to up-vote particularly useful component \ngroupings (or patterns), a layout aware tool featuring predictive \nassembly—perhaps better described as a design system pattern \ntool—could become an instrumental way in which product \ndesigners quickly discover repeatable patterns in the system. With \njust a single click, a designer would be able to compose an effective \nsolution made of many components and export the basic design \nfor any project.",
      "metadata": {
        "startIndex": 6168,
        "endIndex": 7097,
        "chunkIndex": 8,
        "section": "ALAN KAY  \nLEGEND",
        "globalChunkIndex": 205
      }
    },
    {
      "id": "chunk-206",
      "text": "discover repeatable patterns in the system. With \njust a single click, a designer would be able to compose an effective \nsolution made of many components and export the basic design \nfor any project. Moreover, with the advent of standardization, \ndesign systems could become plug-and-play with compositions \ncomposed by predictive assembly, allowing for a quick way to \nassess the integrity of a given design system.\nPredictive assembly would enable the product manager, developer, \nor product designer to provide a set of data and ask for a menu \nof pre-assembled screens that display the data. We could then \nchoose the best option, only correcting the layout if needed.\nIt’s worth noting that if we get particularly good at predictive \nassembly and consult the right minds to take it further, we will \nsoon find ourselves in a world where machine learning provides \nartificial intelligence for plug-and-play design systems.",
      "metadata": {
        "startIndex": 6897,
        "endIndex": 7824,
        "chunkIndex": 9,
        "section": "ALAN KAY  \nLEGEND",
        "globalChunkIndex": 206
      }
    },
    {
      "id": "chunk-207",
      "text": "predictive \nassembly and consult the right minds to take it further, we will \nsoon find ourselves in a world where machine learning provides \nartificial intelligence for plug-and-play design systems. Among \nmany other things, we might witness the birth of a world where \nphone users could eliminate branded apps, preferring a locally \ninstalled design system that could spin up UI without needing to \nload templates over the network.\nAs designers, we continue to rely on intuition, performance metrics, \nand user research to create products. If a large percentage of \nour users can complete a task and proceed to the next stage in \nthe flow, then we generally call the design successful. We use \ntemplating languages to add options to a design so even more users \n\n13912ChapterC 20Ct.Ipnoddu\nreach their goals. But by connecting design systems to artificial \nintelligence, we could achieve a step change in customizable UI.",
      "metadata": {
        "startIndex": 7624,
        "endIndex": 8548,
        "chunkIndex": 10,
        "section": "ALAN KAY  \nLEGEND",
        "globalChunkIndex": 207
      }
    },
    {
      "id": "chunk-208",
      "text": "options to a design so even more users \n\n13912ChapterC 20Ct.Ipnoddu\nreach their goals. But by connecting design systems to artificial \nintelligence, we could achieve a step change in customizable UI. \nInstead of designing products that work for most users, systems \ndesign and AI will apply specific solutions for specific individuals.\nDesigners should prepare now by discovering a bit about machine \nlearning, reading about the breakthroughs enabling AI today, and \nfinally, thinking about how ML could impact design  tools.\nThere is this tremendous value to writing  \nthings down in a way that others can  \nunderstand it.\nRichard FULCHER — GOOGLE\nConclusion\nAs digital product designers, we’re asked to ride the waves of \nchange in our industry. People just like us helped small development \nteams create apps for desktop computing in the 1980s. In the \nlate 1990s, other designers formed a coalition that pressured \nlarge software companies to unite front-end web development \nthrough the web",
      "metadata": {
        "startIndex": 8348,
        "endIndex": 9344,
        "chunkIndex": 11,
        "section": "ALAN KAY  \nLEGEND",
        "globalChunkIndex": 208
      }
    },
    {
      "id": "chunk-209",
      "text": "ams create apps for desktop computing in the 1980s. In the \nlate 1990s, other designers formed a coalition that pressured \nlarge software companies to unite front-end web development \nthrough the web standards project. In the mid-2000s, we focused \non communication and user-generated content while developing \npatterns for creating web apps, and just a little later, all our work \nwas available in mobile form factors like the iPhone. Now, after \nnearly 4 decades of designed computing, design systems and \nAI are shaking  hands—presenting us with new opportunities for \ninnovation at scale.\n\n14012ChapterC 20Ct.Ipnoddu\nEvery designer will now be asked how they might change custom, \none-off design solutions into reusable components that grow the \nsystem. We’ll have to think more holistically, and work collectively \nto develop and learn a new set of tools.\nHow can we work together to improve our workflows and better \nscale design?",
      "metadata": {
        "startIndex": 9144,
        "endIndex": 10081,
        "chunkIndex": 12,
        "section": "ALAN KAY  \nLEGEND",
        "globalChunkIndex": 209
      }
    },
    {
      "id": "chunk-210",
      "text": "at grow the \nsystem. We’ll have to think more holistically, and work collectively \nto develop and learn a new set of tools.\nHow can we work together to improve our workflows and better \nscale design? What should be in a design system standard, and \nwhat kinds of tools could be built if such a standard existed? \nHow will design systems and AI combine to create extremely \ncustomized interactions for end users? There are many questions, \nand each answer points to a possible future. What I love about \ndesign is that it enables each of us to explore the ideas we feel \nmay have the biggest impact, and project our ideas outward and \ninto the future. Innovation is certain.\n\n14112ChapterC 20Ct.Ipnoddu\nFurther reading",
      "metadata": {
        "startIndex": 9881,
        "endIndex": 10881,
        "chunkIndex": 13,
        "section": "ALAN KAY  \nLEGEND",
        "globalChunkIndex": 210
      }
    },
    {
      "id": "chunk-211",
      "text": "Lesson from Netflix and More",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "02. How to Improve UX with Machine Lea[r]ning: A Wonderful",
        "globalChunkIndex": 211
      }
    },
    {
      "id": "chunk-212",
      "text": "Changing Design",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "03. Algorithm-Driven Design: How Artificial Intelligence is",
        "globalChunkIndex": 212
      }
    },
    {
      "id": "chunk-213",
      "text": "— Chapter 01",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "04. CreativeAI: On the Democratisation & Escalation of Creativity",
        "globalChunkIndex": 213
      }
    },
    {
      "id": "chunk-214",
      "text": "Chapter — 07\nAppendix\nMore resources\n\n14312ChapterC 20Ct.Ipnoddu\nThere are a number of great resources available for diving further \ninto the world of design systems. The folks at StyleGuides.io have \nnot only assembled a comprehensive list of example style guides \nand design systems, but have also included relevant articles, \nbooks, podcasts , talks, and tools. Alex Pate has assembled a list \nof Awesome design systems on Github. And DesignGuidelines.co \nhas a list of examples, as well as readings and tools.\nFrom these resources, we’ve curated a list of design systems and \nstyle guides you may find helpful:",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "05. Project Phoebe",
        "globalChunkIndex": 214
      }
    },
    {
      "id": "chunk-215",
      "text": "About the Authors",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "21. Yelp",
        "globalChunkIndex": 215
      }
    },
    {
      "id": "chunk-216",
      "text": "Marco Suarez has helped shape the visual language, design systems, and \ncustomer experiences of companies like Etsy and Mailchimp. His work extends \nbeyond design to influence internal processes that scale across organizations. \nHe is also the co-founder of Methodical Coffee.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "MARCO SUAREZ",
        "globalChunkIndex": 216
      }
    },
    {
      "id": "chunk-217",
      "text": "Jina Anne is a leading advocate for design systems, having contributed to the \nevolution of systems at Amazon, Salesforce, Asana, and Google. Her work \nhas shaped foundational concepts such as design tokens. She is also the co-\nfounder of the Clarity Conference.\nKATIE SYLOR-MILLER\nKatie Sylor-Miller is Principal Engineer and Web Tech Lead at Square, and \nwas formerly Frontend Architect at Etsy. She specializes in design systems, \nweb performance, accessibility, and frontend infrastructure, and is passionate \nabout the craft of Staff Engineering. As an invited expert on the W3C Web \nPerformance Working Group, she helps guide browser development to improve \nWeb Performance APIs.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "JINA ANNE",
        "globalChunkIndex": 217
      }
    },
    {
      "id": "chunk-218",
      "text": "Diana Mounter is Head of Design at GitHub. Her approach blends systems \nthinking, inclusive design, and the perspective of code as a material in the \ndesign process.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "DIANA MOUNTER",
        "globalChunkIndex": 218
      }
    },
    {
      "id": "chunk-219",
      "text": "Roy Stanfield has played a pivotal role in developing design systems at Airbnb \nand Etsy. He currently serves as Principal Product Designer at Shopify.\nAbout Design Better\nHosted by Eli Woolery and Aarron Walter,  \nDesign Better explores creativity at the intersection \nof design and technology. Go deeper into design at \ndesignbetter.com",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "ROY STANFIELD",
        "globalChunkIndex": 219
      }
    }
  ],
  "metadata": {
    "category": "general",
    "tags": [],
    "confidence": "high",
    "last_updated": "2025-06-25T19:52:34.027Z"
  }
}