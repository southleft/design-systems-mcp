{
  "id": "BzK9RR-hSbJXbAvCOQwfG",
  "title": "PDF: laying-the-foundations-pdf.pdf",
  "source": {
    "type": "pdf",
    "location": "../../local-content-library/laying-the-foundations-pdf.pdf",
    "ingested_at": "2025-06-28T12:27:53.600Z"
  },
  "content": "\n\nAuthor and designer: Andrew Couldwell\nEditor: Meagan Fisher Couldwell\nPublished 2019. All rights reserved\nLaying\nthe\nFound—\nations\nTitle\n\nII\nCon— \ntents\n\nContents  III\nVIII \nForeword\nMeagan Fisher Couldwell\n10 \nIntroduction\nReal talk\nWho is this book for?\nThe role of development in design\nTechnology moves too fast for print\nSystem design is not a scary thing\nSystematic design\nThis book will help you and your team\n20\nChapter 1: \nWhat is a design system?\nWhy are design systems important?\nWhen do we need design systems?\nLeading the way\n26 \nChapter 2: \nselling a design system\nFind your partners\nLaying the foundations\nStart small, and adjust your pitch \naccordingly\nAt what stage do you sell?\nThe importance and quality of ‘the sell’\nA word on office politics\n\nIV\n80 \nChapter 4: \ndesign system model\nSpeaking the same language\nThe Foundations Model\nFoundations\nComponents\nPatterns\nTemplates and Pages\nDesign systems in product design\nA case study of a design system at work\nAllow for flexibility\n106 \nChapter 5: \nGetting started\nStart by identifying the problems \nWhere do we go from here?\nBe smart about which approach you choose\n38 \nChapter 3: \nLaying the Foundations\nPutting up scaffolding\nThe importance of brand in system design\nMarketing vs. product\nDigital Foundations\n— Mission, values, and principles\n— Brand identity\n— Brand tone of voice and copywriting\n— Formatting\n— Accessibility and inclusivity\n— Responsive design\n— Process\n— Design systems\nHow are brand guidelines different to \ndesign system documentation?\nMake it visible, make it count\nJust get it done!\nFlaunt it\nDon’t lose sight of why you’re doing this...\n\nContents  V\n114 \nChapter 6: \nAn Iterative approach\nFind your team\nInterface audits\nColour audits\nCode audits\nVisual audits\nWhat now?\nManaging the workload\nThe Frankenstein monster effect\nRefinement vs. exploration\n140 \nChapter 8: \nsystematising the design\nSet the system up for success\nYou need a design system library \nConstraints are not a bad thing\nTools for the job\nNaming conventions\nColour system\nGuidelines for colour\nLimited text styles\nEditable components\nCover all states of components\nPattern library\nDesign tokens and Sass variables\nDesigner access to code\nTracking and organising system tasks\n128 \nChapter 7: \nA wholesale approach\nDesign exploration\nGround your work in reality\nBuilding a visual language\nBuild and launch plans\nIt doesn’t have to be perfect\nWholesale design, and an iterative build \nand launch\nThe disruption factor\nRolling out a design system, responsibly\n\nVI\n220 \nChapter 10: \nGallery\nInspirational examples of great \ndocumentation\n242 \nChapter 11: \nMaintaining a design system\nWork with shared design assets\nWorking with patterns\nKeep documentation up to date\nKeeping the design and code in sync\nCode as a design tool\nKeep your team in the loop\nGuardians, ambassadors, and leaders\nClosing thoughts\n260 \nthe author\nAndrew Couldwell\nOwl Studios\nClub of the Waves\nAcknowledgments\nDedication\n180 \nChapter 9: \nDocument everything!\nMore than a style guide\nThe basics\nBetter together\nDon’t leave documentation until last\nDocument as you go\nWhat should you document?\n— Do’s and don’ts\n— Colour\n— Brand identity\n— Typography\n— Copywriting\n— Components\n— Patterns\n— Don’t forget the small things\n— Grid, layout, and spacing\n— Design tokens\nHow do you document a design system?\nGetting started, the easy way\nLiving style guides\nIf not a Google Doc, then what?\n\nContents  VII\nLet’s \nget \nstar— \nted\n\nVIII\nFore— \nword\n— by Meagan Fisher Couldwell\n@owltastic\n\nForeWorD  IX\nThere are many reasons why I’m so excited that you’re holding this book right \nnow. To start, Andrew has years of experience creating design systems for \neveryone from small, agile clients to big, complex teams — in fact, he was \ndoing “system design” long before we had a name for it, and well before it first \nappeared in the growing list of skills which designers are required to know.\nI, on the other hand, had long avoided thinking, reading, or talking about \nsystem design because it sounded big and terrifying and complicated. But \nconversations with Andrew about his approach made it feel simple, logical, and \n(believe it or not) fun to do. I’ve been telling him for years that he should write \na book to help demystify system design for others, which is a big reason why \nI’m so glad this book is finally in your hands.\nIf you think system design won’t work for your complicated team, or are \nconfused by the jargon surrounding it, or just want to take some small steps \ntoday to be better at your job, this book is going to be a godsend for you. It’s \nnot written on behalf of any company, or to make anyone look good, so it’s an \nhonest and unflinching look at the challenges and rewards that come with \ndesigning systematically.\nThis book covers — and goes beyond — the more commonly explored \ntopics surrounding how to create a design system. It also gives us a helpful \nframework for how we can work together to create better experiences, and \nshows us how to lower the barriers between different teams and roles.\nIn addition to drawing on his own 15+ years of experience as a web designer, \nproduct designer, developer, manager, and system design lead, this book \nincludes a wealth of research; it covers case studies, articles, and examples \nfrom dozens of different teams.\nAndrew often says “system design is really a term we use to talk about best \ndesign practices.” The knowledge packed into this book will not only improve \nthe way you create experiences, it will also empower you to build stronger \nteams and a better world. We can’t wait to see what you do with it!\n\n10\nIntro— \nduc—\ntion\nIntroduction\n\nIntroDuCtIon  11\nThis book covers what design systems are, why they are important, and how \nto get stakeholder buy-in to create one. It introduces you to a simple model, \nand two very different approaches to creating a design system. What’s unique \nabout this book is its focus on the importance of brand in design systems, and \ncreating documentation. It’s a comprehensive, practical guide that’s simple to \nfollow and easy on the eye.\nI’ve been designing and building websites, working on products, and creating \ndesign systems for over 15 years. During that time:\n• I’ve been the solo designer and developer at a company.\n• I’ve worked with small 1-5 person teams.\n• I’ve worked with large 10-100+ person teams.\n• I’ve led teams of designers.\n• I’ve worked in-house, remotely, and as a freelancer.\n• I’ve worked with and at small startups and large corporations.\nI’ve seen things go so wrong, so many times. I’ve learned from those \nexperiences, and worked with others to fix the problems we’ve encountered.\nI’ve spent a lot of time learning, assimilating, and distilling all that I’ve learned \ndown to its simplest form. I’ve sold the value of simple system design thinking, \nmodels, terminology, and values to designers, developers, and stakeholders.\nAfter years of this, I’m left with dozens of Keynote decks, Google Docs, design \nsystems docs, style guides, design files, code, scars, bruises, lessons learned, \nenemies, friends, and a head full of thoughts.\nI decided to do something meaningful with all that experience. I sincerely \nhope you enjoy this book, and that it helps you and your team! :)\n\n1212\nThis is real talk \nabout creating design \nsystems. No jargon, \nno glossing over the \nhard realities, and \nno company hat. \nJust good advice, \nexperience, and \npractical tips.\n\nIntroDuCtIon  13\nReal talk\nPerhaps my “real talk” approach is because of my roots: I was born and raised \nin the industrious north of England, where people value hard work and plain \nspeaking. Or perhaps it’s all my experiences — good and bad — that have \nshaped the way I think and talk about designing and building websites and \ndigital products.\nI don’t like jargon. I like to keep things simple. Nowhere is this more important \nthan in system design, where communication and collaboration are essential. \nThe simpler you keep things, the more successful you’ll be. This is a theme \nthroughout this book, from the design system model and terminology, to \npractical steps, to working with your team.\nI could tell you how to design, build, and document a design system for \nyourself, as a personal project. It would be awesome, but I doubt that’s a reality \nfor many people reading this book. Chances are you work on, or lead a team at \na company... Or you plan to.\nThe realities of working in-house at companies — especially large companies \n— are often very different from the rosy perspectives we read about on \nMedium and company blogs, and hear about in design talks. These stories \nare told by people wearing a company hat, who can only say generally positive \nthings about their experience. They don’t talk about office politics and other \nhard realities. I don’t work for anyone but myself. I’ll tell you — honestly \n— how to navigate the challenges of working in-house, with stakeholders, \ndeadlines, legacy problems (design, code, and people!), and all the other fun \nchallenges we encounter along the way.\nI’ve been in the creative trenches, fighting for the designers and developers on \nmy team, the brand, and the users. I’ve defeated the odds to create beautiful \nand meaningful work. It’s not always easy. In fact, it’s often very hard, and very \ntiring. Sometimes it even feels hopeless, but perseverance and the arsenal of \nknowledge you’ll learn in this book will set you in good stead to create the best \nwork of your career!\nWho is this book for?\nThis book is definitely more design-focussed, but we’ll be delving into the \nwhole process — which involves much more than just design.\nSelling, managing, and advocating are key to the success (or failure) of a design \nsystem. You can design a system in a matter of days, but you won’t get much \n\n14\nfurther without the support and collaboration of developers, product \nmanagers, and other stakeholders. This book will help you reach and \ncollaborate with these stakeholders.\nWe’ll cover brand and digital guidelines, and how to create, document and \nroll out a design system. This book will also prepare you for how to build your \nteam, and set your system up for success.\nBuilding, integrating, and launching a design system is arguably the lion’s \nshare of the work. We won’t be covering development processes or writing \n(much) code, but we’ll certainly look at the overlap of design and development. \nIt’s important that design and engineering teams work together, which is a \ntheme throughout this book.\nThe role of development in design\nA design system will go nowhere without developers. A beautifully designed \nlibrary of design components is useless if it lives only in design software and \ndocumentation. It has to be built, deployed, maintained, and scaled. Do you \nwant to create a design system? Developers are your new best friends (if \nthey’re not already, which they should be). \nDevelopment should always be part of the design process. Designers and \ndevelopers working in silo — or even physically separated from each other (in \nthe workplace) — is bad for team culture, as well as the quality and efficiency \nof the work.\nWith any form of digital design — but especially system design — I encourage \nyou to discard this (lazy) notion of ‘the developers will figure it out’. Involve \ndevelopers. Get them interested in building the system with you, not after \nyou’ve finished designing it. We’ll talk about this more throughout this book.\nTechnology moves too fast for print\nThis book intentionally avoids referencing specific tools or software, save for \na few exceptions. Technology evolves so fast that anything I reference may be \nobsolete by the time you read this! (Hello, it’s 2018/19 as I write this).\nThat said: the supporting website \n(01) for this book includes links to tools, \nresources, and articles relating to system design. They, at least, will remain \ncurrent.\n\nIntroDuCtIon  15\nSystem design is not a scary thing\nA good place to start is to discard this notion that system design is a scary \nprocess, or an exclusive club for the design elite. System design is nothing \nnew. Unlike responsive design, Sass, CSS Grid, or Flexbox — nobody invented \nsystem design. It’s just a term our industry has given to cover the processes \nand habits that lead to the most efficient digital design, development, and \nmanagement. That’s all.\nFeel better? Good :)\nSystematic design\nIt might be easier to view system design as ‘a systematic approach to design’.\nSystem design is about not tackling design problems in isolation, or as one-\noffs. It’s about considering versatile solutions that can be used repeatedly and \nconsistently throughout a product. It’s about not creating a different way to \nsolve the same or similar problem every time you come across it.\nA design system is the end result of a systematic approach to design. It’s the \nharmonious package of design, code, guidelines, and documentation that’s \nused to build consistent, on-brand, and efficient websites and products.\nThe sobering reality\nHere’s the thing — and, sorry, this is the brutal and honest truth: if you’re a \ndesigner working on websites, products or apps, and you’re not designing (at \nleast somewhat) systematically — you’re doing more harm than good.\n• Do you choose a different font, weight, or size for every header?\n• Are you creating a different button every time you need a call to action?\nEvery time you design a different (unnecessary) solution, you’re adding more \ncomplexity to the code. This leads to legacy problems. Future edits will be \nharder to make. Shipping new features or iterations will take longer. Page \nload times will increase. The user experience can be diminished. You get the \npicture.\n01. designsystemfoundations.com\n\n16\nYou’re halfway there!\nThe good news is, you may already be designing systematically without even \nrealising that’s what you’re doing.\n• When you decide to use only two typefaces...\n• When you use title case instead of sentence case in certain scenarios...\n• When you define a set of text styles or pick a colour palette...\n• When you design to a consistent grid or use specific spacing...\n...and stick* to those design choices — you’re designing systematically.\nIf you design systematically, you’ll be a better digital designer for it. You don’t \nnecessarily have to create a design system, to ‘do’ system design! Not every \nproject requires a design system. We’ll get into this more throughout this book, \nbut just keep in mind: even if you don’t need a design system, don’t currently \nhave one, or your company won’t grant you the time to create one, you should \nstill take a systematic approach to design.\n* To clarify: by “stick”, I don’t mean permanently. All design choices are subject to \nchange and iteration.\nThis book will help you and your team\nThis book is about levelling up as a digital designer by taking those extra steps \nto go from designing systematically to creating a design system.\nThis book will help you formulate and document the design choices you and \nyour team make. After all, a system wouldn’t be much of a system without \nrules. Remember: the systematic design choices you make are no good just in \nyour head — especially if you’re working with a team.\nWe’ll look at the importance of brand in system design — first by creating \ndigital brand guidelines, then building design systems upon those solid \nfoundations.\nYou’ll learn about creating a design library of system elements that will enable \nyour design team to work quickly, efficiently, and consistently.\nI’ll coach you on how to adjust your design system pitch to different \nstakeholders at your company in order to gain the support and momentum you \nneed to succeed.\n\nIntroDuCtIon  17IntroDuCtIon  17\nYou can design a \nsystem in a matter of \ndays, but you won’t \nget much further \nwithout the support \nand collaboration of \ndevelopers, product \nmanagers, and other \nstakeholders.\n\n18\nWe’ll talk (a lot) about the importance of finding your team, and working \ntogether to identify the problems in your product and processes — and \npractical things you can do to fix them. We’ll even look at two different \napproaches to these problems: an ‘iterative’ approach, and a ‘wholesale’ \napproach.\nAnd throughout this book, I’ll share lots of real examples of design work, \ndocumentation, and best practices to illustrate the concepts covered.\n\nIntroDuCtIon  19\nThank you for reading my \nbook! I hope you enjoy it \nand find it useful. If you do \nlike it, I’d really appreciate \nit if you’d recommend it to \nyour friends, colleagues, \nand followers :)\n— designsystemfoundations.com\n@andrewcouldwell\nIntroDuCtIon  19\n\n20\nWhat is a design system?\n20\n01\nWhat \nis a \nDesign \nsys— \ntem?\nLAYInG tHe FounDAtIons\n\nWHAt Is A DesIGn sYsteM?  21\nA design system is hard to summarise. It’s perhaps easier to explain why \ndesign systems are important, and what they help us to do, than to explain \nexactly what they are. However, here’s my attempt at a definition:\nDesign systems bring order and consistency to digital products. They help \nto protect the brand, elevate the user experience, and increase the speed \nand efficiency of how we design and build products. They are a source of \ntruth and a system of record for our design decisions. They hold us to high \nstandards, keep teams on the same page, and help to onboard new team \nmembers. They document the why, when, where, and how.\nI should stress that the design, build, and ‘rules’ of a system are not set in stone \n— they are a constant work in progress, open to iteration to improve, adapt, \nand scale.\nDesigning and building on-brand, quality, and consistent digital products \nat scale is hard. It’s even harder when your designers and engineers span \ndifferent product teams, departments, and locations. Success requires more \nthan an assortment of Photoshop or Sketch files, style guides, a print brand \nbook, pattern libraries, and whatever else your team may be working from. You \nneed a single source of truth.\nWhy are design systems important?\nHere are just some of the things design systems help us with:\n1. Efficiency and speed\nDesign systems allow us to work faster and more efficiently. They streamline \nthe design and development process — decreasing the amount of time it takes \nto design, build, and ship new websites, products, and features. They also \nenable teams to rapidly prototype and experiment with ideas in high fidelity — \nultimately saving the business time and money.\n2. Consistency and user experience\nDesign systems help us design and build on-brand, quality digital products. \nRather than working with a variety of styles and slightly differing approaches, \nteams are able to follow guidelines and stay consistent. This ensures interfaces \nare more predictable and accessible, which fosters trust in users and helps \nwith conversion and retention.\n\n22\n3. Creating stronger brands\nDesign systems help weave brand identity throughout a product in a \nconsistent and maintainable way. I’m a big believer that brand plays a crucial \nrole in design systems. This is why I recommend thinking and designing \nholistically — considering the brand and product as a whole, as opposed to \ntackling problems one-by-one and hoping the pieces will fit.\n4. They free us to focus on what matters\nDesign systems help designers and engineers spend less time needlessly \ncreating the same things over-and-over — slightly differently every time — and \nmore time focussing on user research, problem-solving, and building great \nproducts. They also help keep feedback focussed on the user experience, as \nopposed to debating padding, colours, and type choices.\n5. Organisation\nDesign systems keep our work organised, which makes everything easier \n— from accessing common design elements in a master library, to using a \nuniform approach for the structure and naming conventions in the code, to \nease of maintenance, iteration, and syncing of the design and code.\n6. Speaking the same language\nDesign systems help our teams communicate more clearly by establishing \nnaming conventions and consistent terminology across the design and code. \nWe’ll look at a simple design system model and terminology in the “Design \nSystem Model” chapter.\n7. Source of truth\nDesign systems and documentation are a source of truth for the whole team. \nA well designed, implemented, and maintained design system sets high \nstandards for your product and your process. Everyone becomes accountable \nfor upholding these standards.\nWhen do we need design systems?\nDesign systems are always useful, but the ‘need’ for a design system varies \ngreatly depending on the nature of the business, product, or project.\nIt’s a reasonably common experience for design agencies, small companies, \nand freelancers to design and build without a design system, then move on. \nThis is often fine, and it works for many companies. The resulting product may \n\nWHAt Is A DesIGn sYsteM?  23\nbe online for only a couple years before it’s replaced when change is needed. \nThere’s nothing inherently wrong with that process. It’s cost effective, simple, \nand fast.\nDesign systems are useful when companies aim to iteratively work on a \nproduct over time — to not just build once, and replace later. This is why \nthey’re more frequently needed for products than marketing websites.\nDesign systems are especially useful when a team of people are working on the \nsame product. I can’t stress this point enough.\n“Software is often built by teams – sometimes incredibly large teams \n– of people. The challenge to create coherent experiences multiplies \nexponentially as more people are added to the mix. Also, over time, \nno matter how consistent or small a team is, different people will \ncontribute new solutions and styles, causing experiences to diverge.”\nQuote taken from an article (1.1) by Karri Saarinen (1.2), a principal designer \non the Airbnb design team.\nStartups are a little different. For startups, a design system can be a low \npriority, because everything tends to be wide open to radical and fast changes \nof direction. They rarely have the stability, security, budget, and timeframes \nthat established companies have. This isn’t to say startups shouldn’t be \ndesigning systematically; they just need to be more realistic about their \npriorities. That said... Start as you mean to go on! If you create a design system \nfrom the start, you’ll avoid legacy problems later on.\nA recent trend is to bring design and development in-house. And the larger the \ncompany, the larger the product teams (for better or worse).\nMy time spent working with in-house design environments/people/teams/\ncultures taught me a lot about the importance of design systems, and the \nintricacies of designers, developers, and product managers working together.\nWorking on products which involve lots of people requires a different \napproach than projects with smaller, leaner teams. It’s more complicated, and \n1.1. airbnb.design/building-a-visual-language/\n1.2. karrisaarinen.com\n\n24\nthere’s more that can go wrong. The expression: ‘too many cooks spoil the \nbroth’ becomes a little too real at times. Every member of the team has their \nown preferences about what typefaces, colours, buttons, formatting, spacing, \nframeworks, or naming conventions you should use.\nIt gets messy, if you allow it.\nDesign systems bring structure, accountability, and order to this chaos.\nLeading the way\nFor me, making the transition from freelance design into an in-house design \nleadership role was a learning experience, to say the least. Overseeing other \npeople doing the work — or working with a team of people on the same \nproduct — is very different to being the one person doing the work! \nDesign leadership and teamwork go beyond just handing-off design mockups, \nstyle guides, and specs. You need to find a way to create — and effectively and \nopenly communicate — common, shared design guidelines, so everyone works \nin the same direction. The alternative is everyone does their own thing — \nreinventing the wheel, bloating the code, and damaging the brand and product \nuser experience. And sometimes, falling out in the process.\nWhen you work on a team, your design thinking is useless if only you know \nabout it, or if it’s disruptively different from the approach of your colleagues. \nYou need to work together in the same direction. As other chapters in this \nbook will demonstrate, a design system genuinely helps you to do this.\nThe real test...\nThe real test of a design system is whether the design and build mirror each \nother, and if you and your team consistently use the elements you establish \nrather than needlessly creating new ones.\nA successful design system liberates your team from reinventing the wheel. \nIt allows you to focus on what really matters: learning and improving digital \nproducts to meet user and business goals. Heck, you might even create \nsomething amazing that you’re all proud of!\n\nWHAt Is A DesIGn sYsteM?  25WHAt Is A DesIGn sYsteM?  25\nSolving problems \nis a big part of the \nvalue proposition of \na design system. \n\n26\nSelling a design system\n26\n02\nsell— \ning a \nDesign \nsystem\nLAYInG tHe FounDAtIons\n\nseLLInG A DesIGn sYsteM  27\nSo far, I’ve talked about all the advantages a design system offers, many of \nwhich you’ve probably read about before. But before we get into design system \nmodels — and how to go about creating a design system — I want to take a \nminute to get real. Designers romanticise design systems in countless articles \nonline, and we make it sound so easy in our case studies. But the reality is:\n• They’re time-consuming to build and establish.\n• They take up a lot of development resources.\n• They distract from working on any roadmaps of features.\n• They’re tricky to maintain.\n• Designers can see them as a threat to their creativity.\n• And, they require a lot of stakeholder support to succeed.\nHonestly, selling a design system could well be the hardest part of the process!\nYou need to convince a wide range of people  — from the bottom to the top of \nthe chain of command —  that it’s worth it. And it is, but I just listed a lot of \nlegitimate reasons not to create a design system! And these are just some of \nthe reasons why you’ll be told: “No”.\nTo avoid being told ‘No’, you need to learn how to teach the value of design \nsystems — and to earn the support and trust of stakeholders — or your design \nsystem is going to go nowhere.\nFind your partner(s)\nTo illustrate this process, I’ll share an example from my real-life experience of \nselling design systems at a company.\nAt this company, I had a partner in crime called Nick Stamas (2.1). Nick had \nalready started selling the idea of a design system before I came onboard. He \nhad a smart approach: rather than lead with: “let’s create a design system!”, \nhe gave presentations to a number of engineers from different product \nteams about the advantages of a centralised code base, and promoted better \ncollaboration between designers and developers.\nI was only an observer at these meetings. As a fellow design lead at the same \ncompany, I had a vested interest in this presentation going well, and I was \ngauging the response from the attendees. I recognised that this was the type \nof support and interest we’d need — to inspire, and to build — from a range of \nstakeholders.\nIn essence, Nick was sowing the seed of the idea of a design system by simply \n\n28\nhighlighting common problems most developers can identify with and \ntailoring his presentation to different teams. He was getting developers excited \nabout things they care about!\nTo quote from an article \n(2.2) Nick wrote about this process:\n“Sell a vision that everyone can buy in to. Selling is a process, \nprobably more than a single meeting. Look for teaching moments. \nUse your storytelling skills. Show your team that a better way is \npossible. Come up with a memorable name and say it a lot. Get people \nexcited with a splashy presentation.”\nAside from these presentations, Nick had made a start on a design system \nwhich he called Plasma \n(2.3).\nNick’s early approach was to begin with code — not to mock up anything \nin design software. He was building the bones of a code base in React by \ndocumenting basic system components like buttons and form inputs. He \ndidn’t focus on design or style. Instead, he focussed on getting the basics \nright, building strong foundations, and creating a semantic system for \nnaming conventions.\nOver time, he shared his progress with developers , one-by-one ,   getting them \nexcited about it. He started inviting other developers to contribute. His intent \nwas to prove that a simple, consistent, shared code base could be integrated \nand maintained effectively and efficiently within his team and product, and \nultimately across different teams and in different products.\nNote: Nick’s advantage was his diverse development and design skillset. He spoke \nthe same language as engineers, which helped him pitch to them. Everyone has \ntheir strengths. Play to yours, and your team’s. You don’t have to start a design \nsystem in code. The important message here is to get people who will be involved \nin the system excited about it! That often means proving your point, or earning \npeople’s trust.\n2.1 nickstamas.com\n2.2 uxdesign.cc/selling-a-design-system-at-your-company-74cb2bc97195\n2.3 roomfive.net/plasma-design-system/\n\nseLLInG A DesIGn sYsteM  29\nMore than design and engineering\nIt’s important to note: in these early stages, Nick was also working with his \nlarger product team — including product managers and designers — to \nidentify problem areas in their products and processes that the design system \nwould address.\nSolving problems is a big part of the value proposition of a design system. \nThe more powerful stakeholders won’t care about what the product looks like, \nor your code base. They will care about solving problems, or more specifically, \nthe business success these solutions lead to.\n‘Finding your partners’ involves gaining support from all stakeholders, not just \ndesigners and developers. We’ll come back to Nick’s story, and this process of \nforging partnerships, throughout this book.\nLaying the foundations\nIn parallel to Nick’s story so far — as Nick was highlighting the need for a \ndesign system — I was working on what I called the ‘Digital Foundations’, \nwhich we’ll cover in the next chapter. For now, think of these as ‘digital brand \nguidelines’.\nThese Digital Foundations were intended to act as a source of truth for our \nvalues and to guide the design, content, and build of all of the company’s digital \nproducts. I based this work on the company’s existing brand book*, which had \nbeen created with print and physical spaces in mind. After extrapolating what \ncould successfully be applied to digital, I went on to greatly expand it to cover \ndigital product requirements.\n* Big brands commonly create — or commission an external agency to create — \na ‘brand book’, which acts as a ‘manual’ for everything created for that brand.\nIt’s important for a large company to have brand guidelines to prevent \neveryone from doing their own thing, and to keep products from spiraling out \nof control. With the creation of these ‘Digital Foundations,’ our guidelines now \nexisted, but we hadn’t put them to work yet. Brand guidelines are of no use \non their own. They need to be practically implemented and adhered to, and \ndesign systems give us the perfect opportunity to do so.\nSo naturally, after a period of shadowing each other’s work, there came a point \nwhere Nick and I teamed up to collaborate on a design system. Nick directed \nthe engineering and planning, and I led the design and creative direction. We \n\n30\ncombined the Digital Foundations with the product needs that Nick’s team \nhad brainstormed, and the code Nick had written. Working with these strong \nfoundations, it didn’t take long for an on-brand, problem-solving, and product-\nfocussed design system to take shape. \nWe’ll delve more into the process of creating a design system later, but for now, \nyou can read a design case study article \n(2.4) about the Plasma design system \ndescribed here.\nStart small, and adjust your pitch accordingly\nContinuing our story: in parallel to the design and build work, we continued to \npresent to different stakeholders. Selling a design system never really stops, no \nmatter where you are in the process. We started small, working our way up the \nchain of command, gaining support and momentum as we went.\nIt’s impossible to say whether pitching the design system from top-to-bottom \nor bottom-to-top will work best at your company. It depends on the intricacies \nof different work culture, politics, personalities, and hierarchies. Have a think \nabout which will be more effective at your company. And remember, the point \nis to tailor your pitch to your audience. You want to excite as many people as \npossible with all the ways a design system will benefit them.\nFrom junior designers to design leads, from front-end developers to \nengineering leads, and from product managers to heads of departments: we \nspoke to a wide range of stakeholders, adjusting our pitch depending on who \nwe were talking to. Presentations were either broad, or focussed on design and \ncode, but they all emphasised the value of design systems. For example:\nProduct managers, leaders, and heads of departments...\n...care about how fast the team can ship products, and the impact the work has \non business goals, sales, reports, and analytics.\nSell them on how a well-established design system allows for a faster, more \nefficient shipping cycle. Convince them of how taking the time to create a \ndesign system now will enable faster product releases and iteration, as well as \na better user experience going forward. In a ‘perfect world’, this increases the \npotential for growth, sales, and analytics trending in the right direction.\n2.4 medium.com/@andrewcouldwell/plasma-design-system-4d63fb6c1afc\n\nseLLInG A DesIGn sYsteM  31\nAnd remember, a really successful system will also unify the teams working \nwith it, creating a healthier work culture, staff retention, and tool for recruiting \ntalent. The leaders in your company should care about these things!\nEngineers...\n...care about a unified code base, version control, consistency, performance, \norganisation, efficiency, and naming conventions. \nSell them on how design systems will help bridge the gap between designers \nand developers, and their positive impact on all the engineering factors they \ncare about. If you’re not comfortable speaking their language; work with a \ndeveloper on these engineering pitches.\nDesigners...\n...care about aesthetics, brand, typography, colour, user experience, and \nshipping beautiful products, which stay true to their original vision.\nGet them excited about how great the end product will look! Anything relating \nto the front-end being a ‘pixel perfect’ reproduction of their designs will \nbe music to their ears. Be careful not to scare the more visual designers on \nyour team , as some will view design systems as a threat to their creativity. \nInstead, focus on how quickly and efficiently they can design with pre-defined \nsystem components in their design tools of choice. The system will curb the \nintroduction of rogue elements like buttons and form inputs, freeing them \nto focus on more interesting tasks like problem solving, layout, and user \nexperience. The best designers on your team will be excited about this, and it \nwill be a valuable learning experience for everyone else.\nWe’re all in this together\nFor all parties, be sure to pitch the importance of this being a collaborative \nteam effort. Some may worry their voice won’t be heard, or that the system will \ngo against how they like to work. A good design system won’t be designed and \nbuilt by only a few people, then closed to changes from everyone. It will evolve. \nIt requires everyone’s input and support, over time, in different capacities. \nIt will help everyone, and it will help the business. It’s something everyone \nshould be proud of.\nThe following screenshot \n(fig 2.1) is from a deck I used to present to an \nexecutive when I was the System Design Lead at a previous employer. This \nexecutive was not a designer or a developer, but a powerful individual with \nsignificant influence and connections. A fellow design lead at the company \n\n32\ntold me this person would be interested in the digital brand guidelines I was \nworking on, and could be a powerful ally for our design system initiatives. \nWith their advice, I contacted the executive, set a date/time/place for a \nmeeting, and started preparing this presentation.\nFIG 2.1 Presentation deck\nThis particular stakeholder didn’t know or care about what designers were \ndoing in Sketch, or how developers were refactoring code. The way to reach \nthis person was to pitch:\n• What is the value of a design system to our company?\n• The design system saves us time and money because _____ (e.g. we can ship \nupdates faster, as engineers won’t have to write as much new code).\n• The design system makes us/you look good because _____ (e.g. we can ship \nmore updates per quarter, which could have a positive impact on sales).\n• The design system sets us apart from our competition because _____ \n(e.g. our competition doesn’t have a consistent brand across their digital \nplatforms, so we can stand out from the crowd with a stronger brand and \nuser experience).\n• Our competitors are doing _____, which helps them because _____. (e.g. \nThey are publicly sharing their design system, which helps them recruit a \nhigher-caliber of designer and engineer).\n\nseLLInG A DesIGn sYsteM  33\n• How can you help us achieve this? (e.g. We need your endorsement. And \nwho else do you recommend we talk to, to make this happen?).\nProve to them how what you’re pitching helps the company, and makes us (i.e. \nthe stakeholder and the company at large) look good in the process! It’s hard \nfor managers and executives to turn down something that makes them look \ngood, when often all they have to do is say “Yes” and grant you an endorsement \nand a few connections. It’s a win-win for everyone.\nAt what stage do you sell?\nThis chapter on selling a design system was one of the hardest to place in \nthis book. There is no strict linear structure to this book, but ‘selling a design \nsystem’ doesn’t belong at the end — because you don’t want to put in a lot of \nwork only to be told “No” by someone higher up the chain of command. And it \ndoesn’t belong at the start, because you don’t know yet what you’re selling. You \nfirst need to understand what a design system is, why it’s valuable, and what \nproblems you’re solving in order to build and present your case.\nThe key thing to understand is: selling a design system isn’t a stage of the \nprocess. It’s ongoing. You need to always be advocating for the system, or it \nwill fail. Even — and perhaps especially — after you’ve successfully designed, \nbuilt, and integrated the system.\nAll it takes is a powerful stakeholder to come on board and decide they don’t \nlike a systematic approach to design, and the whole thing comes crashing \ndown. Believe me, I’ve seen this happen. However, if you’ve been gathering \nsupport throughout the conception and creation phases, the design system \nwill have a better chance of weathering organisational changes and individuals \nwho oppose it.\nThe importance and quality of ‘the sell’\nYou need a convincing pitch to sell your vision, and you need to present it \npassionately and concisely — as some stakeholders’ time and attention can be \nlimited.\nAt large companies with more complex hierarchies (and the politics that come \nwith that), I like to think of it as being well armed before going into battle. \nYou stand a much better chance of being taken seriously if you build up an \narsenal of data, problem statements, and industry examples to demonstrate \nyour points, as well as having the backing of a small army of supporters all \nchamping at the bit to get started.\n\n3434\nIf you believe in \ndesign systems and \nwant to see one thrive \nat your company, you \nneed a compelling \ncase that’s tailored to \nyour business, team, \nand user needs. \n\nseLLInG A DesIGn sYsteM  35\nIt’s easy for higher-ups to say no. Very easy. As I mentioned earlier, creating \ndesign systems can be involved, and therefore expensive to the company.\nSometimes, projects like design systems are rejected with good reason. The \nmore experience you get in the tech industry, the more you understand the \nimportance of saying no. Creating new things just for the sake of having \nsomething new often leads businesses down the wrong path. Just as we \nshouldn’t create new product features because one person ‘thinks it would be \ncool’, we also shouldn’t create a design system ‘because everyone else is doing \ni t’.\nSo, if you believe in design systems and want to see one thrive at your \ncompany, you need a compelling case that’s tailored to your business, team, \nand user needs. This helps your stakeholders to make informed decisions.\nIn the “Getting Started” chapter we’ll cover how to build a compelling case \nby investigating what problems exist in your product and team processes, \nand communicating how a design system can help to solve those problems. \nMatching problems to a potential roadmap of solutions can be a compelling \nway to gain stakeholder support and turn “No” into “Yes”.\nA word on office politics\nEvery stakeholder wants something different. Some focus purely on the \nbusiness needs. Some care most about customer happiness.\nAnd — let’s be honest — others may be driven by a selfish motivation. I’ve \nseen employees driven by something as trivial as taking credit, winning an \naward, or gaining a portfolio piece. Others have more toxic incentives, and \nwill make poor decisions to ‘earn’ a promotion at the expense of their team. \nUnfortunately, you have to navigate these people and work around them, or \nfind a way to make their goals fit with your broader goal of creating better \nproducts.\nHere’s my advice on office politics: try to understand what’s really driving \neveryone involved in your product.\nYour primary goal should be to rally those with pure motivations to join your \ncause.\n• For stakeholders who care about business needs; play up the speed of \niteration that comes with design systems.\n\n36\n• For designers who want to make something beautiful for your users; \nadvocate for the quality output that comes with a well-crafted library of \nelements.\n• For developers who want well-performing code; celebrate the efficiency of a \nconsistently designed interface.\nIf you are passionate and well-informed, you’ll build a team of like-minded \nadvocates that can defeat any of the self-involved office politicians who might \ntry to stand in your way.\nIt may also be possible to convince those who have selfish motivations that \na design system will make them look good, help them win an award, or gain \nthem the promotion they’re after — in which case they could become its \nbiggest champion. The point is to understand what’s driving your stakeholders, \nand work with them accordingly.\nCreating a design system is a process. It’s a long-haul — and often expensive — \nproject that takes up a lot of time and resources which involves more people in \nyour organisation than just designers and developers.\nIt stands to reason that design systems are easier to implement at smaller \norganisations. A smaller design team will create less rogue design elements, \nand a smaller engineering team means less friction in the code base. There are \nalso fewer people with the word ‘manager’ in their title, which often means \nthere are fewer opportunities for things to go wrong. There’s less need for buy-\nin or permission, which means there’s greater potential for faster progress.\nLarger organisations are a different animal. More hierarchy means more \nchannels for decisions to go through to be approved and implemented. Think \nabout what happens when there are dozens — even hundreds — of designers, \nengineers, and managers split across multiple teams, all working on the same \nfamily of products. Some of those teams may even be remote, nationwide, or \ninternational.\nIt gets complicated.\nThis isn’t intended to scare you, but rather to provide a dose of reality from \nthe trenches of my real-world experience. As I said in the beginning of this \nchapter, we romanticise about design systems, and we make it sound so easy. \nHopefully, now that we’ve explored some of the challenges of creating a design \nsystem, you’ll be better armed to deal with them as they arise.\n\nseLLInG A DesIGn sYsteM  37\nI admit selling a design system is hard work, and it’s not the sexy part that gets \nshared on Dribbble or Medium, but it’s important.\nIn summary\n• Start small.\n• Be prepared.\n• Identify the problems you’re trying to solve.\n• Do some (enough) impressive design and build work to get people talking.\n• Make friends and build a team of people excited to work with you.\n• Come up with a cool name, and create a sexy presentation.\n• Tailor your pitch according to your audience.\n• Earn trust and support.\n• Be an advocate and a guardian for the system, and inspire others to do the \nsame.\n\n38\nLaying the foundations\n38\n03\nLaying \nthe \nFound— \nations\nLAYInG tHe FounDAtIons\n\nLAYInG tHe FounDAtIons  39\nIt’s easy to explain how brands and products go astray, especially nowadays \nwith the trend of staffing huge in-house design teams with dozens of designers \nand engineers. \nIt takes a dedicated (and rare) kind of leadership to unify a team of individuals. \nIn sport, it’s the job of a coach to condition their players to adopt team tactics \nand play as a unit. In design and development, our teams are often so large, \ndisparate, and constantly changing that we usually can’t rely on one manager \nto get us all on the same page.\nInstead, we can use guidelines for our brand, design, and code — as well as a \nclearly defined set of values and principles — to help us all work in sync. \nMy dad was a quantity surveyor; it was his job to evaluate building plans to \nassess the risk and cost required to create a solid structure. In many ways \nthis isn’t so different to what I do as a web designer and developer. Perhaps \nit’s because of his influence that I tend to think of my work in terms of \nconstruction, and why I believe the phrase ‘laying the foundations’ is a great \nmetaphor for how we should think about setting up brands, products, and \nteams for success. \nIn order for teams to work together to create great products, they need \na strong foundation to build on. Just as a building built on sand won’t hold \nup as well as one built on stable foundations, a product built with a poorly \ndefined structure will quickly start to have issues. A solid set of guidelines \nand principles helps us achieve the cohesiveness, sturdiness, confidence, and \nscalability we need.\nIn this chapter, we’ll focus on how to create these digital brand guidelines and \nprinciples.\nPutting up scaffolding\nI want to be as real as possible in this book, which is why I’m going to be \nblunt for a minute. As design systems become more trendy, many design \narticles and case studies give idealistic accounts of creating beautiful design \nsystems, and sometimes they pass over the ugly, gritty details. This can leave \nmany designers feeling like a systematic approach won’t work for their team, \nbecause their team or product has too many issues to address. Perhaps you \ncan’t just start from scratch with a shiny new system, as many seem to do in \ntheir polished case studies.\nIn keeping with my construction analogy: in a perfect world, you want to ‘lay \n\n40\nthe foundations’, then build a beautiful ‘building’ (i.e. a design system and \nproduct) upon those foundations. Other times, it’s just not that simple. You \nmay have to deal with a crumbling structure that’s already in place. Out with \nthe old and in with the new isn’t always an option.\nIf you’ve inherited a mess and your team’s decided enough is enough, \nsometimes you can take a wrecking ball to it and clear the way for a fresh start. \nBut what should you do if you don’t have that luxury, and have to work with \nwhat you’ve got? In these cases, you’ve got to build scaffolding around your \nexisting structure — stabilising, stopping the rot, and renovating it over time.\nWorry not. Whether you’re facing a nice empty plot of land, a wrecking ball, \nor putting up scaffolding, the principles in this chapter will help you and your \nteam.\nThe importance of brand in system design\nI’m a big believer that brand is a core component to a design system. It’s \nwhy we spend so much time and money on building unique design systems. \nWithout a unique brand, an off-the-shelf, white-label system (e.g. Bootstrap \n3.1) would do the job.\nYou likely don’t want to use an open-source design system because it doesn’t \ncommunicate your brand story effectively. It might have everything you ‘need’, \nbut you want to create something that gives your brand a unique, strong, and \nfocussed voice to set you apart from your competitors.\nLet’s look at a scenario where brand guidelines and design systems work well \ntogether.\nMarketing vs. product\nProduct design and web design are two distinct disciplines. You can’t — or \narguably shouldn’t — apply the same design methodologies or design systems \nto designing a product as you would to marketing design. Websites and \nproducts often have very different business objectives, use cases, and target \naudiences.\n3.1 getbootstrap.com\n\nLAYInG tHe FounDAtIons  41LAYInG tHe FounDAtIons  41\nBrand foundations \nhelp to keep \neveryone on the \nsame page, speaking \nthe same language, \nand working as \na team — rather \nthan a collection of \nindividuals doing \ntheir own thing.\n\n4242\nFIG 3.3 Dropbox product\nFIG 3.1 Dropbox brand\nFIG 3.2 Dropbox marketing\n\nLAYInG tHe FounDAtIons  43\nTake Dropbox, for example, the bright colours, extreme spacing, large buttons, \nand dramatic typeface Dropbox use in their brand \n(fig 3.1) and marketing \nwebsite \n(fig 3.2) wouldn’t work in their product.\nDropbox’s marketing website is loud and confident, but their product succeeds \nby running quietly in the background — simply and efficiently. The last thing \ntheir product should be is loud, so it uses lighter colours, more compact \nspacing, smaller buttons, and a more reserved typeface, as seen in \nfig 3.3.\nHowever, some things are inherent throughout all of Dropbox’s digital \nproperties — like their use of their brand blue colour, their logo (or a \ncompact version of it), the odd illustration, sentence case, and certain other \nguiding principles. Their website and product are very different, visually and \nfunctionally, but there’s just enough similar about them to unify them under \none brand. And that’s very much by design.\nBrand guidelines help companies like Dropbox unify their marketing, \nproduct, advertising, social media, copywriting, illustrations, icons, \nphotography, and so on.\nThe threads that tie these different assets together need to be documented. \nThey are the brand foundations — the pillars that run through each floor of \nyour building, holding the whole thing together. Brand foundations help to \nkeep all designers and engineers at a company on the same page, speaking the \nsame language, and working as a team — rather than a collection of individuals \ndoing their own thing.\nDigital Foundations\nI call these digital brand guidelines “Digital Foundations”. Digital Foundations \nare different from traditional brand guidelines, for reasons I’ll go into shortly. \nWhy give them the name Digital Foundations? Because it’s memorable. It \ndifferentiates digital assets from other brand assets like print materials or \nyour company’s physical space. It helps to reinforce the idea of ‘laying the \nfoundations’ for creating great products, and it works with our design system \nmodel*. Digital Foundations govern much of the foundational layer of the \nmodel, and guide the design of components and patterns too.\n* We’ll delve into the design system model in the next chapter.\nTraditional brand guidelines typically cover the do’s and don’ts of logo, colours, \nart direction, brand values, and tone of voice. They are applicable to everything \n\n44\na company does. Some companies might publish these guidelines in a ‘brand \nbook’. Some companies produce a simple PDF.\nDigital is different. The same principles we apply to physical spaces and print \nmediums don’t always work for digital, and there are some considerations that \nonly affect digital. Factors like accessibility and user experience impact things \nlike the colours we use (e.g. blue for navigation, red for errors, and green for \nsuccess, etc.). There are other considerations such as typography, animation, \ngrids, responsive design, different platforms and operating systems, \nlocalisation, formatting, animation, load times, etc. which are unique to the \ndigital experience.\nWhere a brand book typically comes in print or PDF forms, the ever changing \nnature of digital experiences requires a more — well — digital approach. \nDigital Foundations are better suited to a dynamic, accessible, and easily \neditable digital form. Some companies choose to make their digital brand \nguidelines public, and we’ll look at a few of those in a bit. Others are private — \nfor employee eyes only.\nLet’s take a look at some of the things Digital Foundations cover.\nFIG 3.4 mozilla.design/overview\n\nLAYInG tHe FounDAtIons  45\nMission, values, and principles\nEveryone who works at your company should be aligned on what your \ncompany does, its core values, and its mission. Who is your target audience? \nWhat are your design and engineering principles? You want to align your team \nwith a common vision, set of standards, and way of thinking.\nMozilla has a page introducing their brand, mission statement, what they \nstand for, and their design principles \n(fig 3.4).\n“Mozilla is the champion for a healthy internet, one that is open and \naccessible for all, both technologically and culturally.”\nFIG 3.5 design.firefox.com/values/\n\n46\nFirefox, a product of Mozilla, builds upon its parent company’s brand with \ntheir own design values tailored to their products \n(fig 3.5).\n“As we design new features for our existing products, and create new \nproducts,  we  find  ourselves  asking  —  is  this  Firefoxy?  Is  what  we’re  \nmaking a clear expression of what it means to be Firefox?”\nWhile it’s not sourced from digital brand guidelines (or design system \ndocumentation), I’d be a fool not to share the following stellar example of \nmission and values in a digital space. Basic, a design agency in the United \nStates, created a website called Basic Culture \n(fig 3.6), dedicated to sharing \ntheir ‘Culture Manual’. While the content is intended for internal purposes, \nit’s very much a statement to the outside world of ‘we do awesome work, come \nwork with us!’. Aside from the beautiful and memorable design and quirky \nanimations, they confidently state their mission, values, and philosophies in a \nmemorable and inspirational way — what better way is there to present such \ncontent?\nFIG 3.6 culture.basicagency.com\n“Do work you’ll be proud of. Work hard while doing it. Have fun, \nalways. Don’t wait for permission. Be bold and try things. Mistakes \n\nLAYInG tHe FounDAtIons  47LAYInG tHe FounDAtIons  47\nFIG 3.8 culture.basicagency.com/our-way/\nFIG 3.7 “How we think”\n\n4848\nCreating values and \nstandards as a team \nis a great way to open \nup a positive dialogue \nand momentum that \nyou can take into \nfuture design system \ninitiatives.\n\nLAYInG tHe FounDAtIons  49\nhappen. Learn from your mistakes. Be real. Be better. Love what you \nd o.”\nI couldn’t agree more with this mission statement (above).\nThe content you define in this section of your Digital Foundations has to \ncome from somewhere. Perhaps your company already has something similar \nfor the brand and company at large. If so, you should also document these \nvalues and make them accessible to your team — it all helps to foster a better \nunderstanding of the company you work for. But consider that any existing \nbrand values may be written with consumers, business objectives, and the \nphysical world in mind. You might want to write new values specific to design, \nproduct, technology, and a digital audience.\nEarly in the formation of your Digital Foundations, gather a group of people \nwho best represent the diversity of teams working on digital products at your \ncompany — stakeholders, designers, copywriters, developers, marketing, \nproduct, etc. — and hash out your mission, values, standards, and principles. \nThis can be an illuminating and exciting part of creating the Digital \nFoundations, as it reminds everyone across departments what your common \ngoals are. Creating these shared values and standards as a team is a great way \nto bring people together and open up a positive dialogue and momentum that \nyou can take into future design system initiatives.\nBrand identity\nYour brand identity covers everything from your logo, to typography, colour, \ntone of voice, photography, illustration, creative direction, motion, and so on. It \nanswers questions such as:\n• What is our logo, and how do we use it?\n• What fonts and colours do we use — why, when, and how do we use them?\n• Do we have any cross-platform considerations (web, iOS, Android)?\n• Art and creative direction: what style of imagery do we use?\n• How do we use photography, illustration, icons, animation, and video?\n• Do we have any guiding principles for motion?\nUber Design \n(fig 3.9) has a comprehensive case study page dedicated to their \nbrand identity covering all of these topics, which forms the basis of their \ndigital, print, and physical design systems.\n\n50\nBrand identity is about more than just making things look good. The colours, \nwords, typefaces, shapes, graphics, and motion you use — and the way you use \nthem — can make your brand more or less accessible, memorable, or relatable. \nBrand identities heighten the user experience, and create a familiar and \nconsistent identity.\nFIG 3.9 uber.design/case-studies/rebrand-2018\nMy personal project, Club of the Waves (fig 3.10), is a website with a simple \npurpose: to showcase artists and photographers whose work focusses on \nsurfing and surf culture. The simplicity of the concept is reflected in both it’s \nbrand identity and design system. The brand uses just three colours:\n• Black for utility.\n• Red to represent anything related to artists.\n• Blue to represent anything related to photographers.\nIn the design system, these brand colours translate to section colour, links, \nbuttons, the logo, hover states, filters, accent colours, and so on.\nI should say — while the brand colours dictate meaning as an aid to the user \nexperience and an embellishment — they are not required for understanding \nor navigation. Users can easily navigate without awareness of these colours (if \nthey were, say, colour blind, or just don’t pick up on the meaning). Accessibility \nconsiderations like this are an important distinction between Digital \n\nLAYInG tHe FounDAtIons  51\nFoundations and traditional brand guidelines — as we’ll look at more in depth \nlater in this chapter.\nFIG 3.10 clubofthewaves.com\nGoogle is a great example of a company with a strong and consistent brand \nidentity \n(fig 3.11) threaded throughout its digital properties; their simplicity, \n\n52\nwhite space, clean design, logo, iconography, motion, colour, and typography \nmake their brand instantly recognisable. Google wrote a great account \n(3.2) of \nhow they designed their brand, and how it’s intended to be used systematically \nacross their various products.\n“A new brand identity that makes Google more accessible and useful \nto our users — wherever they may encounter it.”\nFIG 3.11 Google’s strong brand identity\n“The final logotype was tested exhaustively at various sizes and \nweights for maximum legibility in all the new digital contexts. To \nguide usage in screen and print, we developed standards to cover all \naspects of the logotype including spacing, clearance rules, product \nlockups, and redline specifications for in-product treatments.”\nWe’ll cover documenting brand identity later in this book. In the meantime, \njust know that having strong guidelines for your brand identity is a vital piece \nof your Digital Foundations.\nBrand tone of voice and copywriting\nHow does your company want to come across to its audience? We all have \nour own distinct personalities and ways of talking. A brand is no different. \nIf your designers aren’t aligned on what your brand’s voice and personality \nis, then they’ll all do their own thing, and your brand voice will be weakened \nor lost. This is why it’s vital to include copywriting guidelines in your Digital \nFoundations.\nThis interesting interview \n(3.3) with Molly Young (3.4) describes Warby \nParker’s “robust creative vision” when she joined them, and how that vision \n\nLAYInG tHe FounDAtIons  53\ndefined the tone for their copywriting:\n“It [the Warby Parker brand] was very literary, and quirky, and fun. \nThey had mood boards with a very specific bike, and a very specific \nedition of a book, and a calendar that they really liked the graphic \ndesign of. There was very specific reference points. They would \ndescribe it to me as: ‘Warby Parker is the person you want to sit next \nto at a dinner party. They are funny and smart, and they get up to do \nthe dishes.’”\nAs their ‘Director of Copy’, Molly worked with Warby Parker’s design team to \ntranslate this creative vision into brand copywriting guidelines.\nI like this approach. Copywriting starts with brand identity and vision and is \ninterpreted into a practical guide for its application in a digital product. These \nguidelines help to create more user friendly and on-brand experiences.\nMolly also brings up an important point on copywriting in digital products, \nadvising that designers and copywriters should sit and work together:\n“If you put them [designers and copywriters] next to each other, \nthey’ll be looking at each other’s screens and asking each other \nquestions, and interrupting each other, and learning from each \nother. Once a copywriter knows how a designer thinks and vice \nversa, you can work together really seamlessly.”\nI think this is great advice; much the same as I believe designers and \ndevelopers should sit and work together. Don’t segregate your teams. Have \nthem work together and benefit from each other’s expertise.\nAnother excellent article \n(3.5), Words Shape Design by Joscelin Cooper (3.6) at \nAirbnb, also describes the importance of copywriters and designers working \n3.2 design.google/library/evolving-google-identity/\n3.3 link.medium.com/MlRsSmQABX\n3.4 molly-young.com\n3.5 airbnb.design/words-shape-design-2/\n3.6 linkedin.com/in/joscelin-cooper-0262191/\n\n54\ntogether. Joscelin dispels the common (and unfortunate) expectation that a \ncopywriters role is to:\n“...provide a word layer to already-complete designs.”\nJoscelin advises designers and project leads to involve writers early. Ideally, \nprojects should start with a “content kickoff ”:\n“Getting a writer involved at the beginning means you’ll start design \nexplorations with a more informed perspective of the messages \nyou’re working to convey.”\nJust as new design projects benefit from early considerations for voice and \ntone, so should the creation of your Digital Foundations that will in-turn guide \nall future digital content and design projects.\nAtlassian \n(fig 3.12) introduce their brand “personality” as:\n“Our personality establishes the foundation of the Atlassian brand. \nIt is a product of our mission, and a reflection of our culture, values, \nand promise to customers. We make sure that these traits come \nthrough in all of our customer-facing communications and content.”\nAs well as defining your brand tone of voice and personality, it’s good practice \nto define a shared vocabulary.\nThe Digital Foundations I created for WeWork include guidelines for brand \nterminology, so the team consistently uses the same language across all \nproperties \n(fig 3.13). For example, all companies have ‘customers’ of some \nvariety, but not all brands like to refer to them as “customers” or “clients”; \ninstead they may use friendlier, more ‘human’ terms like: “members” or \n“guests”. A popular example is using “team” instead of “staff ” or “employee”. \nDisney refer to their theme park employees as “cast members”. I’m sure your \ncompany has its own preferences... If so, document them so your whole team \nknows about and uses them. This piece of your Digital Foundations will be \nespecially helpful for onboarding new team members, as learning the lingo of a \nnew company can sometimes be daunting.\n\nLAYInG tHe FounDAtIons  55LAYInG tHe FounDAtIons  55\nFIG 3.13 digital-foundations.netlify.com/brand-voice/\nFIG 3.12 atlassian.design/guidelines/brand/personality\n\n56\nFormatting\nIn addition to tone and vocabulary, your Digital Foundations should include \nguidelines for formatting. For reasons we’re about to examine, being \nconsistent with punctuation, abbreviation, and language choice is vital for user \ncomprehension and team collaboration. \nWithout a source of truth, your team may be unsure about something as basic \nas how to format a headline. Speaking from experience, you wouldn’t believe \nhow much friction a question like: “do we use sentence case or title case?” can \ncause across teams! Shakes head, remembering.\nFIG 3.14 When do we use sentence case vs. title case?\nThe next few example images (fig 3.14 - 3.18) are excerpts from Digital \nFoundations I’ve written in the past, including guidelines for writing \neverything from copy, titles, form labels, and calls to action. The screenshot \nabove \n(fig 3.14) is just one small piece of this documentation; it focusses on \nexplaining when to use sentence case versus title case in various product \nscenarios. \n\nLAYInG tHe FounDAtIons  57\nFormatting guidelines could also answer questions such as:\n• Do we use “and” or “&”?\n• Do we put a period (“.”) at the end of a header?\n• Do we use American English or British English?\n• Do we use the Oxford comma?\nTo you, these questions may seem inconsequential, but when you’re part of a \ndiverse team with varied (personal) approaches to writing, the answers may \nnot be obvious to everyone \n(fig 3.15). \nFIG 3.15 The little details can make a big difference\nFor example, I live in the United States, but I’m from England. Although a good \ndeal of my audience are undoubtedly in the United States, I made a decision \nto write this book in my native British English because this book is available \nworldwide, where British English is more commonly used. If this book was \nexclusively a digital product, I might decide to use American English for my \naudience in the United States, and British English internationally.\nThese things may seem trivial to some people, but if you’re a San Francisco \nbased company with a good deal of your audience outside of the United States, \nyou should think about your approach to language and have guidelines in \nplace.\n\n58\nFormatting date and time\nAn important factor to consider with international audiences is that the \nUnited States, Europe, and Asia all format things like date, time, and currency \nvery differently. Don’t make the mistake of assuming your international users \nwill perceive everything the same way you do.\nFor example, when formatting dates \n(fig 3.16):\n• The United States puts the month before the day (MM/DD/YYYY).\n• Europe puts the day before the month (DD/MM/YYYY).\n• Asia puts the year before the month and the day (YYYY/MM/DD).\nFIG 3.16 Document formatting guidelines for dates\nTake my birth date for example (presents welcome): where I’m from (England), I \nwould write my birth date as:\n“24th June, 1982” or “24/06/1982”\n\nLAYInG tHe FounDAtIons  59\nBut in the United States, I would write:\n“June 24, 1982” or “06/24/1982”\nAlso, notice I wrote “th” after “24” in the first example... It’s common practice \nin the United Kingdom to add an ordinal indicator (e.g. 2nd, 3rd, 4th) after an \nordinal number (i.e. a date), where it’s less common to see ordinal indicators \nfor dates in the United States.\nFIG 3.17 Document formatting guidelines for time\nAs for time: the United States (U.S.) is one of the only countries in the world \nnot to use the 24-hour clock (they use the 12-hour clock). Those not living in \nthe United States would understand that 09:00 is 9 in the morning, where \n21:00 is 9 in the evening — but a good deal of people in the U.S. would need \nto see 9:00 a.m. or 9:00 p.m. to make sense of these times. This is important, \nboth for companies in the U.S. building products that are used abroad, and for \ncompanies outside of the United States targeting a U.S. audience.\nSimilarly, the east and west coasts of the United States are in different time \nzones. If your target audience is nationwide in the U.S., being specific about \ntime is important. If you state that a game kicks off at 7:30 p.m., but don’t \nspecify 7:30 p.m. EST (Eastern Standard Time), your audience on the west \n\n60\ncoast (in the Pacific Standard Time zone) are gonna be pretty mad when they \ntune in 3 hours too late!\nTime and date are tricky. There are so many different ways you can represent \nboth. When we look at something called ‘interface audits’ later in this book, \nyou may be surprised by how many different formats you find in your product \nfor time and date. If you’re referencing time, for example, you could write:\n• “1 hour ago”\n• “1 hr ago”\n• 1h ago\n• 1h\nA quick browse through several news websites shows how many different \nformats are used to express the exact same time and date. The following \nexamples are real:\n• Feb 1, 2019\n• February 01, 2019\n• 1 February 2019\n• 1st February 2019, 4:04 pm\n• February 1, 2019, at 4:04 p.m.\n• February 1 2019, 4:04pm\n• Feb. 1, 2019 4:04 p.m. ET\n• Feb. 1, 2019, 4:04 PM EST\n• Fri 1 Feb 2019 16.04 GMT\n• 4:04 PM ET, Fri February 1, 2019\n• 16:04 EST, 1 February 2019\nGiven that there are so many different ways to format things like dates, times, \nnumbers, and currency; including do’s and don’ts and example scenarios in \nyour Digital Foundations can provide a valuable distinction for clarity sake.\nThe Google Material documentation \n(3.7) also has a section on best practices \nfor formatting date and time.\nNow that you’ve got a better sense of the importance of documenting these \nseemingly small details, I hope you’re motivated to include formatting \nguidelines in your Digital Foundations.\n3.7 material.io/design/communication/data-formats.html\n\nLAYInG tHe FounDAtIons  61LAYInG tHe FounDAtIons  61\nDon’t assume your \ninternational \naudience perceives \neverything the same \nway you do. \n\n62\nAccessibility and inclusivity\nIdeally, your company should already understand the importance of \naccessibility in their digital products. If not, I recommend reading: Planning \nfor Accessibility \n(3.8) by Laura Kalbag (3.9), which outlines a number of \nconsiderations to ‘make the case for accessibility — to yourself, coworkers, \nbosses, and clients’. Laura has also written a book \n(3.10) on accessibility. And \nI put together a list \n(3.11) of accessibility resources and tools on this book’s \nwebsite that you may find useful. So now you have no excuses! ;)\nMaybe you’re not sure why accessibility and inclusivity are that big of a deal? \nWell, consider that accessibility isn’t just about disabilities and impairments, \nbut also people of different ages (young and old), and people who speak a \ndifferent language. We’re talking about a potentially very large audience!\nThere are several business benefits to creating more accessible products. For \nexample: \n• A more accessible e-commerce product will have fewer sales fall through, \nand fewer community support and help enquiries and complaints.\n• You could expand your reach to a larger audience, giving you a competitive \nedge over your competitors.\n• If nothing else, you probably care about not being sued for discrimination! \nDepending on the countries and/or industries you operate in, an accessible \nsite may be required by law. Think about shops providing disabled access \nvia ramps and lifts/elevators, as opposed to (or in addition to) steps... Your \nonline shop is not so different.\nSimple accessibility issues include:\n• Use of colour. Think about colour blindness. The contrast between text and \nbackground colour can affect the legibility and visibility of text.\n• How do you distinguish links, warnings, and changes of state? If you’re \nrelying only on a change of colour to indicate something, be aware that \nsome people won’t see that change of colour. Instead, try more explicit \nstates — and changes of state — like an underline, or a different weight/\nsize/position.\n• Form inputs should always have a label. Without a label, an input (on its \nown) is most likely meaningless to a screen reader.\n• If you use icons on their own, without an accompanying text label — what \ndoes the icon mean? This is as much a user experience, cultural, and \ncommon sense thing, as it is an accessibility issue.\n• Think about people who use screen readers, or navigate websites with a \n\nLAYInG tHe FounDAtIons  63\nkeyboard, as opposed to a mouse or trackpad. Not everyone navigates and \nconsumes content the same way.\n• Do you rely on sound to convey something important? Not everyone can \nhear.\nWhen we talk about accessibility and inclusivity, we’re not just talking about \ndesigning for disabilities and impairments, we’re talking about everyone.\nFor example, physical (and mental) attributes deteriorate as we age. Of course \nit depends on your business and target audience, but is excluding people \nabove a certain age wise for your business? As Don Norman \n(3.12) puts it in his \nexcellent article \n(3.13):\n“The number of active, healthy oldsters is large–and increasing. We \nare not a niche market. And businesses should take note: we are good \ncustomers often with more free time and discretionary income than \nyounger people.”\nEspecially when designing for touchscreens and mobile devices, we should \nconsider things like small text being harder to read, or small touchpoints \nand/or touch-sensitive interactions being difficult to action as eye-hand \ncoordination declines, or when people are on the move. Have you ever \nwatched an older family-member try to perform a ‘force touch’ on a screen or \ntrackpad... Yeah, good luck explaining that interaction! “Press it, but don’t press \nhard — just a little bit... No, too hard!”.\n“Are elderly people handicapped? Maybe, but so is a young, athletic \nparent while carrying a baby on one arm and a bag of groceries in \nthe other (and perhaps trying to open their car door).”\n3.8 alistapart.com/article/planning-for-accessibility/\n3.9 laurakalbag.com\n3.10 abookapart.com/products/accessibility-for-everyone\n3.11 designsystemfoundations.com/resources/\n3.12 jnd.org\n3.13 fastcompany.com/90338379/i-wrote-the-book-on-user-friendly-design-what-\ni-see-today-horrifies-me\n\n64\nIf you haven’t put any accessibility standards in place already, you should \nresearch what you can do, start a discussion with your team, review your \nproducts, and take steps to improve your product’s accessibility. It’s a \nfascinating subject, and you may be surprised at what you learn and how much \nof a difference you can make.\nFIG 3.18 microsoft.com/design/inclusive/\n\nLAYInG tHe FounDAtIons  65\nUse your Digital Foundations to document your standards, raise awareness \nby educating your team on accessibility issues in digital design, and write \nguidelines for how to design for accessibility.\nMicrosoft has a comprehensive page \n(fig 3.18) in their digital design guidelines \non their dedication to inclusive design, including their principles, resources, \ntoolkits, and case studies.\nSmall changes can make a big difference. Consider making inclusive design a \npart of your team’s design and product thinking.\nResponsive design\nHopefully, you and your design team are already working ‘responsively’, but \nif you’re not sure what I mean by this, don’t worry — you’re not alone. I’ve \nworked on many teams where some of the designers weren’t sure how to \ndesign with different browser widths and/or devices in mind. If this describes \nyou, or someone on your team, pause here to read — or recommend — my \narticle \n(3.14) on responsive web design, which covers best practices for \nincorporating responsive web design into your design process.\nIf you’re already designing with responsive layouts in mind, you should \ndocument any responsive grids you use in your products, and best practices \nfor designing responsively.\nResponsive design is a problem area I’ve experienced at many companies. You \nmay be surprised how little some web designers know about responsive design \n— don’t take anything for granted. Instead, use your Digital Foundations as \na platform to educate your team and get everyone on the same page about \ndesigning for all screen sizes and devices.\nGoogle Material \n(fig 3.19) does a great job of documenting the makeup of their \nresponsive layout grid by clearly defining the makeup and terminology of a \nresponsive grid.\nMaterial clearly documents what ‘columns’, ‘gutters’, and ‘margins’ are, \nand how they work across different breakpoints. Their guidelines explain \npercentage width columns versus fixed pixel (px) values, and flexible columns \nversus fixed gutter widths.\n3.14 medium.com/owl-studios/responsive-design-af7a1f14b991\n\n6666\nFIG 3.19 material.io/design/layout/responsive-layout-grid.html\n\nLAYInG tHe FounDAtIons  67\nProcess\nDocument your design, engineering, and even interviewing processes so \neveryone knows what is expected. You might even document things like \nnaming conventions for files and folder structure, to keep things organised.\nHow does your team approach a design problem, and answer questions like:\n• From design thinking, brainstorming, sketching, wireframing, initial ideas, \ndesign mockups, design critiques, to design hand-off... What do you do?\n• Who is responsible for what?\n• How do designers and engineers work together?\n• How do you go from design to code?\nYou should have a clear process for making iterations or additions to a design \nsystem, so everyone knows things like:\n• How is it decided what your team works on?\n• How and where do you keep track of tasks, to-dos, and so on?\n• Have you updated the design library, as well as the code?\n• Have you updated the documentation with the latest change?\nIf you’re not sure of the answers to these questions, then that’s proof you need \nto discuss these topics — and document the answers and processes you agree \non (i.e. your Digital Foundations) — with your team. Anything you can do to \nalign your team on process is a good thing. Think about the benefit to new \nteam members who need to rapidly familiarise themselves with your team’s \nprocesses, or how a source of truth will help align your team on design process \nand workflows.\nDesign systems\nYour Digital Foundations are guidelines for all the best practices that fall \noutside of — and dovetail into — your actual design system(s), such as brand \nidentity, tone of voice, process, etc. Relating to design systems, your Digital \nFoundations should be a source of truth and answer questions like:\n• Does your team follow a specific model or methodology for design systems? \nIn the next chapter, I’ll introduce you to a simple design system model. If \nyou choose to follow that model — or for whatever methodology you use — \nyou should outline it in your Digital Foundations, so everyone is on the same \npage.\n\n68\n• Do you use specific terminology to describe different aspects of your design \nsystem?\n• Why are design systems valuable to different teams at your company? You \ncould repurpose any pitches you’ve used while ‘selling your design system’, \nas referenced in the previous chapter, to empower other team members to \nadvocate for the adoption of design systems.\nYour company may have more than one design system (one for marketing \nwebsites, one for mobile apps, one for employee-facing products, one for \ncustomer-facing products, etc.), so these guidelines should be general enough \nto set the foundation for all your design systems. To unify them under one \nbrand, and to ensure when your teams collaborate across different products, \nteams, and departments, that they are speaking the same language — using \nthe same vocabulary and methodologies. From these Digital Foundations for \ndesign systems, you can also link to any design system documentation and \nresources, if applicable.\nHow are Digital Foundations different to design system \ndocumentation?\nAs stated earlier with the Dropbox example, some things are inherent \nthroughout all of a brand’s digital properties (across marketing websites, \nproducts, apps, and so on). Each property can be very different — visually \nand functionally — but Digital Foundations help to unify a brand across all \nits digital experiences. A company can have Digital Foundations and a design \nsystem; some companies even have multiple design systems to cover different \nproducts, each with their own documentation.\nDigital Foundations are more all-encompassing, covering brand identity, \nformatting, and “a shared vocabulary for design”, as IBM puts it \n(fig 3.20). \nDesign system documentation is more specific — it covers components and \npatterns created using the Digital Foundations as a starting point, but is \nspecifically for use in a particular website or product.\nFor example, IBM’s Carbon design system \n(fig 3.21) was built upon the \nfoundations of their “IBM Design Language” \n(fig 3.20) brand guidelines.\nOnce their “IBM Design Language” guidelines (or their version of Digital \nFoundations) were in place, they had a strong foundation on which to build \ntheir design system.\n\nLAYInG tHe FounDAtIons  69\nMake it visible, make it count\nMost importantly, your team needs easy access to these Digital Foundations. \nThe more accessible they are, the more likely your team are to adopt, \nunderstand, and even — ideally — contribute to them.\nThe way you present or document these guidelines, values, and principles will \nFIG 3.21 carbondesignsystem.com\nFIG 3.20 ibm.com/design/language/\n\n70\nhave a big impact on their adoption. It might be smart to brainstorm with your \nteam how to proceed. Get them involved and excited about it.\nIt doesn’t have to ( just) be a website, digital document, or a wiki — it could be \nsomething visual in the physical space.\nFIG 3.22 percolate.com/values\nPercolate, a marketing platform in New York City, put up posters (fig 3.22) \naround their office as a reminder of their values.\n“Our mission and vision keep us aligned to a common goal. Each \nvalue is paired with a question that anyone within Percolate could \nask themselves, to help them understand whether the decision they’re \nmaking is aligned with the company.”\nYour brand, design, and engineering principles are the mantra that guide \neverything you do. They are the driving force and inspiration. With every \nfoundation, component, pattern, template, web page, or banner you design, \nand with each header and paragraph you write, ask yourself: “Does this align \nto our brand principles?”\n\nLAYInG tHe FounDAtIons  71\nFocus Lab, a design agency in the United States, created a series of posters \n(fig 3.23) highlighting their design standards and hung them prominently \naround their studio space.\n“We have a collection of standards that we strive to live up to each \nday. We reference them just about every week in one way or another. \nThey’ve become part of our lexicon in the office.”\nIt’s an interesting idea: to present design values, principles, and standards in \nthe physical world — not just digitally. We are very passive in our consumption \nof most things digital. It’s easy to forget a website, or never revisit it.\nPresenting design guidelines in the real world — in poster form \n(fig 3.24), a \ndesktop calendar, a sketchbook, a coaster, a desktop/phone wallpaper, and so \non — might be a brilliant way of getting people to notice and remember.\nFIG 3.23 focuslabllc.com/standards\n\n72\nMy former colleague, Keaton Price (3.15) came up with a cool idea to reinforce \nour design team’s values — by presenting them as an award \n(fig 3.25). He \ndesigned a beautiful postcard, and distributed a limited number of these cards \nto each team member. The idea was: if you experienced a member of the team \nexemplifying one of the team’s core values, then you would tick the value(s) \nthey exhibited, write them a personal message, sign it, and present it to them \nas an award. I can tell you from the perspective of someone who both received \nand gave these awards that it was a great feeling, and did wonders for team and \npersonal morale too! It put a smile on someone’s face, showed gratitude and \nteam spirit, and reinforced our team’s values. Win-win!\nFIG 3.24 Posters reminding team of their design values\n3.15 keaton.design\n3.16 google.com/docs/about/\n\nLAYInG tHe FounDAtIons  73\nAnd it doesn’t just have to be stating standards and values. You could get \ncreative — presenting other foundations like brand colours, typography, \nformatting reminders, art direction, and so on.\nFIG 3.25 Design team values presented as awards\nJust get it done!\nIt’s easy to get caught up in the presentation of things — sometimes, so much \nso that we delay or even don’t do the things we wanted to do! As designers, \nwe want to create something beautiful and memorable. As developers, we’re \ntempted to build everything ourselves. I faced this very problem on both fronts \n(as a designer and developer) when I first set out to create Digital Foundations. \nI was tempted to design and build a website as a vehicle for the content — but \nthe content was practically bursting out of me, waiting to be written — so I \ndecided it was daft to let design and code stand in the way of progress.\nMy solution seemed so simple, yet so effective. I just opened a new Google Doc \n(3.16), and started writing. The content flowed out, free from the distraction \nof design software or code editors. Plus, a Google Doc is easy to share with \nyour team; they can contribute, comment, suggest edits, and invite more team \n\n74\nmembers to join. It’s easy to reference from anywhere, on any device, even \noffline. It does almost everything you need it to do!\nHere is a screenshot (fig 3.26) from the Digital Foundations I created, in a \nGoogle Doc:\nFIG 3.26 Digital Foundations in a Google Doc\nOf course, it’s hard to get excited about a Google Doc. So in the longer term, \nthe Digital Foundations evolved into a more visually compelling and engaging \nentity (as a website), but the Google Doc did its job well, for a long time. It’s \nworth considering.\nAgain, don’t let technology or design ego stand in the way of getting your \nDigital Foundations produced and out there with your team. The longer they \nstay unwritten, the longer your product woes will persist.\nWe’ll talk more about Google Docs in the “Document everything!” chapter, \nlater in this book.\nFlaunt it\nIt’s not uncommon for companies to make their Digital Foundations or \ndesign system documentation public. This may seem like a strange decision... \n\nLAYInG tHe FounDAtIons  75LAYInG tHe FounDAtIons  75\nFIG 3.28 mailchimp.com/design/\nFIG 3.27 uber.design/case-studies/rebrand-2018\n\n76\nIt’s kinda like putting an instruction manual online for everyone to see, for \nsomething only you use. However, it actually has its advantages.\nDigital Foundations are the best and most idealistic representation of your \nbrand. They are what your company aspires to be, what it wants to look like, \nand how it wants to make people think or feel. Presented well, they can paint \na brand in a positive light. They can even paper over the cracks — and let’s be \nhonest, some tech companies need any good press they can get! Design can \noffer these companies a great opportunity to look good in the public domain.\nInternally, the objective should be to align your team(s) on how you design and \nbuild products.\nExternally, it’s showbiz. It’s a confident move. It says: ‘We’re proud of the great \nwork our team does. We’re awesome. Come work with us!’ And it works! \nDigital Foundations can be a great recruiting tool, and they can be great for \npublic relations. They can be beautifully designed, sexy, colourful, loud, or \nanimated. They can make the company look awesome, and they’re a great \ntalking point on social media and in design case studies. \nUber Design \n(3.17) hired outside help from a respected design agency, Ueno \n(3.18) to help create and publically showcase their brand guidelines. Together \nthey created a splashy website \n(fig 3.27) to really maximise their impact and \nreach.\nMailChimp Design (fig 3.28) opted for a simpler, one-page website to showcase \ntheir 2018 redesign/brand. It’s part business promotion, part flexing design \nmuscle, and part recruitment tool. This approach can cost very little to do if \nyou do it internally.\nAnother growing trend for highlighting design and engineering at tech \ncompanies is to showcase a limited amount of digital brand guidelines \nalongside articles and case studies. Some even offer free design resources, \ndownloads, podcasts, and interviews.\nAirbnb Design \n(fig 3.29) and Microsoft Design (fig 3.30) both do something \nlike this.\n3.17 uber.design\n3.18 ueno.co/work/uber-design\n\nLAYInG tHe FounDAtIons  77LAYInG tHe FounDAtIons  77\nFIG 3.30 microsoft.com/design/\nFIG 3.29 airbnb.design\n\n78\nDon’t lose sight of why you’re doing this...\nPublishing your Digital Foundations for the world to see is a choice. It can be \ngreat for public relations, and it can be a great recruitment tool. But the most \nimportant thing is that you lay these foundations internally at your company \nfor the benefit of your team(s) and your product(s). Outside attention is not the \ncore reason for doing them.\nAnd keep in mind that the public brand guidelines you see online may be \nmore for show than anything — so by all means use them for inspiration, but \ndon’t lose sight of your team’s particular needs, or let your desire to create \nsomething flashy get in the way of creating something useful.\nWith your Digital Foundations laid, let’s look at creating a design system!\n\nLAYInG tHe FounDAtIons  79LAYInG tHe FounDAtIons  79\nThe more \naccessible your \nDigital Foundations \nare, the more likely \nyour team are to \nadopt, understand, \nand even (ideally) \ncontribute to them. \n\n80\nDesign system model\n80\n04\nDesign \nsystem \nmodel\nLAYInG tHe FounDAtIons\n\nDesIGn sYsteM MoDeL  81\nThe previous chapter talked about laying strong foundations for digital \nproducts at a company by establishing digital brand guidelines. With those \nfoundations in place, we’re ready to start building an on-brand design system \nthat combines our brand and digital guidelines with the user and business \nneeds.\nLet’s start with the basics by defining some terminology and looking at a \nsimple model for creating design systems.\nSpeaking the same language\nThe Internet is flooded with information on design systems, and I encourage \nyou to read as much as you can. However, the more you read about design \nsystems, the more you realise that everyone uses different terminology \nto describe the same or similar things. This starts to get very confusing, \nespecially when you’re trying to get other people (aka stakeholders) on board \nwith the idea of creating a design system.\nSpeaking the same language is very important when working with teams. \nCommunication is hard enough without adding different definitions for \ndifferent design system terms to the mix. So at the very least, you need to align \non what terminology you’re all using.\nOne thing to always keep in mind: the less jargon you use, the better.\nCommunication made easy\nFollowing one design system model is a great way to keep your team on the \nsame page as to what each part of the system represents. A simple model will \nalso assist you in selling the concept of design systems to stakeholders.\nAlso, the simpler the language you use in your design system model, the \neasier it will be to communicate. As covered in the previous chapter, you \nshould define the (design system) terms your team is using in your Digital \nFoundations, or at least in your design system documentation.\nFor example, you may have heard design system lingo like: foundation, \ncomponent, pattern, atom, molecule, and organism. But the thing is: after \nyou’ve read a few articles and spoken to a few different people, you realise \nthat people draw their own conclusions as to what each term means based on \ntheir use in a variety of different contexts. With an industry the size of tech \n— spanning international borders, languages, and cultures — it’s easy for the \nmeaning of terms to diverge.\n\n82\nThis confusion is unavoidable, industry-wide. But it is avoidable on your \nteam(s). It’s an inefficient use of time and a frustrating experience for all to \nhave to continually explain terminology to people and then debate which \nterm is better, so it’s important your team(s) align on a model, and a shared \nlanguage. The same goes for any naming conventions used in the design and \ncode of a design system.\nNot everyone knows what you know\nIt’s easy to recommend you create Digital Foundations (see previous \nchapter) and to define the terminology of this model as a source of truth \nthat’s accessible by everyone on the team. But not everyone sees your \ndocumentation. Not everyone reads the same articles you do, attends the same \nconferences, or shares your experience. And as much as I’d like them to, not \neveryone will read this book (though by all means, buy them all a copy!).\nI’ve made the mistake a few times of dropping design system lingo into \nconversations where there wasn’t a shared understanding of terminology, and \nit’s caused confusion and frustration. The lesson I learned is not to assume \neveryone knows what you know. It’s a simple and somewhat obvious lesson, \nbut we’re all guilty of it in one way or another.\nHere’s a simple way I got my team using the same terminology: in \npresentations to department heads, product managers, and designers \n(referring back to the “Selling a Design System” chapter), I would often start by \nbriefly introducing what design systems are, and the model and terminology \nI was proposing we use. It’s no use launching into a pitch if the people you’re \naddressing don’t understand what you’re talking about.\nI made this mistake again, later, when I assumed the engineering team(s) \nwould know all about design systems, and that they’d be totally on board with \nthe concept. I was wrong, at least about the knowing part.\nI remember having a productive and enthusiastic chat about our plans for \ncreating a design system with an Engineering Lead. He got it. Everything. We \nwe were on the same page. But I was somewhat surprised when the meeting \nended with him asking me to schedule a presentation to our engineering \nteams, which, at the time, was dozens of people scattered around the planet! \nHe asked me to explain to them what design systems are, to introduce them \nto the model and terminology, and to help them understand why we should \ninvest time in any of it. \n\nDesIGn sYsteM MoDeL  83DesIGn sYsteM MoDeL  83\nIt’s important \nyour team aligns \non a design system \nmodel and a \nshared language \nthat everybody \nunderstands. The \nless jargon you use, \nthe better.\n\n84\nThankfully the presentation went well. Aligning everyone on the same page \ngot them excited about the project, and helped me earn their support. I was \nalso able to answer any questions, dispel any concerns, and gain a lot of \nmomentum.\nAligning on a model and terminology\nBack in 2016, I became a ‘Design System Lead’ at a large company and was \ntasked with launching a department-wide system design initiative for teams \nthat hadn’t worked with design systems before. While researching a design \nsystem model and terminology to use, I was confused by the many different \nterms — and jargon — I found to describe and break down a design system. \nCall me stubborn, but since what I found was too complicated, I created my \nown! My goal with creating this model was to give the team a set of easy-\nto-understand terms that we could all start using with as little friction as \npossible.\nFIG 4.1 The Foundations Model\nThe Foundations Model\nPlease feel free to use this model at your company, but don’t be afraid to \nchange the terminology to suit your team’s preferences. The most important \nthing is that you all understand and feel comfortable with it!\nI call it the ‘Foundations Model’ \n(fig 4.1).\nI came across the term ‘foundations’ a few times in my research. Its use \n\nDesIGn sYsteM MoDeL  85\ncase was a little different every time, but as I mentioned in the previous \nchapter, I thought it was a great analogy for how to approach system design. \nIn construction, foundations are crucial to a building’s stability, quality, and \nlongevity — and the same applies to building digital products. To reiterate \nwhat I said earlier:\nA building built on sand will only stand for so long. You need to lay strong \nfoundations, before you build anything.\nI’ve already shared my love of using construction analogies, but I really \nthink it’s no coincidence we use terms like ‘building’ in digital design. There \nare many parallels between the construction and tech industries — from \narchitecture and design, to engineering and development, to quality assurance, \ndeployment, marketing, and maintenance. \nIn line with keeping things simple and easy for people to understand, it’s \nhelpful to think in visual terms. You could look at the design system model \n(fig 4.1) as a building made up of building blocks. Each level expands upon, \nintegrates with, and is built upon the level below.\nIt’s also important to consider: there are many other factors involved in the \nprocess of creating or iterating on a design system \n(fig 4.2). User experience, \ndata, accessibility, content strategy, localisation, user testing, and brand \nshould all be interwoven in every level of your design system model. They are \nFIG 4.2 Many other factors are involved in design systems\n\n86\nthe glue, the cement, the beams, and the pillars that hold the model together, \nand make it great.\nLet’s get into what each level of our design system model is.\nFoundations\nAs we covered in depth in the previous chapter, your Digital Foundations \nshould be the basis for every digital project you do, including your design \nsystem(s). Foundations are multifaceted and arguably more extensive than the \nother levels, which is why they warranted their own chapter. There’s a reason \nthe model is named after this foundational layer.\nTo review, Digital Foundations include the subjects that brand guidelines \ntypically cover, such as guidelines for the identity, typography, text styles, \ncolour, icons, photography, imagery, and illustration. They also cover less \nvisual aspects like brand tone of voice, formatting choices, and things like \nbrand values and design and engineering principles.\nFIG 4.3 Foundations example: text styles\nDigital Foundations also go beyond brand to span design and code issues, with \nguidelines for calls to action and links, layout and spacing, formatting of date, \ntime, and currency, localisation, responsive grids, animation, and accessibility.\n\nDesIGn sYsteM MoDeL  87\nFoundations can be extensive or brief, depending on the size and complexity \nof your product suite. As I mentioned in the previous chapter, your Digital \nFoundations are guidelines for things (such as brand values, logo treatment, \nformatting, etc.) that cover all your digital properties. However, other aspects \nof your foundations may only be specific to one digital property — for \nexample, your company’s marketing site may use a responsive grid, but your \ndesktop or mobile app/product may not. Or, it’s not uncommon for different \ndigital properties to use fonts unique to them (think back to the Dropbox \nexample in the previous chapter). In these cases, you may have foundations \nthat are unique to the design system created for each digital property. Be \nsure to include any property-specific guidelines — along with the company-\nwide Digital Foundations you’ve already created — in your design system \ndocumentation. \nA simple example of property-specific foundations are a set of text styles \nfor a website, which are different to those used in a mobile app. Defining a \nlimited set of text styles for headers, copy, quotes, captions, and so on is wise \nfor consistency and user experience, as well as a streamlined code base. The \nexample \n(fig 4.3) shows two responsive text styles designed specifically for \nheaders and subheaders.\nComponents \nThese are the smaller building blocks of a digital product. Components are \nFIG 4.4 Components example: a text input\n\n88\ndistinctive user interface (UI) elements that are used repetitively throughout \na product. For the most part, they are actionable or at least used to convey \nmeaning.\nExamples include: buttons, form inputs, selects, textareas, radio buttons, \ncheckboxes, range sliders, toggles, avatars, tooltips, and so on. The following \n(fig 4.4) shows a text input component and all its states.\nIt’s good practice to not get too carried away with creating completely bespoke \ncomponents — for the most part, there’s rarely a need to reinvent the wheel \nwith these. There’s a good reason why selects (i.e. a form input with an arrow, \nwhich opens a dropdown menu on-click) look the same on most websites: \npeople can instantly identify their function. This commonality, consistency, \nand familiarity in digital interfaces are important, not boring. Using \nconventional components (that aren’t ‘overstyled’) makes sure that inputs and \nactionable items are instantly recognisable to users. It also makes it easier for \ndevelopers to build an accessible and consistent solution that works across a \nvariety of devices and browsers which isn’t too complicated or code heavy.\nTake the example below \n(fig 4.5):\nFIG 4.5 One of these is more identifiable than the other\nThe component on the left is unmistakably a select — we know that if we \nclick the input, or the arrow, we will see a dropdown with more options. The \ncomponent on the right, however, could be mistaken for a button, or it could \nbe overlooked entirely as a non-actionable, purely decorative element. If \nthis were an e-commerce website, can you afford for some users to miss this \ncomponent and leave without making a purchase?\nPatterns \nThese are the larger building blocks of a digital product. Patterns refer to \nrecurring or ever-present elements or practices throughout a product. A \npattern can often be comprised of established foundations and components \n\nDesIGn sYsteM MoDeL  89\n— for example, a card pattern may feature a header and a description, using a \ncouple of different text styles (foundations), and a button (component).\nExamples include: navigation, footer, modals, alerts, notifications, tables, feed \ncards, product cards, image galleries, carousels, feature or masthead areas, \npagination, breadcrumbs, and so on. The example below \n(fig 4.6) shows a \nresponsive image gallery pattern:\nFIG 4.6 Patterns example: image carousel\nEven specific layouts or content blocks can be patterns — for example, a \nsimple, repeatable lock-up of image and text, like the example pattern below \n(fig 4.7):\nFIG 4.7 Patterns example: simple modular layout of image and text\nPatterns can also refer to less tangible factors, such as your philosophy for \n\n90\nhow pages and content should load, your use of error states and animations, or \nwhat happens with empty states, onboarding, and guiding tips throughout a \nproduct.\nPatterns are often modular, meaning they’re designed to pair well with other \npatterns to tell marketing stories, sell products, present content, cross-sell, \nand so on.\nTemplates and Pages\nFoundations, components, and patterns make up the basis of this design \nsystem model, but their application is just as important as the elements \nthemselves. If foundations, components, and patterns are the building blocks, \nthen you need schematics to pull it all together, which is where the following \nadditional layers of the model come in. \nWhen designing a mainly content-driven website (as opposed to digital \nproducts or apps, which I’ll address shortly), I refer to these additional layers \nas ‘templates’ and ‘pages’ \n(fig 4.8):\nFIG 4.8 The Foundations Model applied to a website\n\nDesIGn sYsteM MoDeL  91\nLet’s look at these two new layers in depth.\nTemplates\nIn digital terms, a template is a consistent layout that is used multiple times \nthroughout a website, and are populated with different content each time \nthey’re used. Common examples of templates include an article or a blog post.\nConsistency in web design is important for good user experience — not just \nfor style, but also for the way content is presented. It’s good practice to have \nas few templates as possible, so people can familiarise themselves with the \ninterface as quickly as possible. If somebody needs to keep re-learning what’s \ngoing on — where to look or click for every new template they encounter — \nthey’re highly likely to get frustrated. And frustrated customers don’t stay \ncustomers very long!\nUsing fewer templates is also a consideration for development, maintenance, \nand scalability. The fewer templates you use, the easier and less expensive the \nbuild and maintenance will be. For example, adding a new employee profile \npage using an existing template is significantly faster and easier than building \na bespoke page for each new person you hire. Making global, sweeping changes \nto a website is easier when you update a single template, which automatically \nupdates multiple pages. Imagine what a nightmare it would be to make a global \nchange to the New York Times or BBC websites, if each of their articles had \na bespoke page design, as opposed to using the same, or a limited number of \ntemplate(s).\nPages\nPages are essentially the final application of the design system at work. They’re \nwhat your audience ultimately sees.\nA page is either the application of a template, or a bespoke one-off web page. \nSometimes it’s good for certain pages to differentiate and not come from a \ntemplate, such as when you need them to communicate a bespoke message \nor perform a specific function. Pages like the home page or a contact page are \ngood examples of bespoke pages.\nFor an example of the relationship between templates and pages, consider the \ndesign system I created for Club of the Waves, a website featuring surf artists \nand photographers, each of whom has their own unique profile page on the \nsite. \n\n92\nThe image below (fig 4.9) shows templates (only two) in the left column, and \npages to the right:\nFIG 4.9 Templates vs. pages (example: clubofthewaves.com)\nPageTemplate\nClub of the Waves has a bespoke home page, with no template applied to it — \nas seen in the first row of the image above. \nThe second row shows the template for an index of profiles, and two pages (to \nthe right of it) with that template applied to them. The third row shows the \ntemplate for individual profiles, and several pages (to the right of it) with that \ntemplate applied to them.\nIn Club of the Waves’ case, there are hundreds of pages running off the one \nprofile template. It would be unrealistic to design and build a bespoke page for \nevery creative profile, and a nightmare to make global changes to each unique \npage. But with all the pages running off the one template, you need only update \n\nDesIGn sYsteM MoDeL  93\nthe one template to change every page — for example, if you wanted to add a \ncomments section or social sharing links to all profile pages.\nThe same logic applies to all aspects of a design system. For example, if you \nupdate a system component like a button, the change would be applied \neverywhere that button is used in the system. This is much easier than the \nlengthy and hazardous task of digging for and updating all of the buttons. The \nsystem at work!\nDesign systems in product design\nAs I stated before, the model’s terminology is flexible. For example, where \nthe Foundations Model terminology we’ve covered thus far — foundations, \ncomponents, patterns, templates, and pages — works best for web design, \nthe following terminology is arguably more appropriate for product design \n(fig 4.10).\nFIG 4.10 The Foundations Model applied to product design\n‘Templates’ and ‘pages’ can be applicable to products too, but ‘features’ and \n‘screens’ are arguably more applicable terms when designing a system for a \nmore complex or dynamic digital product or app.\n‘User journeys’ map out the often complex interactions within a product’s \nfeatures. And ‘screens’ are snapshots in time of a product in use (i.e. a step in \nthe user journey). I’ll demonstrate this using a real product in a moment, but \n\n94\nfirst, consider this:\nWebsites are often about consuming content, and only include quite simple \ninteractions like clicking a button to go to a different page, submitting a form, \nfiltering a list to make a selection, or opening an accordion. Products and apps, \non the other hand, tend to be more multi-layered, with interactions that can go \nseveral layers (or steps) deep.\nFor example, a banking product might have a ‘screen’ dynamically created \nand tailored to a specific user account, user type, and preference settings. \nThis already sets it apart from a ‘page’, because the format and content of \nthese dynamic screens might have dozens of possible outcomes and resulting \nfeature sets. For example, a single screen in a banking product may include the \nability to transfer money between accounts, set up a wire transfer, pay a bill, \nview statements, download data, open a new account, and so on. \nWhere typical patterns or templates in web design are not so complicated, \neach of our banking example’s features may require more than one or two \nclicks to set in motion. Each feature can have a multi-step ‘user journey’ to \nperform certain tasks. In a way, you could look at features as being ‘super \npatterns’, but that name doesn’t hold much credibility. On the surface, a \nfeature is an assortment of foundations, components, and patterns — pulled \ntogether to perform a specific task(s). But each interactive part of a feature can \ngo several layers deep, creating more of a user journey.\nTo give a more specific example, let’s say a banking product has a feature \nthat enables you to get directions to your local bank branch. A potential user \njourney for this feature might be:\n1. The user clicks a button that reads: “Find your nearest bank”\n2. A modal opens where the user is asked to enter their postal/zip code\n3. Upon submit, a map is revealed showing banks near their location\n4. The user clicks on their desired pin on the map\n5.  A tooltip opens with a link to directions\n6.  The user clicks the link and is directed off-site to Google Maps \n7.   And finally, for each of the previous steps you could have multiple success \nstates, error states, helpful tips to guide the user, micro-interactions, and so \non.\nThe bottom line is: digital products are complicated! It’s vital that your system \ninclude not just all of the elements involved in the example above (e.g. buttons, \nmodals, maps, pins, tooltips, etc.), but that it also maps out how a feature is \nused — showing all of the screens that add up to the user’s journey. (Doing this \n\nDesIGn sYsteM MoDeL  95\nmay also reveal some opportunities to simplify the experience!).\nTo reiterate my earlier point, despite this complexity, you still need a \nsomewhat simple model that people can get on board with. If ‘features’, \n‘screens’, and ‘user journeys’ don’t resonate with you, then re-work the model \nto work for your product and team. The main thing is not to overlook the \nvarious parts of the system that make up your products.\nA case study of a design system at work\nLet’s look at the design system I created for the Adobe Portfolio product (4.1) as \nan example. This product has no pages to navigate. It’s a dynamic JavaScript-\nbased user interface, where the experience is made up of multiple features and \nnumerous potential user journeys.\nTo demonstrate, let’s break down the Adobe Portfolio product into a few \nsystem elements, mapped to our model:\nFoundation\nThe example below (fig 4.11) shows the brand colour palette used in the \nproduct.\nFIG 4.11 Foundation example: colour palette\n4.1 roomfive.net/adobe-portfolio/\n\n96\nComponent\nThe following image shows a few examples of components in the product \n(fig 4.12), including text inputs, checkboxes, toggles, and buttons. This is only \na very limited view of a few components, and not all their states are shown, \nbut notice the components also include things like placeholder states, hover \nstates, and error states. We’ll cover this extensively later in this book. Also, \nnotice the only colours used are the colours we’ve just seen in our foundations \nexample \n(fig 4.11).\nFIG 4.12 Component examples: assorted form components and buttons\nPattern\nSome of the previous component examples can be seen in the following \nexample \n(fig 4.13) in a modal pattern. This example pattern is called a “Panel”, \nwhich is a modal — composed mostly of components like inputs, toggles, \nselects, and buttons — used throughout the product as a consistent vehicle \nfor performing various actions. The example spec shows the makeup of a \nPanel and a couple of variations of this pattern, including the “Basic Panel”, \n“Advanced Panel” (with navigation), and “Manage Panel” (a fixed height panel \nwith scrolling content).\n\nDesIGn sYsteM MoDeL  97\nNote: It’s good practice to name your patterns. For example, our Panel \npattern’s technical name is a “modal”, but you may find additional use cases \nfor using a modal throughout a product, such as for warnings or messaging. \nIt’s far more efficient to say “Basic Panel” or “Advanced Panel” in a product \ndiscussion, a GitHub Issue, or a conversation with a developer, than it is to \nattempt to describe it: “The modal”. “Which one?”. “The one with the navigation”. \nInstead, give it a name, document it, and use that name going forward. Over \ntime people on your team will identify patterns by name, and if not, your \ndocumentation is where they look to find their answer. Don’t worry, we’ll cover \ndocumentation later in this book.\nFIG 4.13 Pattern example: a modal pattern called a “Panel”\n\n98\nFeature\nThe big difference between a pattern and a feature is their complexity. A \npattern might perform one or two functions, and can be deployed in a number \nof different ways as a reusable element. A feature can perform many functions \nor one specific function, and may be comprised of multiple patterns.\nThe example below \n(fig 4.14) is a spec for the “Manage Content” feature from \nthe Adobe Portfolio product, which uses the “Manage Panel” pattern \n(fig 4.13) \nfrom our previous example. In this case, the feature is made up of many \nfoundations and components, but is using just one pattern.\nFIG 4.14 Feature example: a spec for a feature called “Manage Content”\nInteraction wise, there are many things that can be done with this “Manage \nContent” feature. Contained within the “Panel” pattern, you can drag and drop \nelements, toggle things off and on, access menus, add content, delete content, \nedit content, and so on. These specifications (or — as I call them — ‘specs’ for \nshort) map out those different interactions and states.\nNote: You’ve seen in the previous three examples — for features, patterns, and \ncomponents — that I’ve designed and created specifications for all the various \nstates and interactions. We will cover this extensively throughout this book, \nbut for now, some friendly words of advice:\nWeb and product designers often fail to mock up different states of \ncomponents and patterns or to fully consider the interactions, pitfalls, and \npotential user journeys of the products they design. For example, designers \nwill often hand over mockups of a form without showing how an input should \nlook if there’s an error, or what the submit button looks like on-hover, or \nwhat happens once the form has been submitted? I say this as a designer \n\nDesIGn sYsteM MoDeL  99\nwho’s worked with other designers who are guilty of this, and as a frustrated \ndeveloper who has built websites (that someone else designed) where these \nthings haven’t been considered or accounted for.\nDon’t assume the developers will figure it out. It’s not their job, it’s the \ndesigner’s job. And especially don’t leave it to chance, and risk later finding \nout your customers are struggling to use your product. This ambiguity leads to \nfrustration, confusion, and inconsistencies in the build and user experience.\nScreen\nA “screen” really highlights the difference between designing a digital product \nand a website. Websites (often) have a definitive set of pages, and we know \nwhat they will look like as they are either based on a template or are a bespoke \ndesign. Products, on the other hand, can have dynamically created content, \nbuilt up of features that are tailored to the user. \nFIG 4.15 Screen example: a product scenario mockup\nThe Adobe Portfolio product we’ve been reviewing in this case study has no \n“pages”. It’s a product that people use to build personal portfolio websites for \ntheir work. No two “screens” will ever look the same — they are unique to \nthe person using the product. But from a product design perspective, it’s still \nvaluable to visualise what those screens could look like in order to stress test \nand design for all variables; this also allows us to give the developers a better \n\n100\nidea of what they’re building (in addition to our design system elements and \nspecs).\nA screen is the culmination of all your foundations, components, patterns, \nand features coming together. It’s a snapshot in time of someone using your \nproduct, or a step in their user journey.\nThe image \n(fig 4.15) is a design mockup simulating a feature in use — in this \ncase, a “Colour Picker” pattern is being used to edit a “Masthead” feature of \nthe product. This is different from a traditional mockup or “page” design in \nweb design, as it’s only showing a pattern in the context of one part of a user’s \njourney. Still, it’s a useful way of depicting how your system elements will come \ntogether in the product.\nUser journey\nA user journey, strictly speaking, is not part of our design system model. But, \nas stated before, a good product designer should map out how a product — or a \nfeature of the product — could be used. There are many ways you can visually \nconvey user journeys and the specific steps a user can take. You could, for \nexample:\n• Build a basic prototype you can test for real.\n• Simulate interactions in an interactive prototype using design software.\n• Create a still image step-by-step simulation of the product in action.\n• Map out all the potential actions a user could take in a decision tree diagram \nor flow chart.\n• Design a detailed, annotated specification showing all interactions and \nstates, similar to the examples shown here \n(fig 4.16 - 4.18).\nThe following design mockup \n(fig 4.16) maps out the user journey for the \n“Background Image” feature of the Adobe Portfolio product, which uses the \n“Basic Panel” pattern \n(fig 4.13) we saw in our earlier example.\nSimilarly, \nfig 4.17 maps out the various steps to using the “Add Content” \nfeature, which uses the “Manage Panel” pattern \n(fig 4.13).\nAnd finally, \nfig 4.18 maps out the potential steps a user could take while using \na different feature of the product, this time using the “Advanced Panel” pattern \n(fig 4.13).\nIt’s my hope that seeing how the elements of the Foundations Model came \ntogether in the Adobe Portfolio product design gave you a sense for how you \n\nDesIGn sYsteM MoDeL  101\nDesIGn sYsteM MoDeL  101\nFIG 4.18 Map out the interactions and steps a user could take\nFIG 4.17 Annotations help to identify what’s what\nFIG 4.16 User journey example: a spec showing potential user steps\n\n102\ncan adapt the model to your project. Keep in mind, you can always adapt the \nmodel to make it yours, this is just a guide to get you started.\nAllow for flexibility\nA really great design system is flexible enough to have room for creativity, and \nbe effectively applied to different scenarios. The more rigid the system, the \nmore likely designers are to introduce rogue elements. This is a slippery slope \ntowards the system failing, and the surest path to designers and developers \nfalling out.\nIt’s also healthy to think of and use terminology like ‘guidelines’, as opposed \nto ‘rules’. Rules feel like laws that can’t be broken. Your average designer \nwon’t like working under these constraints, so it’s important your system is \nadaptable and leaves room for creativity.\nHowever, some system elements do benefit from being more rigid for the sake \nof consistency, ease of navigation, user experience, or to protect the brand. \nFor example, on most websites, patterns like a ‘global navigation’ or ‘footer’ \nwill likely never change as you navigate page-to-page — nor should they, as \nit can be disruptive to the user journey and experience. Similarly, a ‘related \nitems’ pattern in an e-commerce product, or ‘related posts’ in a blog will be \nthe same design on every page (only the content changes). And foundations \nwise, sticking to a set of defined text styles and colours will make for a more \ncoherent end product and experience.\nIt’s also beneficial for some system elements to be adaptable — or to \nhave multiple variations — to cover different scenarios. This flexibility or \nFIG 4.19 Four variants of a button component\n\nDesIGn sYsteM MoDeL  103\nadaptability cuts down on the need to bypass the system or go rogue, adding \nnew elements.\nFor example, a component like a button could come in a small and large size, \nin multiple colours, or have a solid background versus a border outline to \ncommunicate different actions or hierarchy of importance.\nfig 4.19 is an example of different buttons from the same design system. While \ndifferent, they clearly belong to the same (brand) family and share similar \nspecifications and foundational characteristics.\nSimilarly, a component like a select could have a multi-select variant to cover \nscenarios where the user can select one or multiple options, as demonstrated \nin \nfig 4.20.\nFIG 4.20 Two variants of a select component\n\n104\nDocument the why, when, and how\nWe’ll cover documentation more thoroughly later in this book, but for now, it’s \nimportant to state: you should document guidelines, specifications, and use \ncases for all your foundations, components, patterns, templates, and features.\nDesign system documentation acts as a source of truth. By documenting the \ndesign thinking behind each element, you leave nothing to assumption or \nmisinterpretation. Demonstrating use cases is also great for guidance, as well \nas on-boarding new team members. Seeing is believing, so lead by example \nand show your team the thinking that went into your design choices.\nBetter together\nEverything we’ve covered in this chapter highlights the importance of \nteamwork, communication, and not designing or building anything in isolation \n— from the terminology we use, to creating and iterating on the system \nelements, to documenting how, when, and why they’re used.\nMy hope is that with the Foundations Model as a guide, you’ll now have a \nsimple framework to kickstart a great design system with your team.\nNow that we’re all on the same page regarding the model and terminology we’ll \nuse going forward, we’re (almost) ready to start creating a design system.\n\nDesIGn sYsteM MoDeL  105DesIGn sYsteM MoDeL  105\nThe first app I \nopened when we \nstarted wasn’t \nSketch. It was Google \nDocs. You need to \nclearly articulate \nthe problems you’re \nsolving first.\n\n106\nGetting started\n106\n05\nGett— \ning \nstar— \nted\nLAYInG tHe FounDAtIons\n\nGettInG stArteD  107\nBy now, hopefully, you should understand the importance of getting your \nwhole team excited about the value of a design system, and involving everyone \nin the process.\nWe’re not ready to jump into design just yet. First, you (and your team) need \nto be clear about what your goals for creating a design system are. By doing \nthis, you are further laying the strong foundations needed to build a successful \ndesign system and product(s).\nStart by identifying the problems\nMuch of design is problem-solving. So, first things first, you and your team \nneed to investigate: what problems are you solving?\nAs tempting as it is to see design systems as a vanity project, your goal isn’t — \nor shouldn’t be, entirely — to create something beautiful. If you get everything \nelse right, you will probably end up with something beautiful, but don’t race \nto the finish line — it’s more of a marathon than a sprint. Creating a design \nsystem is a large investment of time, by a lot of people, so you need a good set \nof reasons for doing it. And those reasons (or problems) will help you identify a \nway forward, your priorities, and which approach to creating a design system \nis best for your company, product, and team.\nConsider this quote from Nick Stamas \n(5.1), my former colleague I mentioned \nin the “Selling a Design System” chapter of this book, as he reflected on the \nbeginning of a journey that led to creating a design system:\n“The first app I opened when we started wasn’t Sketch. It was Google \nDocs. You need to clearly articulate the problems first. Be specific. \nWhere are things breaking down? Where are the biggest pain points? \nA design system doesn’t exist in a vacuum, it needs to solve problems \nfor everyone.”\nStart by involving your whole team — designers, developers, and product \nmanagers — in an open and frank discussion about where people feel the \nproduct or the team’s processes are going wrong. Depending on the size of \nyour team, and locations of the people working on your product(s), you could \nget everybody together, or break into smaller groups, and have team leaders \n5.1 nickstamas.com\n\n108\nmeet to discuss their findings. Document everything you discuss in a Google \nDoc (or something similar), so you can easily share it with the whole group.\nSystem design is a team effort, so work as a team. Make everyone feel like their \nopinion is important, and their voice is heard. The easiest way to get people to \nbelieve in the system is to involve them.\nWhen you discuss your problems as a team, you’ll also have a better \nunderstanding of the extent of the work that needs to be done. You may find \nyou already have the basis of a design system that’s just gone a little astray over \ntime, and it may not require much work to consolidate the design and code, \ndocument it, and grow from there.\nA designer might look at a problem and think: “we’re screwed, let’s just start \nagain!”, but a developer might look at the same problem and think: “actually, \nif we do X then we’ll be okay”. And vice versa. This is why it’s valuable to get \neveryone’s perspective.\nThe goal here, ultimately, is to find the common pain points in everything from \nthe product, design and build processes, team culture, and user feedback.\nFor example, some broader takeaways from this discussion could be things \nlike:\n• Developers hate it when designers reinvent the wheel.\n• Product managers want to ship updates and new features faster.\n• Designers are sick of the build not looking like their mockups.\n• Our users are frustrated by X, Y, Z.\nYou’re probably familiar with at least one of these frustrations... It’s pretty \ncommon stuff, and all issues that design systems can help fix.\nMore specific takeaways could be things like:\n• Why do we have 13 different colours in the product?\n• We want to explore a better way of doing X.\n• How can we improve conversion on this form?\n• We need a consistent set of buttons.\n• Our icons have no consistent style.\n• We want to clear time to refactor the code.\n• We want to introduce more animation in the product.\n• We need a consistent set of design components to work with.\n\nGettInG stArteD  109\nOnce you know what the problems are, you’re better prepared to come up with \na plan of attack for solving them.\nNote: Much of the above pre-supposes you’re working on an existing product. \nBut even if you’re launching a brand new company or product, it’s still \nworth identifying what you want to achieve, and the problems your product \nand design system aims to address. Also, identifying within your team the \nproblems that people have faced in the past — and the potential issues that \ncould arise going forward — can provide valuable insights you can use to set \nyour new work up for success.\nWhere do we go from here?\nThe multi-million dollar question! There’s no one-size-fits-all solution. Now \nyou’ve identified the problems, you have to decide what to do about them. \nChances are, if you’re having discussions like this in the first place, you’ve \nmore or less already decided — you’re going to create a design system. Now, \nthe harder part is deciding how to go about it.\nLooking at this  simplistically ,   there are two approaches you can take:\n1. The iterative approach\n2. The wholesale approach\nThe next two chapters are dedicated to these approaches, but before we go into \ndetail about the process for each, I want to explain in brief what they are.\nThe iterative approach\nThe iterative approach is the process of gradually replacing what you have now \nwith a new system. Or, if this is a new product, it’s the process of launching the \nproduct in stages (i.e. more of a soft launch, as opposed to a hard launch). If you \nare working on an existing product, this could mean consolidating what you \nhave currently, then gradually replacing what you have with something new. \nThis process happens iteratively — so foundation by foundation, component \nby component, pattern by pattern, feature by feature, template by template, \nand so on.\nRemember back in the chapter on “Laying the Foundations” when I talked \nabout creating a scaffolding and gradually remodeling, as opposed to \ndemolishing what you have and starting from scratch? That’s what you’re doing \nwith an iterative approach.\n\n110110\nAn iterative \napproach might \nonly bring small \nwins at first — but a \nsmall win can make \na huge difference \nto a product’s user \nexperience, and your \nteam culture.\n\nGettInG stArteD  111\nWith this approach, you start by conducting visual and code audits (we’ll cover \nthis in the next chapter) to discover the problem areas, and iteratively fix them. \nYou focus on small areas of the product at a time, gradually working your way \nthrough the whole product — designing, building, and documenting a design \nsystem as you go.\nThis approach can be disruptive to the product’s user experience and \naesthetic, but less disruptive to your business and roadmap. It can also be a \nfrustrating process, as progress can be slow.\nThe advantage to the iterative approach is that you’re able to start small and \ntackle your biggest pain points first. This might bring some immediate relief \nto a more immediate problem, such as a user experience problem, a process \nproblem, or a sticking point for designers and developers on your team.\nStarting with the iterative approach might only bring small wins at first — \nbut a small win can make a huge difference to a product’s user experience, \nand your team culture. A positive start can have a profound impact on an \norganisation’s positivity towards — and belief in — a design system as a \nworthwhile investment of their time going forward. This proved effective at \nGitHub \n(5.2), who said of their design system process:\n“Tackling our biggest pain points and working on tasks that \nprovided high value to designers and developers, helped us start to \nbuild recognition and show the value of design systems.”\nWe’ll delve more into the iterative approach in the next chapter, but for now it’s \nworth considering if this might be the best way for your team to start creating \na design system. Alternatively, you could try:\nThe wholesale approach\nThe wholesale approach is essentially starting from scratch — either because \nyou’re designing a new product without any existing systems in place, or \nbecause you’ve decided to tear down what you have and start again.\nTaking a wrecking ball to your existing design is arguably a more extreme \noption, but it has its advantages. You avoid the potential ‘Frankenstein \nMonster problem’ of the iterative approach, which could protect your brand \n5.2 medium.com/@broccolini/design-systems-at-github-c8e5378d2542\n\n112\nand user experience. Changes will be widespread and coherent, as opposed \nto the ‘bitty’ experience that can happen when things are tweaked iteratively. \nAlso, you’ll ultimately launch with a beautiful new product, which could be a \ngreat marketing opportunity!\nHowever, a big undertaking like this could be more disruptive to your \nbusiness. It’s likely any roadmap of new feature releases or improvements \nwill more or less be put on hold while you undertake a redesign. This is why \nit’s important to involve product managers and other business stakeholders \nin design system talks, as well as designers and developers. For example, \nsomeone outside the design and development teams could easily say: “if it \nain’t broke, don’t fix it” — so to sell them on a wholesale redesign, you’ll need to \nconvince them of just how broken things are. \nIf you’re considering condemning your current design and building something \nnew, be prepared to answer the following questions:\n• Will redesigning solve a business problem?\n• Has your research shown that your users are unhappy?\n• Is your product underperforming on certain metrics?\n• Are you rebranding to reach a new audience?\n• Does your brand need to evolve in line with its growth?\n• Or are your designers just bored? (Joking, not joking).\nBe smart about which approach you choose\nA totally new design might look great in your portfolio, a Medium article, or a \nDribbble post, but it might also have a negative affect on your business. Your \ncustomers come first, so don’t lose sight of what affect your new design system \nmight have on their behaviour and their retention.\nThink about websites like Amazon, which has largely looked the same for \nyears. Given their enormous wealth, one would think they could easily afford \na huge wholesale redesign. Instead, Amazon employs more of an iterative \napproach. They refine and test different design changes over time. Their \nproduct and design system evolves, but the user doesn’t always notice. \nThere’s a very good reason why companies like Amazon don’t take a wholesale \napproach, as the unknown factor of how their customers will respond to a \nradical redesign is far too great a risk. \n5.3 vanityfair.com/news/2018/05/snapchat-publishers-discover-redesign\n\nGettInG stArteD  113\nA wholesale redesign is a gamble — it could make or break your business. \nTake Snapchat’s 2018 redesign, which Vanity Fair described as “cataclysmic” \n(5.3). More than 1.25 million people signed a petition urging Snap to undo \ntheir update, they lost 2% of their daily active users (some 3 million users), and \ntheir stock price bombed! I can only imagine how bad those days were for their \nproduct teams.\nThe risk of taking the wholesale approach is especially high for e-commerce \nwebsites and digital consumer products that people frequently use; it’s less of \nan issue for marketing based websites or products with lower repeat visitors. \nHumans are creatures of habit — we don’t always like change.\nAn iterative approach is less disruptive and therefore can be safer, but \nsometimes a wholesale brand refresh can have a positive effect — look at \nbrands like Airbnb, whose new design system and accompanying redesign \n(circa 2016?) set a new standard for iOS app design, and helped them continue \nto grow as a successful business. You need to weigh up your options, and their \npotential risks and rewards.\nChoices, choices\nIt very much depends on the size and complexity of your product, team, and \naudience — as well as the nature of your brand — as to which approach is \nbetter, more expensive, disruptive, time-consuming, or worthwhile.\nBoth approaches divert from business-as-usual tasks. While an iterative \napproach can be undertaken largely under the radar and requires less \nstakeholder support, a wholesale approach will require more serious buy-in \nfrom multiple stakeholders, as it will suck up a lot of resources, and arguably \ncarries greater risk.\nAs you read through the following two chapters — delving more into each of \nthe iterative and wholesale approaches — you’ll no doubt conclude there are \ncommon elements to both, and you’d be correct. The word “holistic” is an \nimportant theme and consideration in both approaches, which we’ll explore. \nThe answer for your company might not be to adopt one approach or the other, \nbut to apply lessons from both approaches. In fact, I would recommend doing \na mix of the two!\nLet’s start by looking at the iterative approach.\n\n114\nAn iterative approach\n114\n06\nAn \niter— \native \napp—\nroach\nLAYInG tHe FounDAtIons\n\nAn IterAtIVe ApproACH  115\nWith this approach, you start by conducting visual and code audits to \ndiscover the problem areas. Next, focus on small areas of the product at a \ntime, gradually working your way through the whole product — re-designing, \nbuilding, and documenting a design system as you go.\nWhile this is more of a piecemeal approach, it is still important to not lose \nsight of the design holistically — to consider how everything will work \ntogether.\nFind your team\nYou’re not going to get far on your own. Find designers who are excited about \nmaking the best product! Find engineers who seem most excited about the \nidea of a system — or the front-end code — and make them your new best \nfriends!\nIn 2017, at a design system meetup in New York City, I watched as Diana \nMounter \n(6.1) — a design system lead at GitHub — talked about how in the \nearly days of creating the Primer design system  \n(6.2), they formed a small task \nforce who met regularly to discuss, discover, and plan to solve problem areas. \nThey reviewed code. They took action on making incremental improvements, \nconsolidating their system, and making the system more accessible to their \ndesign team.\nDiana’s article, Design Systems at GitHub \n(6.3), is an excellent insight into \ndesign systems:\n“There weren’t obvious underlying systems connecting all the pieces \ntogether. I knew things could be better and I was enthusiastic about \nmaking improvements — I quickly discovered I wasn’t the only one \nthat felt this way. There were several folks working on efforts to \nimprove things, but weren’t working together. With support from \ndesign leads, a group of us started to meet regularly to discuss \nimprovements and prioritize work — this was the beginning of the \ndesign systems team.”\n6.1 broccolini.net\n6.2 primer.style/css\n6.3 medium.com/@broccolini/design-systems-at-github-c8e5378d2542\n\n116\nOnce you’ve found your team: a good way to get going is to conduct interface \naudits.\nInterface audits\n‘Interface audit’ is a term with potentially different definitions. So for the sake \nof clarity — in this book — consider that:\n• An ‘interface audit’ is a broad term for conducting audits on a digital \nproduct.\n• A ‘visual audit’ is a design-based audit of what you can see in a digital \nproduct, focussed on foundations, components, and patterns.\n• You could focus the scope of a visual audit, and do only a ‘pattern audit’ or a \n‘component audit’.\n• A ‘code audit’ is an audit of what you can’t see, but what makes everything \nwork behind the scenes: CSS, HTML, JavaScript, and so on.\n• A ‘colour audit’ takes stock of colours used across all digital properties.\n• A ‘content audit’ maps out what you’re communicating and where.\nEssentially, an ‘audit’ is whatever you need it to be. It’s an investigation, and a \ngreat starting point that leads to larger discussions, actions, or projects.\nColour audits\nYou might be surprised by how many rogue colours you have in your product, \nbut the good news is, this is one of the simplest things to action.\nFirst, you need to do a colour audit of all websites and products at your \ncompany. Take note of every unique colour used for text, links, backgrounds, \nform inputs, buttons, error states, borders, and so on. If you have more than \none website, create a different colour palette for each website — it might prove \ninteresting to see the comparison.\nAs an extreme example, a colour audit conducted by Hipmunk \n(6.4) discovered \nan alarming amount of colours used in their product.\n6.4 uxdesign.cc/hipmunk-design-system-part-1-colors-ux-case-study-\n1ac99806aabd\n\nAn IterAtIVe ApproACH  117\nTheir colour audit (fig 6.1) led to them creating a stripped-down, clearer, and \non-brand semantic colour system \n(fig 6.2):\nFIG 6.2 Hipmunk’s new colour palette created post-audit\nNote the use of the number “500” (e.g. $hipred-500) in Hipmunk’s new colour \npalette (above). We’ll come back to what this means and why it’s important in \nthe “Systematising the Design” chapter, when we cover naming conventions \nand creating colour systems.\nThe following example \n(fig 6.3) is a small sample from a real colour audit I \nconducted at a company. The example colours shown here are to demonstrate \nthe discrepancies, which in this case were very similar variants of the same \ncolours.\nFIG 6.1 Colour audit of Hipmunk’s product\n\n118\nOnce you have your audit results — you need to get to the bottom of:\n• Why are we using each colour?\n• What (if any) function does each colour provide?\n• Do we need multiple variants of the same colour?\n• Which colours can we safely remove, and what do we replace them with?\nIt’s wise to take stock of why a colour is used. Consider whether the colours \nyou find in an audit were used intentionally (and serve an important function), \nor whether they were used unintentionally (and can be changed).\nWhen we clean our example up — removing the rogue colours — we end up \nwith a condensed, on-brand colour palette like so \n(fig 6.4):\nFIG 6.4 New on-brand colour palette removing unnecessary colours\nNow you need to work with a front-end developer to make these changes in \nthe code. If you’re working with a website, this is the perfect opportunity to \nintroduce Sass variables for colours (work with a developer for this). Create \nSass variables for all the correct brand colours you’ve defined, paying attention \nto how you name the colours.\nWe’ll cover naming conventions and why replacing static hex values \n(e.g. #F00658) in your code with Sass variables is a good idea later in the \n“Systematising the Design” chapter.\nFIG 6.3 Colour audit reveals very similar colours used\n\nAn IterAtIVe ApproACH  119\nFinally, pair a designer with a developer and go through the website, replacing \nall hex value colours with the correct Sass variable (colour). You could do a ‘fast \nand dirty’ find and replace, but it’s probably safer to ‘eyeball it’, going page-by-\npage and scenario-by-scenario.\nCode audits\nWe’re not going to go too deep into code audits in this book since we’re \nfocussed more on design, but suffice it to say they are important. The \nefficiency of the code is key to a design system’s success — and to the ease, \nspeed, efficiency, consistency, maintenance, and scalability of a digital \nproduct.\nSometimes, the code harbours many of the problems. If you’ve worked in-\nhouse at a company with any history of digital, you’ve no doubt come across \nthe phrase ‘legacy problems’. This often refers to legacy (old) code that makes \nupdating something problematic (read: painful). The problems may stem from \ndesign — perhaps designers have gone rogue designing several variants of the \nsame thing — but the code holds the key to fixing them. Refactoring the code \n(reducing complexity) makes all the difference, and a code audit is a great way \nto kickstart that refactoring effort.\nAt GitHub, their designers and developers worked together to audit \n(6.5), \nrefactor, and consolidate their design system, focussing on their code:\n“We reduced the need for people to have to write new CSS. We made \nour components easier to reuse in multiple locations. We worked on \nconsolidating patterns by reducing code repetition and removing \nunnecessary design variations. We defined global Sass variables \nfor shared system styles. We introduced consistent and easy-to-\ninternalize naming conventions.”\n“Sass” is a key word here. If you’re not already familiar with it, Google it. Speak \nto your developers about it. It’s a way of writing and compiling CSS that will \nmake your code much easier to manage.\nBesides the code, I even introduced Sass naming conventions into the design \nand design documentation at a previous job — bridging the gap between \n6.5 medium.com/@broccolini/design-systems-at-github-c8e5378d2542\n\n120\ndesign and engineering. Any way you can find to do this is a good idea. We’ll \ncover this later in the “Systematising the Design” chapter.\nExperience has taught me that visual audits and their resulting plans of \naction, often dovetail into or spur subsequent code audits in the execution to \nfix the visual problem. Your teams might divide and conquer — running both \nvisual and code audits simultaneously — or start with one or the other, and \nwork from there. It very much depends on the nature of your teams and the \nproblems you’re solving.\nVisual audits\nA visual audit (aka ‘interface inventory’) is a means of finding inconsistencies \nin a digital product. You scan through a product and create an inventory of all \naspects of the visual interface, identifying where the problems are, and scoping \nout the extent of the problem.\nWith this information, you can plan to fix any smaller issues in the short term, \nand formulate plans for fixing larger issues in the long term.\nThey also provide you with excellent material to sell your design system work \nto stakeholders — referring back to the “Selling a Design System” chapter — \nsince they highlight why you need a design system!\nHow do you conduct a visual audit?\nThis can easily be a one-person job, but I would recommend using this as an \nawareness and ‘togetherness’ exercise by working as a group.\nCreate a small task force of people who care most about the front-end. The \nteam could all be designers, or you could involve developers and product \nmanagers as well (so long as they are more ‘visually oriented’ people — it’s \nimportant they take the audit seriously, so nothing slips through the cracks).\nCall a meeting and introduce the audit as an exercise to find inconsistencies \nin your product, which will ultimately help you to design and build a more \nconsistent product.\nStart by creating a list of every feature, page, screen, user journey, and scenario \nin your product. Then divide that list up amongst the group, with each person \ntaking ownership for their part of the product(s)/audit.\nAgree on a place to store your findings. It should be accessible by everyone; I \n\nAn IterAtIVe ApproACH  121\nrecommend a Google Doc or a design tool like Sketch, but there are a number \nof online collaboration tools you could use. You could also use something like \nKeynote. It will be easier if you agree on a consistent format for cataloguing \nand organising your findings. Ideally, create a template for your team to use.\nThe task of each auditor is to document what they see. So for every page, \nscreen, or user journey: take a screenshot of each button, header style, text \nstyle, link, form input, toggle, pagination, tooltip, quote, product card, table, \nheader, footer, navigation, and so on — and organise them by category (e.g. \nbuttons, text links, header styles, etc.).\nThe goal here is not to capture (screenshot) every instance of an element, but \nto capture each unique variant of it. So, don’t capture 10 instances of the \nexact same header style. Instead, if you find that 4 of those 10 header styles are \na different font family, weight, size, colour, sentence case versus title case, all \ncaps, or underlined — then capture each of those variants. Do the same for \nall foundations, components, and patterns. Pay close attention to things like \nsize, spacing, colour, text styling, border-radius, drop-shadows, and icons. And \ndon’t forget things like hover states and error states.\nOrganisation is key. For example, you want to end up with a view of how many \nbutton styles you have in your product, but it may also help to know where \nin the product you found each button style, so you can go back and address it \nlater.\nYou should end up with a mass inventory of all existing foundations, \ncomponents, and patterns in your product, and all of their variations.\nFinally, schedule a time to meet again at a later date, as a group, to share and \ndiscuss what the team found.\nThe results may shock you\nIf you’re shocked, this is a good thing. The first step towards solving a problem \nis admitting (or seeing) there is a problem. Chances are you’ve already \ndone that by forming this task force in the first place. You’re aware of the \ninconsistencies in your product, and you want to prove to others that they \nexist. The audit(s) will uncover these inconsistencies — and that’s only the \nsurface layer, what lies beneath (aka the code) may well be a lot worse!\nSeeing the number of variations side-by-side is a powerful realisation of \nthe state of your product, and an indication of how much work lies ahead. A \nvisual audit can help recruit people to your cause, convince stakeholders that \n\n122\nsomething needs to be done, and acts as a blueprint to create a design system.\nWeb developer/designer, Brad Frost \n(6.6) puts it well:\n“It’s not to say that deviating from established patterns is always \na bad idea, but it’s important to recognize the difference between \nintentional and unintentional deviation. An interface inventory helps \nexpose unintentional inconsistencies and encourages consistent, \ndeliberate design decisions.”\nWhat now?\nNow, your team needs to plan what to do about the inconsistencies you’ve \nfound.\nInterface audits are a valuable addition to your pitch to stakeholders for why \nyou need to invest in a design system. As I said before, seeing is believing. \nYou can show your stakeholders the extent of the problem, and explain why \nthese inconsistencies matter, or you can take a more direct approach, and take \naction now.\nPrincipally you need to work with your task force to consolidate the variations \nyou found. By task force, I mean: designers and developers working together to \nfix the inconsistencies, and documenting the definitive solutions you decide \nupon.\nThis is where it helps to include front-end developers in your task force, or \nat least bring them into the fold once you’ve completed the visual audit. You \nwon’t get far without developers, or at least not without access to the code to \nmake the changes yourself (yes, I’m suggesting designers could write code).\nResearch, consolidate, and document \nA visual audit I was once a part of uncovered 26 different styles of buttons in a \nsingle product. A subsequent code audit revealed an array of different classes, \ncolour variations, and naming conventions for the same and similar buttons. It \nwas a mess.\n6.6 bradfrost.com\n\nAn IterAtIVe ApproACH  123\nThe goal is not to just eradicate all the variations you find. You need to replace \nthem with something, and the answer might not be to replace 26 with 1. In this \ncase, we dug a little deeper into the audit, analysing the 26 styles of buttons; we \nasked ourselves:\n• Are the variants random, or intentional?\n• Where, when, and how are they used? \n• What are their different functions?\nChances are you’ll find more than one use of the component, but I’ll wager \nyou won’t find more than a few. Trending patterns will emerge. Actions like: \n‘Save’, ‘Submit’, ‘Get Started’, ‘Sign Up’, ‘Buy Now’, and ‘Subscribe’ may differ in \nfunction, prominence, or importance from actions like: ‘Edit’, ‘Cancel’, ‘Read \nMore’, and ‘Close’. Take stock of these different functions in your audits and \ndecision-making.\nYour visual audit helps you to uncover not only how many variants you have, \nbut potentially why you have those variations. Sometimes it’s just bad design, \nor proof for why you need a design system. Other times you’ll discover a \nlegitimate need for variations — like multiple button styles for different \nactions, or additional text styles to cover specific scenarios.\nPrimary button\nTertiary button\nSecondary button\nFIG 6.5 Different states of button components\n\n124\nNow that you’ve uncovered and debated these findings, you can consolidate \nthose 26 button styles into 1, 2, 3, or more styles that cover all the scenarios \nyou’ve identified. Ending up with something like this \n(fig 6.5).\nNote the naming conventions. Names like “Primary”, “Secondary”, and \n“Tertiary” (for example), make it easier to identify your defined system \ncomponents — keeping everyone on the same page and speaking the same \nlanguage. Your naming conventions should be consistently used in the design, \ncode, documentation, and any product discussions.\nThe documentation should also specify why you have these variations:\nHow, where, when, and why should you use each variant?\nThe code should also be documented:\nHow does one apply each component, and their variants, in the \ncode?\nDocumentation is a source of truth that reduces the chance of these multiple \nrogue variations happening in the first place. We’ll cover design system \ndocumentation in greater detail later in this book, but for now know it’s a key \nstep not to be overlooked.\nOnce you’ve consolidated, designed, and documented your component — work \nwith a developer to build your new component and all its variants. And once \nit’s built you’ll need to work through the product and replace all the rogue \nvariants with your new, consistent component. Your audit might help you to do \nthis if you’ve already identified where they occur in the product.\nManaging the workload\nNow, let’s not kid ourselves... The iterative approach will no doubt be executed \nover a great period of time — working in sprints — but, ultimately, it will be \nworth the wait.\nIf you’re not familiar with sprints: it’s common practice for in-house design \nand development teams to work in short pre-defined sprints, focussing \non completing a limited (achievable) number of tasks in each sprint. Some \ncompanies even group their sprints by quarter (of the year), aiming to \nachieve specific goals at key stages throughout the year. Sprint and quarterly \n\nAn IterAtIVe ApproACH  125\nachievements can be good for keeping tabs on, encouraging, and reporting the \nprogress of your design system, which helps to keep stakeholders happy.\nOne of the advantages of the iterative approach is that it can be done alongside \nbusiness-as-usual tasks. I recommend advocating for allotting a certain \npercentage of time in each sprint to focus on the design system. If you’ve \ndone a good job selling the system, advocating for its importance, and gaining \nsupport from product managers, developers, and designers, then this should \nbe no issue.\nThe order in which you approach the system — iteratively — is unique to your \nsituation.\nYou could focus by order of importance. For example, focus on a problem \narea based on its affect on the user experience, the severity of the problem \nit’s solving, or even its impact on your team’s happiness or productivity! \nTackling the system by order of importance can be smart, as you (or rather, \nyour stakeholders) might see a more immediate impact — gaining your design \nsystem more support and traction.\nOr you could focus by level of disruption. For example, introducing \nfoundational elements like colours and text styles will likely be less disruptive \nthan, say, introducing a new pattern that’s more noticeably different from its \nsurrounding patterns. I advise starting small with colours and text styles, then \nmove up in scale and disruption (i.e. noticeability by the user) to components \nlike buttons and inputs, and eventually to larger patterns like navigation, cards, \ngalleries, footer, and so on.\nIn time your product will gradually morph into a new look product, powered \nby a design system.\n\n126\nThe Frankenstein monster effect\nWhile designing iteratively has many advantages, it’s easy to lose sight of the \nproduct or brand as a whole. Without careful management, it can lead to an \nunfortunate ‘Frankenstein monster’ effect.\nLet’s step back for a second. It’s not as simple as just taking an ‘iterative’ or \na ‘wholesale’ approach. You must consider the design and brand as a whole, \ncoherent piece. A system without harmony isn’t much of a system.\nA jigsaw puzzle starts as a whole picture before it’s broken down into \npieces. You’d have a terrible puzzle if you designed the pieces first, then \nlater discovered they don’t fit together!\nDon’t create design system elements in isolation, then attempt to fit them \ntogether in a product. Think about the product as a whole — as an experience.\nFIG 6.6 Refinement vs. exploration\n6.7 intercom.com/blog/two-product-principles-often-forgotten/\n\nAn IterAtIVe ApproACH  127\nRefinement vs. exploration\nBased on a concept from the book, Sketching User Experiences by Bill Buxton \n— the following graphic \n(fig 6.6) beautifully illustrates a good point to keep \nin mind when approaching a design system iteratively. Focussing on refining \nwhat you have now — or changing your current design one piece at a time — \ncan blind you to the best solution.\nWhen we design holistically, exploring many alternative solutions, we’re more \nlikely to discover an optimal solution. Then we can refine from there.\nTo quote from an article \n(6.7) by Des Traynor, co-founder of Intercom:\n“Iterating until something is ‘not obviously broken’ doesn’t guarantee \na good product. You can iterate your way to lots of places, including \nmediocrity.”\nThe iterative approach has many advantages, as we’ve covered in this chapter. \nHowever, if you take the iterative approach, don’t focus only on refinement, \nor work with too narrow a focus. Take time to explore each problem area first, \nthen refine. Don’t bypass the opportunity for design exploration altogether.\nThe wholesale approach centers more on design exploration and holistic \ndesign. Let’s look at this approach next.\n\n128\nA wholesale approach\n128\n07\nA \nwhole— \nsale \napp—\nroach\nLAYInG tHe FounDAtIons\n\nA WHoLesALe ApproACH  129\nThe wholesale approach ideally should start in a similar way to the iterative \napproach we covered earlier: by identifying the problems you’re trying to solve. \nA little user and product research wouldn’t hurt either, but we can only cover \nso much ground in this book! So, we’re going to assume that you’re clued up, \nyou’ve identified that a redesign would be a good move for your business, and \nyou have a good idea of the problems you’re trying to solve.\nOkay, now you’re ready for design exploration!\nGround your work in reality\nIf you’re creating a design system for an existing product, then use real \nscenarios from that product(s). Don’t design with convenient content — \nfor example, don’t design using uniformly short names, or headlines that \nconveniently only use four words. Use real (or realistic) content, and use unruly \ncontent too! Let’s be honest, if you’ve been designing for awhile then you know \nwhat some clients are capable of when it comes to content. Is your beautiful, \nDribbble-shot-perfect layout with a large font size and three-word headline \ngoing to work when the client adds a 10-word headline? Use unreasonably long \n(and short) titles. Use awkwardly lengthy words that break the width of content \nareas. Discover the pitfalls in your design and create something responsive \nthat works in the real world, not just in your idealistic, perfect design mockup.\nDesign for all scenarios, not just the best case scenarios. Don’t try to fit the \ncontent to your design. Design for the content.\nIf you’re creating a design system for a new product with no existing content, \nyou still have to design with content in mind. Use a close approximation, or \nwork with a content strategist, copywriter, or user experience expert to get as \nclose as possible to the final content you’ll be using in the product.\nThe goal here is not to create the prettiest system, it’s to design a system \nthat best meets your product, user, and business needs. We do, of course, \nset out to create delightful products, but only because delight can enhance the \nuser experience.\nHave fun with it\nGet your team together. Let your designers flex their muscles. Collaborate, \nbut let your designers express their individual creativity too — they’re on your \nteam for a reason, right? Go far and wide. Explore every angle, style, layout, and \napproach for potential new design directions for your product. Be creative. \nChisel away and simplify until you discover the right style, form, and function.\n\n130\nIf you’ve already established Digital Foundations — as we covered in an earlier \nchapter — or your company has brand guidelines — then use them as a North \nStar, so to speak. If your company has no brand guidelines of any description, \nthen these design explorations will help you discover, flesh out, and document \nyour brand!\nDesign process, systematisation, and documentation\nAs you discover, refine, and arrive at a style and voice that speaks to your \nbrand and solves problems for your product, a design system — or at least a \nconsistent visual language — will start to emerge.\nOnce this consistent visual language emerges, the task now is to document the \ndesign system elements you’ve created, accounting for all states and scenarios . \nDocument your design thinking. How, where, when, and why should you apply \nthe foundations, components, and patterns you’ve created?\nEssentially, you’re creating a comprehensive style guide for your team to use. \nThink of it as a blueprint for designing products at your company.\nFor a more detailed look at the design exploration phase of the wholesale \napproach and its progression towards a design system, you can read my case \nstudy \n(7.1), which gives a detailed account of the process described here.\nBuilding a visual language\nI recommend reading an article (7.2) by Karri Saarinen (7.3), a principal \ndesigner on the Airbnb design team, titled, Building a Visual Language.\nThere are three things worth noting about Airbnb’s approach. Firstly, and \ninterestingly: the Airbnb design team use terms like: “Design Visual Language” \nand “Design Language System,” instead of: “Design System”.\nA language is more than words, it’s about communication. Yes, “system” and \n“language” essentially mean the same thing in this case, but psychologically, \nperhaps the term ‘language’ is less intimidating to a designer than ‘system’? \n7.1 medium.com/@andrewcouldwell/plasma-design-system-4d63fb6c1afc\n7.2 airbnb.design/building-a-visual-language/\n7.3 karrisaarinen.com\n\nA WHoLesALe ApproACH  131\nFor whatever reason, they’ve decided to use terminology that works best for \ntheir team.\nI think Airbnb’s philosophy is a healthy one. Anyone who’s travelled knows \nhow important language is for communicating effectively and clearly, and \nhow wrong it can go when we don’t speak the same language. This is a good \nphilosophy to bring into system design thinking. Whatever terms and naming \nconventions you decide to use — just make sure you’re using a language \nyour team identifies with. The more comfortable they are with it, the more \nsuccessful it will be.\nSecondly, to quote from the Airbnb article \n(7.2):\n“We started by auditing and printing out many of our designs, both \nold and new. Laying the flows side by side on a board, we could see \nwhere and how the experiences were breaking, and where we needed \nto start making changes.”\nAn important thing to note here is that they focussed on product flows and \nthe user experience. They didn’t focus on small, siloed areas of the interface, \nor component parts that make up their products. They contemplated their \nproduct as a whole, as an “experience”.\nAlso, they used real product scenarios. Grounding your work in reality, using \nreal data and scenarios is key. Don’t work with ideals, best case scenarios, and \nconvenient content. Work with what you’ve got — and design a system that \nworks for it — but keep it flexible enough to evolve and account for more than \nyou have now.\nOur goal here is not to create the prettiest system. It’s to create a flexible \nsystem that solves problems, and also delivers a great user experience.\nThirdly: remember when we talked about Digital Foundations earlier in this \nbook? Well, Airbnb thinks about their brand and products in a similar way.\nPrior to their ‘Design Language System’ project, Airbnb’s design team had \nalready defined their equivalent of Digital Foundations by establishing colour, \ntypography, and spacing \n(fig 7.1).\n\n132\nThe exercise now was to build a design system upon those foundations:\n“The foundation proved essential for guiding our work in a unified \ndirection while allowing room for us to individually explore creative \ndesign solutions. This way we felt that we were all working together, \ntowards the same idea.”\nThis is great! Their foundations — remember: Digital Foundations are brand \nguidelines, not a design system in itself — helped them work better as a \nteam, and their designers retained their individual creativity, which is very \nimportant to designers!\n“Reviewing our collective work at the end of each day, we began \nto see patterns emerge. We course-corrected when necessary, and \nstarted defining our standardized components.”\nAirbnb took a holistic approach to create a visual language that worked \nfor their product. They reviewed their work as a team, and their design \nexplorations gradually led to patterns and components emerging throughout \nthe process — ultimately forming their design system.\nFIG 7.1 Airbnb’s foundations\n\nA WHoLesALe ApproACH  133A WHoLesALe ApproACH  133\nThe goal is not to \ncreate the prettiest \nsystem, get more \nlikes on Dribbble, \nor impress your \nfriends — it’s to \ndesign a system that \nbest meets your \nproduct, user, and \nbusiness needs.\n\n134\nBuild and launch plans\nNow, the really tricky part. With your system effectively designed (with the \nwholesale approach), you have a hard decision to make:\n1. Do you build everything behind the scenes, and launch when it’s ready?\n2. Or do you build and introduce the system iteratively over time?\nBrands we associate with high standards for how their brand is executed \n—  like Nike or Apple  — are more likely to take the first approach. It would be \ndamaging to their brand perception to release anything too short of the final \nproduct.\nOn the other hand, smaller businesses that aren’t under the microscope \nas much as bigger brands can afford a more iterative approach, since their \nchanges are more likely to go unnoticed, or at least, won’t light up Twitter!\nIt’s important to factor in whether your business can afford to — or if your \ncustomers/target audience are willing to — wait several months or a year (plus) \nfor you to design, build, and launch a perfect end product. Time-sensitive \ncompanies like startups are less likely to have the luxury of doing months of \ndesign and build work followed by a big reveal, due to their limited funds and \nneed to prove themselves a worthwhile and profitable company in a very short \ntimespan. Often times — dependending on the product and industry — the \nsmart thing to do is to get something out there, test the water, and iterate to \nfind a market fit.\nIt doesn’t have to be perfect\nThere’s no one-size-fits-all approach to how you build and launch a website \nor digital product. You have to do what’s best for your product, team, and \nbusiness. And remember: it doesn’t have to be perfect.\nDesign is a process. It takes time. However, building the system (i.e. \ndevelopment) is the lion’s share of the work! If you spend too long \nperfecting the system  on the design side   you’ll never launch anything!\nYou might not get it right the first time, so consider getting to an MVP \n(minimum viable product) — or a beta launch phase — as fast as possible. This \nway you can soft launch to a limited subset of people, discover any problems, \niterate, refine, and improve before launching to everybody. Let’s look at an \nexample:\n\nA WHoLesALe ApproACH  135\nWholesale design, and an iterative build and launch\nEarlier I mentioned it isn’t always as simple as taking either the iterative \napproach or the wholesale approach; you can combine the two. For example, \nwhen I worked at Behance \n(7.4) on the Adobe Portfolio (7.5) product (fig 7.2) \n— we took a wholesale approach to the design and (most of the) build of the \nproduct, but the launch (and the remainder of the build) was iterative.\nFIG 7.2 Design mockup from the Adobe Portfolio product\nFor context: the new Adobe Portfolio product was replacing an existing \nproduct (Behance ProSite). A decision had been made not to iteratively evolve \nthe existing product, but to start again with a new product (i.e. a wholesale \napproach). There was nothing iterative about this redesign; it was very much \nan ‘out with the old, in with the new’ wholesale approach. We were creating a \nnew code infrastructure, a new design, and a new brand.\nMonths of design exploration and system design work ensued before anything \nsubstantial was built. Once the design was reasonably progressed, I started \nfeeding the developers things to build as fast as I could — starting small with \n7.4 behance.net\n7.5 roomfive.net/adobe-portfolio/\n\n136\nsystem components, and working up to patterns and product features.\nBuilding and launching a product of this size and scope was never going to \nbe easy. We knew what we were creating was ambitious, complicated, and \nmultifaceted. On the one hand, we had a potential target audience (of millions \nof people) to impress and convert to paying customers. And on the other \nhand, we owed it to our existing product users to keep them happy while — as \nseamlessly as possible — transitioning them over to the new product.\nAchieving the above with a ‘hard launch’ would probably have proven futile, \nespecially for a company the size of Adobe. Instead, after months of build work \nwe arrived at an MVP (minimum viable product) version of the product. It was \nbasic, it didn’t include all the features, and it was a little buggy — but it was \nenough to start getting valuable feedback, user testing, and bug reports.\nWe did several phased Beta releases of the product over time. Each release \nopened up the product to more people, building towards an ‘official’ launch \nsome months later.\nWe learned a lot from this beta phase. We especially learned that people didn’t \nalways use the product the way we anticipated they would! But that’s okay. It \nwas better to learn these things in a beta phase — with hundreds/thousands \nof users — than later with thousands/millions of users. People were also more \nforgiving about the limited feature set and bugs in the product because in our \nmarketing we set the expectation that they were using a ‘work in progress’ \nversion of the product.\nThe disruption factor\nAn important factor you should consider when deciding whether to go for \nthe ‘big reveal’ approach to launching a new system — versus an iterative \ntransition — is the effect it will have on your users.\nFor example, think about digital productivity products you use on a daily \nbasis... I mean meticulously use — they’re mission-critical to your job. For \nsome professions, CRM (customer relationship management) products are a \ngreat example of this kind of product. An experienced CRM product user could \nbe so familiar with that product’s user interface, they could almost operate \nit in their sleep. Now consider what happens when they log in one morning, \nand — poof! — there’s a totally new-look product. Suddenly their day-to-day \ntasks aren’t so easy, fast, or efficient. You could go from a satisfied user base to \na frustrated one overnight (remember the Snapchat example in the “Getting \nStarted” chapter). You might even lose those customers — considering your \n\nA WHoLesALe ApproACH  137\nproduct likely isn’t their only option.\nRolling out a design system, responsibly\nBig changes to products that are used daily — or frequently — can be hugely \ndisruptive to your customers’ lives and/or businesses. Not to mention the near \nimpossible task of managing anything that goes wrong with a large launch or \nupdate across so many touchpoints. The support requests alone would cripple \nsome community support and product teams.\nFor these kinds of products (or use cases), it might be better to take it slow.\nMinimise disruption to the user by subtly integrating foundations, \ncomponents, and patterns in sprints. You can scale up, evolve, and improve the \nlook and experience of a product over time — building sustainably towards the \nfull design system integration.\nAnother advantage of this is that you can manage user feedback more \nefficiently. Feedback inline with specific system updates allows you to refine \nand improve on the design system in more targeted and manageable sprints, as \nopposed to being overwhelmed by feedback on the system at large.\nThe disadvantage is it can be frustrating integrating a system in stages. From \na designer/developer perspective, you just want to see ‘your baby’ out in the \nworld. It can feel like an eternity watching your ugly duckling slowly evolve \ninto a swan.\nThe key is not to cause too much frustration at the user’s end. In any form of \ndesign: meeting people’s basic expectations will keep them satisfied, and \ndelighting them is an experience to strive for. It’s crucial to get the basics \nright. That’s what your users care most about. Keep this in mind when rolling \nout your design system.\n\n138\nNow that you’ve learned the pros and cons of the wholesale and iterative \napproaches, you can make a more informed decision about the most suitable \nplan of attack for creating and deploying a design system at your company. Do \nyou take:\n• A wholesale approach to the design, build, and launch?\n• An iterative approach to the design, build, and launch?\n• A wholesale approach to the design, then iteratively build and launch?\n• A wholesale approach to the design and build, then iteratively launch?\nWhichever path(s) you go down for creating your product(s) and brand’s \nvisual language, you don’t want all that hard work to go to waste. You need to \nsafeguard the design decisions you’ve made, and put systems and processes in \nplace to protect the brand and visual language you’ve created. The next couple \nof chapters teach you how to do just that. We’ll also cover how to level up as \ndesigners and design teams by systematising our designs, and creating robust, \nefficient, accessible, and scalable design systems!\n\nA WHoLesALe ApproACH  139A WHoLesALe ApproACH  139\nA jigsaw puzzle \nstarts as a whole \npicture before it’s \nbroken down into \npieces. You’d have a \nterrible puzzle if you \ndesigned the pieces \nfirst, then later \ndiscovered they don’t \nfit together!\n\n140\nSystematising the design\n140\n08\nsys— \ntemat— \nising \nthe \ndesign\nLAYInG tHe FounDAtIons\n\nsYsteMAtIsInG tHe DesIGn  141\nDesigning and building a design system is all very well and good, but your \ndesign team’s continued adoption of the system is the key to its success.\nIt’s important your design team:\n1. Can easily access and design with it.\n2. Understand how to design with it.\n3. Maintain and iterate on it (i.e. the design and code stay in sync).\nWe’ll look at points 2 and 3 in later chapters. In this chapter, we’ll focus on \npoint 1: Ease of access and use.\nSet the system up for success\nAll the design exploration, pretty style guides, Digital Foundations, \ndocumentation, and goodwill in the world won’t help unless your design team \nactually uses your design system and doesn’t fight it.\nI’ve seen this first-hand: there’s a design system in place, yet individuals on \na design team continue to serve up new text styles, buttons, and inputs in \ntheir mockups. It’s frustrating. It creates unrest in the team. Developers get \nfrustrated that designers still aren’t using consistent components. And the \nsystem gradually falls into decay.\nSometimes, there are legitimate reasons to introduce new styles, or new \nvariants on existing foundations, components, patterns, templates, or features. \nWe call this ‘intentional design’, and it’s fine, as long as you document the \nsystem changes accordingly. But the problem I’m talking about comes from \n‘unintentional design’.\nLet’s give the designer who introduces new system elements the benefit of the \ndoubt. Perhaps they didn’t mean to create a new image gallery when there’s \nalready a perfectly good image gallery designed, built, and ready to deploy. \n1. Perhaps they unintentionally deviated from the established pattern.\n2. Perhaps they’re proposing adding a conditional variation to the pattern.\n3. Or perhaps they are proposing a new and improved pattern.\nIf it’s the latter (2 or 3), you should discuss the proposed iteration as a team. If \nit’s the former (1), then you have a problem. An avoidable problem.\n\n142\nYou need a design system library\nIf your design system foundations, components, and patterns are easy to \naccess and use, you’ll be less likely to have the problem of unintentional \ndesign. Think of this collection of design system assets as your ‘design library’.\nHere’s a quote from the Airbnb design team \n(8.1) talking about their design \nlibrary:\n“We collected them [design system components] in a master file \ncalled the library, which we referred to throughout the design \nprocess. After a week or two, we began to see huge leaps in \nproductivity by using the library when iterating on designs. One \nday, while putting together a last-minute prototype, our team was \nable to create nearly 50 screens within just a few hours by using the \nframework our library provided.”\nI’ve seen designers create buttons by drawing a rectangle, changing the colour, \nadding a border-radius, adding some text, and styling the text how they feel \nlike it. They do the same for text input, selects, and so on. The developers build \nthe design mockup they’re given, creating new, one-off components and non-\nreusable CSS each time. Is it any wonder some websites and products have so \nmany different styles when designers work like this? There is a better way.\nIf this were a presentation, I’d now do a live demo. I’d open up a blank \nSketch canvas and create a simple form in a matter of seconds by using an \nexample library of design system components. Anytime I’ve done this it’s \nwowed the audience. But this is no magic trick — it’s just good design system \nmanagement.\nBy creating a library of things like text styles, colours, form inputs, and buttons \n— that anyone on your team can easily access and use in their designs — you \nreduce the likelihood of unintentional design.\nUltimately, your aim is to create a master design system (“library”) file — or \nsource of truth — that your whole team can easily access and sync any updates \nmade to it. This file (or whatever form it takes) becomes your design library.\nThe library should contain reusable elements from your design system that \n8.1 airbnb.design/building-a-visual-language/\n\nsYsteMAtIsInG tHe DesIGn  143sYsteMAtIsInG tHe DesIGn  143\nAfter a week or two \nwe saw huge leaps in \nproductivity by using \nthe library when \niterating on designs. \nOne day our team was \nable to create nearly \n50 screens within \njust a few hours.\n\n144\nyou commonly use in your design mockups, such as text styles, form inputs, \nand buttons. It should also include all their variations and states (e.g. a text \ninput’s placeholder, value, hover, error, and disabled states).\nIdeally, any changes you make to the master design library file should sync to \nyour design files, keeping your design mockups in sync with the system. It’s \nnot perfect, but you’re essentially trying to simulate a built environment (e.g. \nSass, CSS, HTML, JS, React) in a design tool.\nThe idea is your design team can insert any of these elements into their design \nmockups. Of course these elements need to be editable, but within consistent \nparameters. For example, if you have two buttons in your design system — a \nblue button and a green button — the designer should easily be able to choose \nbetween blue and green, but not make it pink. The data/text content/value also \nneeds to be editable, which means your components need to be responsive so \nthey will work with variable amounts of content.\nConstraints are not a bad thing\nWhen we talk about using design libraries, we are essentially talking about \nsetting ‘constraints’ for designers, but this shouldn’t be viewed as a negative.\nPre-made components and pre-defined text styles only help designers do their \njob. It’s important that designers on your team understand this, and don’t view \ndesign systems as taking away — or restricting — their creative freedom.\nFor example, you can design something like a form very quickly — even in \nseconds — using a library of pre-made components like inputs, selects, radio \nbuttons, and buttons. This is much faster than meticulously creating each \ncomponent from scratch (risking unintentional variations), or copying and \npasting components from one design file to another.\nThe constraints a design library puts in place help maintain consistency, and \nvastly increases speed and efficiency.\nFreeing designers from re-creating the same foundations, components, and \npatterns over and over again allows them to focus on more important things, \nlike creating or iterating on features, flows, and user experiences.\n\nsYsteMAtIsInG tHe DesIGn  145sYsteMAtIsInG tHe DesIGn  145\nFreeing designers \nfrom re-creating the \nsame design elements \nover and over again \nallows them to focus \non more important \nthings, like iteration, \nnew features, and \nuser experience.\n\n146\nTools for the job\nI stated at the start of this book that it would be futile to dive too much into the \ntechnology side of design systems in print. Design tools evolve so fast that the \nwords I freeze in time in this book may no longer apply by the time you read \nthis. With that said, I don’t want to leave you empty-handed, so I’ll talk a little \nabout design tools to consider.\nWhere Photoshop was once the industry standard for web designers, the \nneed for a vector based, dynamic, and specialist user interface design tool \nbecame clear circa 2015(-ish). There are now a host of options out there! Below \nis a brief introduction to just a few of them, and there are more up-to-date \nresources and links on this book’s website \n(8.2).\nIn the beginning of this revolution of new design tools, Sketch \n(8.3) quickly \nrose to fame as the popular choice for web and product designers. Sketch’s text \nstyles and responsive, nested symbols (for editable, reusable components) — \npaired with Sketch Library \n(8.4) — are superb for working with and managing \na design library. This is the design toolset I’ve used since 2016 for web design \nand to create design systems that power large design teams and entire suites of \nproducts, so I can speak first-hand to its excellent performance.\nI’ve also created a Skillshare class \n(8.5) showing how I currently (at the time of \nthis book’s publication) set up symbols in a design library in Sketch.\nWhile I have no experience using the following design tools, I’ve heard good \nthings:\n• Framer X (8.6) is a design tool doing amazing things to bridge the gap \nbetween design and code. You can create interactive, animated, reusable \ncomponents. You can even design with React components from production \n(i.e. your real product).\n• Adobe XD \n(8.7) is a design tool to keep an eye on. It’s been in a work in \nprogress for sometime now, but they have a great team working on it and its \nprogression is encouraging. \n• For something different, Figma \n(8.8) is a browser-based design tool (not \nsoftware) that allows multiple designers (and other stakeholders) to work \nsimultaneously on a design.\nAnd then there are designers who consider any code editor to be a design \n8.2 designsystemfoundations.com/resources/\n\nsYsteMAtIsInG tHe DesIGn  147\ntool — using production code, ‘sandbox’ test environments, designing in the \nbrowser, and prototyping with ‘real’ (built) components. I count myself among \nthose designers — I love to iterate on responsive designs and animations live \nin the browser, to really hone the design and user experience.\nAt the end of the day, I’m not here to tell you what tools to use. They’re just \ntools. It’s up to you to discover which processes and tools work best for your \nteam’s preferences, comfort, skill sets, and aptitudes. And it’s probably a good \nidea to agree on one tool, which your whole team uses — so you avoid different \nversions of the same design system elements being created and used in \ndifferent software!\nNaming conventions\nAs I’ve mentioned before, naming conventions are important in design \nsystems. Each text style, colour, component, and pattern in your design system \nshould have a unique name, and it’s important that the name you use in your \ndesign library, matches the code and the documentation.\nThe idea is this: if you state the name of a text style, colour, component, or \npattern in a design mockup — or in a product discussion — then the other \npeople on your team (designers, developers, and product managers) should \neither know exactly what you’re referring to, or be able to look it up in your \ndocumentation (aka the source of truth).\nIt helps to be systematic about your naming conventions. It seems boring, but \nfor example, naming text styles “Title 1” through “Title 5” (reducing in size the \nlarger the number) is a lot easier to understand than naming them something \nlike “Daisy” or “Yosemite”. While it might be fun to come up with humorous or \ndescriptive names for system elements — your naming conventions need to \nmake sense to more people than just you and your friends on your team. They \nneed to resonate with the whole team, new people onboarding to the team, and \nsemantically make sense in the code.\n8.3 sketch.com\n8.4 sketch.com/docs/libraries/\n8.5 skl.sh/2xWBObZ\n8.6 framer.com\n8.7 adobe.com/products/xd.html\n8.8 figma.com\n\n148148\nFIG 8.1 Text styles with semantic names from clubofthewaves.com\n\nsYsteMAtIsInG tHe DesIGn  149\nThe example (fig 8.1) from the Club of the Waves website demonstrates simple \nand semantic naming conventions for foundational text styles.\nIt also helps if your naming conventions are scalable. As digital products \nevolve, new scenarios call for new foundational elements (like colours and text \nstyles), or new components and patterns. If you have a colour named “Ocean \nBlue”, what happens when you need to add a second blue, or a lighter shade of \nthe same blue? Do you then have “Ocean Blue”, “Lighter Ocean Blue”, “Winter \nBlue”, “Sky Blue”, and so on? You need a more semantic (i.e. logical) approach \nto naming.\nFor example, following a colour audit of their website, Hipmunk \n(8.9) \ndiscovered they were not only using a wide array of colours for warnings and \nerrors, but the names they had given these colours were likely contributing \nto so many new colours being introduced. Below \n(fig 8.2) is a sample of what \ntheir audit discovered:\nFIG 8.2 A colour audit reveals none semantic names and rogue colours\nA name like “Alert Red” works on its own — it’s clear to designers and \ndevelopers what the colour’s intent is. However, if you also have “Warning \nRed”, “Warning Pink”, and “Hip Error” — like Hipmunk do — then you have a \nproblem.\nLater in this chapter, we’ll look at how to create and name a system of colours \nusing a similar approach to Google Material \n(8.10), who created a range of \n8.9 uxdesign.cc/hipmunk-design-system-part-1-colors-ux-case-study-\n1ac99806aabd\n8.10 material.io/design/color/the-color-system.html\n\n150\ncolours based off one brand colour. Something like this (fig 8.3):\nFIG 8.3 Light and dark variants generated from a base colour\nNote their numeric naming conventions. The higher the number, the darker \nthe colour.\n“The Material Design color system uses an organized approach to \napplying color to your UI. Dark and light variants of each color can \nthen be applied to your UI in different ways. The variants help create \na color theme that is harmonious, ensuring accessible text, and \ndistinguishing UI elements and surfaces from one another.”\n8.11 brand.opentable.com/color/\n\nsYsteMAtIsInG tHe DesIGn  151\nYou don’t have to assign numeric values to make naming conventions work, \nbut you do need some logic in place. In stark contrast to Google Material, \nOpenTable \n(8.11) name their two primary brand colours “Early Girl” and \n“Blueberry” \n(fig 8.4):\nFIG 8.4 OpenTable’s colour system documentation\nOn their own they are arguably confusing, but they make more sense when \nyou see them in the context of their secondary brand colours \n(fig 8.5). Their \nprimary brand colour, “Blueberry” is blue, but they also have two colours \nnamed “Blue” and “Teal” in their secondary palette.\nYou can certainly argue OpenTable are walking a fine line, semantically, but in \nthis case, their use of a ‘human’ name for their brand primary colours is fitting \nto their brand ethos. It would get messy if they named all their colours so \nrandomly, but confining the quirky names to the primary brand colours, then \nusing more distinctive naming conventions for their other colours, creates just \nenough distinction for it to work.\nWe’ll cover the logic behind OpenTable’s use of colour more in the next \nchapter.\n\n152\nColour system\nColour is tricky. It’s easy to say: “Our brand colours are X, Y, and Z. Only use \nthese colours.” But then, with such a limited colour palette, what do you use for \na hover state? What do you use to communicate an error? If you want to create \na subtle differential in content using a background colour, what do you use?\nA colour audit I conducted at a previous job uncovered several different shades \nof the ‘same’ colour. The actual brand colour had been lost over time.\nWe’ve all done it. You ‘need’ a new colour. You open up your colour picker \nand drag the picker slightly up/down/left/right, picking the colour that feels \nright. This is ‘fine’ for one-off website projects, but not for a team of designers \nworking on the same product(s). If other designers on your team do the same \n— picking random colours, multiple times, in different scenarios — over time, \nthis results in numerous hex values (e.g. \n#b85c35) in your CSS, used erratically \nand inconsistently throughout your product. Not very systematic, is it?\nI advise you to look at colours as a system within a system. Think about these \nthings, relating to colour:\n• Your brand identity: the core colours of your brand.\n• Headers and copy: typically dark text on a light background.\nFIG 8.5 Primary and secondary colour palettes and their use cases\n\nsYsteMAtIsInG tHe DesIGn  153\n• Scenarios like navigation, links, errors, and success states.\n• Backgrounds and subtle deviations in background colours.\nTo combat designers picking random colours, I advise your design system \ninclude a range of colours to cover these brand and digital content scenarios. \nThis is where Sass — which we discussed briefly in the “Code Audits” section \nof “An Iterative Approach” chapter — can be a game-changer. For the non-\ndevelopers: think of Sass as an advanced form of CSS. It allows us to — among \nother things — systematically create new colours. We can take a base colour \nand darken it by 10%, lighten it by 10%, or adjust it by any percentage we like.\nP.S. Don’t worry if you don’t know Sass. Work with a developer. It won’t be \nhard for a front-end developer to spin this up for you. You can also use an \nonline Sass colour generator \n(8.12) to get the color values you need. And if you \nwant to learn Sass, I recommend the book, Sass for Web Designers \n(8.13) by \nDan Cederholm \n(8.14). This is the book I bought and worked through when I \nfirst learned Sass.\nDecide on a base colour for each (brand) colour in your system. For example, \nyour base colour for blue could be: \n#62a5d7. From that base colour, use Sass to \ncreate a range of colours based on that value, like so \n(fig 8.6):\nFIG 8.6 Sass generated colour sytsem\n\n154\nIn the example (fig 8.6), note the two base colours in the middle of both \nranges: “\n$blue50” and “$red50”. For each base colour I’ve created three darker \nvariants by darkening the colour in 10% increments, and three lighter variants \nby lightening the colour in 10% increments.\nA colour system like this makes it easy to choose colours for different \nscenarios without the need to introduce new, rogue colours and code. For \nexample, from our colour system pictured above, you might choose \n$red50 as \nthe background colour for a button, and choose \n$red60 as the hover state, like \nin the following example \n(fig 8.7).\nThe great thing about this Sass colour system is its scalability. This process \ncan be applied to any brand colour, creating a versatile range of colours \nwith minimal effort. Best of all: if you change a brand colour, you need only \nchange the one base colour and all other colours in that range will update \nautomatically in your Sass!\nFIG 8.7 Colour system at work with different button states\nNaming colours\nAs we discussed at the beginning of this chapter, the naming conventions you \nuse for colours should be the same in the design and code. If a designer says to \nuse the “red30” colour, then the developer should know what they mean and \neasily be able to apply that colour.\nIt might seem extreme, but to avoid any conflict in this area, I like to name \ncolours (exactly) the same as they appear in the code, as Sass variables. \nAnything you can do to bridge the gap between design and engineering is a \npositive.\nLet’s break this naming convention down:\nFirstly: in the code, Sass variables are preceded by a “\n$”.\n\nsYsteMAtIsInG tHe DesIGn  155\nSecondly: assigning a numeric value to each colour in your range — from \nlight to dark — avoids any confusion around vague terminology like “darker” \nor “lighter”. I advise starting at something like 50 (or 100), to avoid negative \nnumbers. In our example:\n• “50” is always the base colour.\n• “60” is darker, “70” is darker still, then “80”.\n• “40” is lighter, “30” is lighter still, then “20”.\nI use two digits, as opposed to one (e.g. 50 instead of 5), so you have the \nflexibility to add as great a range of colours as you need. For example, you could \nlater decide to go in 5% increments — instead of 10% — like in the following \nexample \n(fig 8.8), adding a $blue55 between the $blue50 and $blue60 \ncolours.\nI would recommend not having too great a range (of colour variants) in \nyour colour system. Remember the constraints we talked about earlier — \nconstraints can be a good thing.\nTry it for yourself\nYou can access and edit the Sass colour system used in our example on \nCodePen \n(8.15). Access the CodePen link, then go ahead and change the hex \nvalue (e.g. \n#62a5d7) of one of the three Sass variables (e.g. $blue50) and see \nwhat happens. You can also use this code to create your own colour system!\nGuidelines for colour\nAnother good point to consider when defining a colour palette for your brand \nare the use cases and intent of each colour. Rather than having a mass palette \nof colours that can be used in any number of ways, it’s smart to define colour \ngroups, like for example, ‘Primary’, ‘Secondary’, ‘Utility’, ‘Accent’, ‘Tertiary’, and \nso on. Let’s unpack what I mean by this.\n8.12 scg.ar-ch.org\n8.13 abookapart.com/products/sass-for-web-designers\n8.14 simplebits.com\n8.15 codepen.io/roomfive/pen/ybYQZP\n\n156\nFIG 8.9 Distinctive primary colours of two different brands\nPrimary brand colours\nPrimary brand colours are arguably the most important. They are typically \nthe core colours that make up your brand. For example, EE’s primary brand \ncolours are aqua and yellow, where Coca-Cola’s are red and white \n(fig 8.9). \nPrimary brand colours tend to be used for prominent elements like calls to \naction and backgrounds. They may also be used for large headers, but are \nless likely to be used for copy (if only for their accessibility). For example the \nFIG 8.8 Sass generated colour sytsem\n\nsYsteMAtIsInG tHe DesIGn  157\nyellow in EE’s brand (fig 8.9), used for copy text, wouldn’t be legible on a white \nbackground.\nFIG 8.9 Distinctive primary colours of two different brands\nUtility colours\nUtility colours tend to be colours like black and shades of gray. They are used \nfor copy and headers. They pair well and contrast with the primary colours, \nto create distinction and hierarchy. Keep accessibility in mind when defining \nutility colours, making sure any grayscale colours you use for copy are legible \non a light background colour.\nSecondary, tertiary, or accent colours\nAny other colours in your palette — in addition to primary and utility — are \nmore of a ‘supporting cast’. Secondary, tertiary, accent — or whatever you call \nthem — colours should be used less frequently than your core primary and \nutility colours. These colours can be functional, like red for warnings or green \nfor success. Or they can be complementary, giving you greater flexibility in \nyour designs for things like background colours, for example.\nLimited text styles\nMoving on from colour. You should explore a wide variety of scenarios to \ndiscover the different text styles needed in your product. Aim to consistently \nuse a limited number of text styles, and only create new text styles when you \nneed them. You probably don’t need that many.\nI would aim for only a few header styles, and a few copy styles.\n\n158\nDepending on your brand and use cases of your design system, you may want \nto keep the application of these text styles flexible, or document specific use \ncases for each style. For example, a specific header style might be so large and \nimposing that the documentation instructs limited and specific use cases \nfor it. Take the example below, from the Plasma design system \n(8.16). This \nFIG 8.10 Two patterns using the same text style\n\nsYsteMAtIsInG tHe DesIGn  159\nparticular text style is so large, it’s only intended (and documented) use cases \nare in the two patterns \n(fig 8.10):\nSimilarly, a larger copy style might be intended only for opening paragraphs \nof copy or used to distinguish quotes. You might have a text style intended to \nbe the default text style for all body copy in articles, blog posts, web pages, and \nso on. And a particularly small copy style might be limited to use cases like \ncaptions, footnotes, and warnings.\nImportantly, you should document any formatting guidelines for each text \nstyle. If your team doesn’t understand the significance of, or logic behind each \ntext style, then how do you expect them to apply them correctly?\nFIG 8.11 Text styles from clubofthewaves.com\n8.16 roomfive.net/plasma-design-system/\n\n160\nTake the example (fig 8.11). Looking only at three text styles from this design \nsystem, the following guidelines apply:\n• Headers should never end with a period (“.”).\n• All header styles except ‘Title 1’ should be sentence case (with the exception \nof names of places and people).\n• ‘Title 1’ should always be lowercase.\nEditable components\nEstablishing a shared library of editable components is key to unlocking the \nspeed, ease, and efficiency design systems can bring to the design process. I’m \ntalking about designers being able to:\n1. Easily and quickly insert pre-made components into their designs.\n2. Edit the component’s content.\n3. Switch between its different states (we’ll cover those next).\n4. Sync any updates made to the component (we’ll cover this in the \n“Maintaining a Design System” chapter).\nPerhaps most importantly, a library of editable components practically \nremoves any chance of designers deviating from the established system \ncomponents, as you can control what is and isn’t editable about each \ncomponent. So for a button: you want designers on your team to be able to edit \nthe text on the button, but you don’t want them to edit the font family, font \nweight, font size, font colour, background colour, border-radius, height, and so \non.\nIt’s important to lock down the design of components in a shared library, \nhowever, if you do want to edit one instance of a component, some design \ntools make it easy to do so. For example, Sketch symbols \n(8.17) allow you to set \noverrides for specific parts of a component (e.g. you can edit just the text, or \nthe icon and the text).\nContinuing with our Sketch symbols example: as well as being editable, \nsymbols are also responsive, and are intended to be reused multiple times in \nyour design mockups. The idea is that you edit the master symbol in one place, \nand your change is applied in every instance the symbol is used! This can \nbe really powerful in designs where a component is used dozens of times in \ndifferent mockups, artboards, and scenarios.\nThe following screenshot \n(fig 8.12) shows a symbol with the Overrides panel \nopen to the right of the screen. The example shows that I can only edit the \n\nsYsteMAtIsInG tHe DesIGn  161\ntext (“View photographer”) and nothing else about this particular button \ncomponent.\nFIG 8.12 Editable symbol with overrides in Sketch\nI would love to show you how powerful a design library of system components \ncan be, but it’s hard to do so in print. So I’ve created a Skillshare class \n(8.18) \nshowing how I currently (at the time of this book’s publication) set up editable, \nresponsive, and syncable symbols in Sketch.\nFIG 8.13 Colour system at work with different button states\nCover all states of components\nYour design system and library should include all possible states for each \ncomponent. For example, a button might have a normal, hover, and disabled \nstate. The image above \n(fig 8.13) shows three states for the same button \ncomponent — its normal, hover, and disabled states.\n\n162\nAside from obvious states like a button’s hover state, or a text input’s \nplaceholder and value states — remember that all or most of your system \ncomponents will likely have different states to cover a wide variety of product \ninteractions and scenarios. For example, components like radio buttons \nand checkboxes come in ‘checked’ and ‘unchecked’ states. They can also be \ngrouped by ‘fieldset’, requiring a ‘legend’ to make sense of what the options are \n(for accessibility and a good user experience).\nBelow \n(fig 8.14) is an example of design system documentation for radio \nbuttons, with a visual demonstrating the different states, and text explaining \nthe what, why, where, and when of using this component. The components \nseen in this visual \n(fig 8.14) are all easily accessible by the team working with \nthis design system — which the Skillshare class \n(8.18) mentioned earlier \ncovers how to create and setup.\nFIG 8.14 plasma.guide/form-specs/\nProviding your designers with easy access to these different states, types, \nand groupings of components (plus documentation) is a real timesaver, and \nensures consistent systematic design. It also removes the guesswork for \ndevelopers; if you fail to define the styles for these alternate states, they may go \n8.17 sketch.com/docs/symbols/\n8.18 skl.sh/2xWBObZ\n\nsYsteMAtIsInG tHe DesIGn  163\nrogue and invent their own, sometimes with less than desirable results.\nPattern library\nCreating a library of established patterns can be as valuable as a component \nlibrary. For example, if you’re creating a new template (or page) for a website, \nchances are that web page will use the same global footer (pattern) as the rest \nof your website. Creating an easily accessible (and insertable) footer pattern \nwill save your design team a lot of time, and avoid any confusion on the \ndevelopment side.\nThe image below \n(fig 8.15) is an example of a responsive footer pattern — \nready and easily accessible to drop into any design mockups.\nFIG 8.15 A responsive pattern ready to insert into design mockups\n\n164\nResponsive design\nI’ve always tried to encourage responsive design with visual design teams I’ve \nworked with. Your design library can help with this. At the time of writing this, \ndesign tools like Sketch are brilliant for creating responsive components, but \nFIG 8.16 A responsive pattern from clubofthewaves.com\n\nsYsteMAtIsInG tHe DesIGn  165\nnot so great for (some) responsive patterns. Patterns are more susceptible to \nthings like content wrapping, variable heights, and stacking of content (e.g. 3 \ncolumns on desktop become 1 column on mobile).\nIf the design tool you use can’t effectively achieve a responsive pattern, then \nyour design library should at least cover how the pattern appears at different \nbrowser widths or device sizes. For example, see how the footer pattern \n(fig 8.15) and the following example pattern (fig 8.16) respond at three \ndifferent browser widths.\nHaving responsive, established design system patterns like the example above, \ndesigned and ready to easily drop into future design mockups is a valuable \ntimesaver, and ensures your design team don’t recreate them — slightly \ndifferent each time — introducing unintentional amendments to the code, or \nrogue elements being introduced.\nDesign tokens and Sass variables\nThis is one of the rare points in this book where we’ll cover a more code-\nfocussed topic. While the execution of design tokens and Sass variables is \na task for a developer, and very much a code-based thing, they are based on \nsystematic design decisions (made by designers). So let’s cover it — that way \nyou can sound super smart when you ask developers about it! ;)\nAs this is a project that requires designers and developers working together, \nmy advice is to strike up a conversation with the developer(s) on your team that \ncares most about the front-end, and ask them about creating Sass variables \nand design tokens.\nWe talked about Sass variables relating to colour earlier in this chapter. Sass \nvariables are a valuable asset in design systems. They are snippets of code used \nrepeatedly throughout a code base, but controlled from one central source. \nIf you change a Sass variable or design token at the source, it will change \neverywhere it is used!\nIn the words of Salesforce’s Lightning design system:\n“Design tokens are the visual design atoms of the design system \n— specifically, they are named entities that store visual design \nattributes. We use them in place of hard-coded values (such as hex \nvalues for color or pixel values for spacing) in order to maintain a \nscalable and consistent visual system for UI development.”\n\n166\nThe Lightning design system’s documentation has an entire page dedicated \nto its design tokens, categorised by their function. The screenshot \n(fig 8.17) \nshows their design tokens relating to colour.\nDesign tokens are very similar to Sass variables, in that they are (ultimately) \nsnippets of code used repeatedly throughout a product, controlled from one \ncentral source. Sass variables and design tokens can work harmoniously \ntogether to give you a great deal of control over the system at large.\nFIG 8.17 lightningdesignsystem.com/design-tokens/\n\nsYsteMAtIsInG tHe DesIGn  167sYsteMAtIsInG tHe DesIGn  167\nStrike up a \nconversation with \nthe developer on \nyour team that \ncares most about the \nfront-end, and ask \nthem about creating \nSass variables and \ndesign tokens.\n\n168\nThe difference between a Sass variable and a design token\nA Sass variable is a generic, reusable value — it can be applied in a great \nnumber of different scenarios. For example, it could be a brand colour, which \ncan be applied to anything from headers to copy, backgrounds, links, buttons, \nicons, and so on.\nA design token is a more specific value, but it’s also reusable. A design token \ncan serve specific purposes, like specifying:\n• Section colours\n• Background colours for use in specific scenarios or patterns\n• Small spacing, versus large spacing\n• Font sizes\n• 5% opacity, versus 50% opacity\n• Global states for ‘disabled’ and ‘active’\nDesign tokens essentially store design decisions — like colour, size, and \nspace — which can be systematically applied throughout a product.\nUse cases\nIf you only introduce Sass variables in your CSS, you’ll have made a big \nimprovement. But even Sass variables have their drawbacks, systematically \nspeaking. For example, take these two scenarios: Option 1 and Option 2. In \nboth cases we want to apply a background colour to a website (applying CSS to \nthe \nbody tag).\nDesign token\n$color-background-light: #ffffff;\nThe design token can be applied in the CSS like so:\nbody {\n  background-color: $color-background-light;\n}\nFIG 8.18 Option 1: design token\n\nsYsteMAtIsInG tHe DesIGn  169\nOption 1 (design token)\nThe first option uses a design token. We’ll use a real design token from the \nLightning design system, called: \n$color-background-light. This design \ntoken is simply the colour white (\n#ffffff). Our design token and CSS look like \nthis \n(fig 8.18).\nOption 2 (Sass variable)\nThe second option instead uses a Sass variable to apply the background colour. \nOur Sass variable and CSS look like the following \n(fig 8.19):\nSass variable:\n$white: #ffffff;\nThe Sass variable can be applied in the CSS like so:\nbody { \n  background-color: $white; \n}\nFIG 8.19 Option 2: Sass variable\nSo far so good. Both options look very similar, and both work fine!\nNow, consider this:\n• The Sass variable we used (\n$white) is incredibly generic, and is used in \ndozens of places throughout our website. It could be used for text colours, \nsvg colours, or any other object that is white.\n• In contrast, the design token we used (\n$color-background-light) is \nspecifically used as a background colour.\nScenario: we want to change our website’s background colour to be a slightly \noff-white colour (or any light colour).\n1. In Option 1 (design token) we’d be okay, as we’d be making a global change \nto a design token intended only for scenarios just like or similar to this one. \nChanging from white to a new colour will likely be fine.\n\n170\n2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in \nseveral places — changing the colour of the Sass variable to a new colour \ncould cause problems elsewhere in our website.\nIt’s complicated, I know. But you should consider these caveats when deciding \non design tokens and their use cases in your system.\nBuzzFeed’s Solid design system uses design tokens for specific use cases of \nFIG 8.20 solid.buzzfeed.com/colors.html\n\nsYsteMAtIsInG tHe DesIGn  171\ncolour in text (fig 8.20), links, and even SVG fill colours.\nNotice: Solid’s design token \n$text-green is intended to be used to make text \ngreen (obviously), but it’s not saying specifically what green colour. Designating \na token for a specific scenario is good, since you may use a darker shade of \ngreen for text (for legibility purposes), and a lighter shade of green for icons or \nbackground colours — in which case you could also have tokens like: \n$icon-\ngreen\n and $background-green.\nLonely Planet’s design system, Rizzo \n(fig 8.21), includes design token \ndocumentation for colour that are clearly and effectively presented and \norganised by function (e.g. “UI background and borders”, or “section colours”). \nA really neat feature on this page is the ability to copy the hex value to your \nclipboard simply by clicking on the colour.\nFIG 8.21 rizzo.lonelyplanet.com/styleguide/design-elements/ui-colours\n\n172\nCombining Sass variables and design tokens, for the win\nIf you want to get really smart, you can combine the two together to form the \nmost efficient, scalable, and easily updatable system \n(fig 8.23):\nDesign token and Sass variable combined:\n$white: #ffffff;\n$color-background-light: $white;\nOur Option 1 and 2 scenario (from earlier) is now a little \neasier to solve:\n$white: #ffffff;\n$off-white: #f9f9f9;\n$color-background-light: $white;\n$color-background-light: $off-white;\nFIG 8.23 Combining Sass variables with design tokens\nFIG 8.22 vueds.com/example/#/Design Tokens\n\nsYsteMAtIsInG tHe DesIGn  173\nNow for a full example! Don’t worry if you don’t know code, I’ve attempted to \nbreak down what’s happening to show Sass variables, design tokens, CSS, and \nHTML at work \n(fig 8.24):\nSass variable:\n$blue50: #62A5D7;\nDesign token, using the Sass variable:\n$brand-color-primary: $blue50;\nDesign token applied to a text style in the CSS:\n.primary-header {\n  color: $brand-color-primary;\n}\nCSS applied to a header in the HTML:\n<h1 class=”primary-header”>Hello</h1>\nFIG 8.24 Sass variables, design tokens, CSS, and HTML\nThe above code gives us this in the browser:\n\n174\nNow, to use our same example again. If we add a new Sass variable ($red50), \nthen change our \n$brand-primary design token to use $red50 instead of \n$blue50, the change will ‘auto-magically’ take effect in the front-end (website). \nLike so \n(fig 8.25):\nSass variable:\n$blue50: #62A5D7;\n$red50: #b85c35;\nDesign token, using the Sass variable:\n$brand-color-primary: $blue50;\n$brand-color-primary: $red50;\nFIG 8.25 Combining Sass variables with design tokens\nThe above code gives us this in the browser:\nThis might seem like a simple change (in our example), but imagine these \ndesign tokens used in dozens or hundreds of places throughout a product! You \ncan see how powerful design tokens can be.\nNot just for colour!\nWe’ve only looked at colour so far, but Sass variables and design tokens can \nbe used for anything from font families to font sizes, line heights, spacing \n(margins and padding), radius, shadow, and so on. They can be used for \nanything that’s reused consistently throughout a product. For example, the \nVue design system documentation \n(fig 8.22) also includes design tokens for \nspacing.\n\nsYsteMAtIsInG tHe DesIGn  175\nIt’s good practice to use consistent spacing in digital design, and chances are \nyou’ve defined some logic for that spacing. If you’re obsessive like me, you \nmight like working with simple numbers that are divisible by 5 — something \nlike: 5px, 10px, 15px, 20px, 30px, 60px, 90px, 120px. Or if you’re using a grid \nsystem — like the ‘8-point grid system’ — you would use: 8px, 16px, 24px, 32px, \n40px, 48px, 56px, and so on.\nFIG 8.26 primer.style/css/support/spacing\nGitHub’s Primer design system uses the 8-point grid system, and they’ve \nincluded a page \n(fig 8.26) in their documentation relating to their variables \nused for consistent spacing. Notice in their system: it’s smart that they’ve \nadditionally added a variable for 4px. A minimum spacing of 8px is a little \nlimiting.\nDesigner access to code\nI’d like to make an argument for granting designers (not just developers) access \nto the code. This will scare some, and excite others. Developers can be very \nprotective of their code bases, with good reason. However, they also don’t \nlove getting ‘bugged’ by designers to make (seemingly) small updates to the \ncode. The easiest way to avoid this is for designers to gain access to the code \n\n176\nthemselves. Design tokens make this process so much easier.\nEven if a designer only has access to the design tokens and Sass variables, they \ncan achieve a lot — quickly — without disturbing developers. If they want to \nchange the colour blue used in X scenarios, they can. If they want to increase \nthe space between X and Y elements throughout the product, they can.\nDesigners that code\nWeb designers having even a little knowledge of code will go a long way. I can’t \nrecommend enough that designers get comfortable with — at least — CSS \nand HTML. It simply will make you a better web designer if you gain a deeper \nunderstanding of your craft. You may be surprised by how much you enjoy it. \nIt’s fun and very satisfying to bring your own creations to life, and iterate on \nthem in the browser!\nThat said, even if you’re not planning to build websites yourself, a little \nknowledge of code is all you need to update things like design tokens. I really \nbelieve that anything that brings designers and developers closer together is a \ngood thing. Speak to the developers on your team about gaining access to the \ncode.\nIf you want to go deeper into the realms of ‘the role of development in design’, \ncheck out this article \n(8.19) I wrote on responsive design.\nTracking and organising system tasks\nAs you may be realising, creating a design library is a lot of work! You’re \ngoing to need to get organised, keep track of ‘to-dos’, and know who’s doing \nwhat (on your team and/or across your different teams). Everyone has their \npreferences for tracking tasks and delegating. Some use tools like GitHub \nIssues, Basecamp, Dropbox Paper, Asana, or Jira. My tool of choice for tracking \nmassive projects like product and system design is Trello \n(8.20).\nI love the simplicity of Trello. It allows you to create boards to track projects, \nmilestones, or sprints. Within each board, you can create cards to represent \ntasks. Within each card, you can describe the task, and create checklists \n8.19 medium.com/@andrewcouldwell/responsive-design-af7a1f14b991\n8.20 trello.com\n8.21 roomfive.net/adobe-portfolio/\n\nsYsteMAtIsInG tHe DesIGn  177\nfor everything that needs to happen to complete the task. You can sort the \nchecklists by sub-headers, drag and drop everything to re-order and prioritise, \nset a due date, add attachments, assign cards to different team members, and \nyour team can comment on tasks.\nThe example screenshot \n(fig 8.27) is of my Trello board from 2015/16, which I \nused while designing Adobe Portfolio \n(8.21):\nFIG 8.27 My Trello borad from 2015 while designing Adobe Portfolio\nThe columns (fig 8.27) are different boards I created to mark milestones and \ntrack tasks (cards) that needed to be completed. For context, all the green \nmarkers signify that I’d completed those tasks (bearing in mind this is an old \nTrello board!) — back in 2015/16, there would have been a sea of red markers \non this board, which I gradually turned to green over time!\nThis was a massive project spanning system design, product design, web \ndesign, marketing, and brand. Organisation for so many tasks and deadlines \nwas crucial. This was my first real test of Trello, and it served me well! The text \nis small, but perhaps you can make out \n(fig 8.27) that some of the tasks only \nhad one checklist item to complete the task, where others had 20+ checklist \nitems.\n\n178\nOne of my favourite features is when you ‘tick’ tasks off a checklist — or \nadd more tasks — a percentage complete bar dynamically fills to show your \nprogress. It’s painfully nerdy, I know, but there’s something very satisfying \nabout checking tasks off and seeing your progress. You can see in the \nscreenshot below \n(fig 8.28) that the first checklist is 100% complete, but the \nsecond checklist is only 82% complete.\nFIG 8.28 Checklists to track to-dos and progress of tasks\n\nsYsteMAtIsInG tHe DesIGn  179\nLook how far we’ve come!\nWe’ve covered a lot in this chapter, from creating a shared design system \nlibrary of editable components, to pattern libraries, responsive design, naming \nconventions, working with colours, text styles, spacing, designers writing code, \nand creating design tokens. My hope is that you now have a good idea of how to \ngo about systematising your designs and working more efficiently as a team.\nNext we’re going to talk about a very important part of creating a design \nsystem: the documentation.\n\n180\nDocument everything!\n180\n09\nDoc— \nument \nevery— \nthing!\nLAYInG tHe FounDAtIons\n\nDoCuMent eVerYtHInG!  181\nDocumentation is fundamentally important for design systems. Don’t be \nfooled by this chapter appearing so late in this book — this isn’t an indication \nthat you should leave documentation until last. You shouldn’t. You should \ndocument design and code as you progress, as part of your process.\nMore than a style guide\nA system wouldn’t be a system without rules and guidelines, which is why \ndocumentation is one of the main things that distinguishes a design system \nfrom a simple style guide or a UI kit.\nA ‘UI kit’ needs less introduction than a style guide — you’ve probably seen \nUI kits on Dribbble and Behance, or as free downloads promoting a service or \nvendor. They look cool, but that’s all they are: just a random assortment of cool-\nlooking design elements. They often deal with ideals, and can be put to use any \nway you wish — because they didn’t (really) have a specific use case in the first \nplace, as they’re often not based in reality, with real content, problems, users, \nor businesses.\nWhere a UI kit could be applied to anything, a style guide is usually more \ncomprehensive and focussed on a real product. ‘Style guide’ might be one of \nthe most confusing terms in digital design. You might even disagree with my \ndefinition of it, but as we’ve covered in this book: speaking the same language, \nor at least having a shared understanding is important. So, let’s define what \nstyle guides are...\nStyle guides are a valuable addition to web design projects; they’re something \nI almost always deliver to a client alongside responsive web page designs. \nThey single out foundations (e.g. text styles and colours) and components (e.g. \nbuttons and inputs) from a design — identifying them as deliberate design \ndecisions that are used consistently throughout a product. A style guide also \ncovers things that aren’t obvious in design mockups — things like hover states, \nerror states, and so on.\nA style guide is a form of documentation, but not necessarily a design system \n(in its simplest of forms). They are valuable for developers to build from, and \nthey keep designers in-check, but they lack depth. They showcase design \nsystem elements, but they generally don’t explain why, where, when, and how \nto use any of those elements.\nA simple style guide is like a diagram of all the elements that make up a piece \nof IKEA furniture without the instructions telling you how to assemble them. \nYou might build something that resembles the picture on the box, or you might \n\n182\ncreate something entirely different.\nThe Disqus style guide \n(fig 9.1) is a good example of a simple style guide, which \ndocuments the basics like colour, typography, and brand, but doesn’t go into \ndetail of how to use them. This can be useful, and it serves a purpose, but it \nleaves a lot to interpretation.\nFIG 9.1 disqus.com/pages/style-guide/\nAll this isn’t to say that if you don’t have documentation, you don’t have a \ndesign system. That’s not true, so long as you’ve been designing systematically. \nIt’s more to say that if you’re going to all the effort of designing and building a \ndesign system, then you should do everything possible to ensure people use it \n\nDoCuMent eVerYtHInG!  183\n‘properly’ and sustainably.\nThe basics\nDocumentation acts as a source of truth  —  a reference point. If you’re \nunsure how to approach, do, write, format, design, or build something ,   the \ndocumentation is where you’ll find the answer! It benefits everyone, from the \nmost junior to the most senior members of your team, and it’s great for on-\nboarding new team members.\nDocumentation:\n• Demystifies our design and code decisions.\n• Helps to keep all people working with the system on the same page.\n• Helps to onboard new team members.\n• Tracks revisions to the system, to keep everyone in the loop.\n• It makes your company look really smart!\n Helps recruit new talent.\nBetter together\nAs I’ve emphasised throughout this book, when creating a design system it’s \nimportant to be mindful that you won’t be the only person who works with \nit. We make very deliberate design decisions when we design systematically, \nmeaning the decisions we make about font size, text styles, spacing, colour, \nand animation are made for a reason. These decisions are then applied \nrepetitively and consistently across multiple elements in the system.\nThe guidelines and decisions you make when designing a system are no \ngood just in your head. They shouldn’t be communicated on a ‘need to \nknow’ basis. Everybody needs to know.\nThe key is to make documentation part of your (design and build) process. \nDon’t leave documentation until the end, or as an afterthought. If you do, it \nmight never get done, or you’ll forget what you’re actually documenting.\nDon’t get caught up in how your documentation looks. Just get the reasoning \nbehind your design decisions out of your head and into some form of \ndocumentation. You can make it look pretty later. We’ll talk more about how to \nformat and present the documentation later in this chapter. First, a few further \npoints to demonstrate why documenting design systems is important.\n\n184184\nA simple style guide \nis like a diagram of \nall the elements \nthat make up a \npiece of IKEA \nfurniture without \nthe instructions \ntelling you how to \nassemble them.\n\nDoCuMent eVerYtHInG!  185DoCuMent eVerYtHInG!  185\nYou might build \nsomething that \nresembles the \npicture on the box,\nor you might create \nsomething entirely \ndifferent. This \nis why you need \ndocumentation.\n\n186\nDon’t leave documentation until last\nDocumentation should never be left to the end of a project. Don’t just take it \nfrom me — Airbnb \n(9.1) regretted not documenting sooner:\n“...This project required us to operate within a tight timeline, which \ncaused us to overlook some of the documentation process. Lacking \nthorough documentation created some confusion that could have \nbeen avoided. Just like with coding, documenting systems as they \nare created is paramount to the process. It has to be done sooner or \nlater, and documenting throughout the creation process allows for \nsmoother decision-making.”\nTo put some of what we’ve covered thus far in this chapter into perspective, \nI’ll reflect on my experience back in 2014-16 when I was designing the Adobe \nPortfolio product \n(9.2) at Behance. I’ll be honest, I didn’t progress the design \nsystem as far as I would have liked or should have. I defined the brand \nfoundations, designed every component and pattern, and created product \nflows and prototypes for every feature. It was more than enough to get the \nproduct built and launched, but I didn’t write any documentation. I should \nhave.\nNot to beat myself up too much; the annotated designs and style guides I \nFIG 9.2 Design spec from the Adobe Portfolio product\n\nDoCuMent eVerYtHInG!  187\ncreated were very detailed. I even defined the CSS on them! But ‘red-line’ \ndesign specs aren’t good enough. They’re a form of documentation — sure — \nbut they don’t go into enough detail. These specs were more than enough to \nget the product into development, but they left a lot to interpretation on the \ndesign side — which wasn’t enough for designers to work with in the future.\nTo demonstrate what I mean by ‘red-line’ design specs, \nfig 9.2 is a spec I \ncreated for a “Remote” (in the Adobe Portfolio product).\nI would describe \nfig 9.2 — at best — as a style guide or spec for a design system \npattern. It details every state and scenario. The text is tiny in the picture (as \nit’s presented in this book), but take it from me: the annotations clearly define \nthe sizes, spacing, and specifications. However, it leaves many unanswered \nquestions:\n• Why does it look like it does?\n• Why a draggable remote versus a fixed menu item?\n• What exactly does this pattern do?\n• How does it respond to X scenario in the live product?\n• What happens when I click the links versus the toggles?\n• What happens if the remote is dragged off-screen?\nNone of the answers are obvious from the design alone. The above questions \nabout logic, systematic design, and functionality don’t just help designers \nunderstand how to work with the system, they also help developers build it! \nIn fact, some of the bullet points above were real questions I was asked by \ndevelopers working on this product with me.\nWithout documentation, we leave patterns like this open to interpretation. \nThe next designer (or team of designers) who iterates on this pattern are going \nto have questions. With no answers to those questions, they will do their own \nthing, and the system that governed the original design will take a different \npath.\nSimilarly, the following image \n(fig 9.3) shows button components from the \nsame product.\n9.1 airbnb.design/building-a-visual-language/\n9.2 roomfive.net/adobe-portfolio/\n\n188\nThis style guide specifies everything needed to build the component, but no \ninformation as to:\n• Why are there different types of buttons?\n• When and why should I use a blue button, versus a green button?\n• When and why should I use a text link, versus a button?\n• Can I pair the different colours and types of buttons together?\n• Can we, and do we have guidelines for including icons in buttons?\nFIG 9.3 A style guide for button components\n\nDoCuMent eVerYtHInG!  189\nI can tell you that — in this design system — the meaning behind the colours \nis important, and there very definitely are guidelines for when to use each type \nof button, and how they pair together. The logic for all of this should have been \ndocumented, or the original intent could be lost.\nWe are talking somewhat in ideals here. In reality, things don’t always unfold \nas optimally as they should. For this particular project, time was very much \na factor. I make my excuses, but this experience taught me a valuable lesson. \nWhat I should have done was to document the design system as it was \nbeing designed — as part of the design process, rather than waiting until a \nconvenient time... Later... Or in this case never (I moved on from Adobe a \ncouple months after this product’s launch). This issue is, I’m sure, something \nmost of you can relate to. Failing to document your design decisions is \nsometimes genuinely unavoidable. But often times we’re just making excuses, \nand it costs our teams, products, and users down the road. \nDocument as you go\nA good way to approach documentation is to think about what questions \nsomeone might have about what you (or your team) designed. There are no \nstupid questions, really. What’s obvious to you might not be obvious to others. \nGet it all out of your head, and documented.\n• Write guidelines that act as a source of truth, or reference material.\n• Explain what ‘it’ is.\n• When, where, why, and how do you use it?\n• Document and/or demonstrate any functionality, animation, or conditional \nlogic.\n• Lead by example and show example use cases.\n• Include as much detail as is appropriate. You can even include the code!\nWhat should you document?\nThis is not a comprehensive list of everything you should document, but here \nare some basics to get you started:\nDo’s and don’ts\nThroughout your documentation, it can be useful to give example use \ncases of how to do (or not do) something. As they say: ‘a picture is worth a \nthousand words’. Seeing is believing. Showing an example scenario where \nyour guidelines apply can be key to helping people understand context and \napplication.\n\n190190\nFIG 9.5 material.io/design/components/tooltips.html\nFIG 9.4 bbc.co.uk/gel/guidelines/accordion\n\nDoCuMent eVerYtHInG!  191\nThe BBC example (fig 9.4) simply uses a wireframe to demonstrate the \ncorrect and incorrect way of designing an accordion. The Google Material \nexample \n(fig 9.5) goes into more detail, using real scenarios from a product to \ndemonstrate how tooltips should look and function.\nImportantly: in both cases, the example use case imagery is accompanied by \ntext explaining what’s wrong or right about each approach. Don’t assume your \naudience can identify right or wrong themselves — this is about education, it’s \nnot a test.\nColour\nDon’t just output a colour palette and hope people use it correctly. A swatch of \ncolours (alone) can be used in a limitless number of ways. Write guidelines for:\n• Why did you choose these brand colours?\n• What is their intent? When and why would you use X colour over Y colour?\n• Include useful information like its hex value (e.g. \n#b85c35) and its name.\n• How do you reference a colour in the code?\n• Show example use cases.\nOpenTable specify each colour’s name, hex value, a list of acceptable use cases \nfor each colour, and even give insight into their thinking behind the colour. \nThe more insight into the design decisions you give, the better the system’s \nadopters will understand and apply the system. Referencing the OpenTable \nexample \n(fig 9.6):\n“Early Girl is our star for experiences targeting our diners: the \nprimary color in our corporate identity. Early girl conveys the \nenergy and passion we invest in connecting our diners to new \nexperiences and the warmth of great hospitality.”\n“Blueberry is primarily used as a secondary action color. In our \nrestaurant-focused marketing efforts, we focus on efficient service \nand streamlined reservation tools, and our blue is a calming \nassurance of our loyalty to business support.”\n\n192\nIn contrast to OpenTable’s primary brand colours (fig 9.6) — and a more \nextensive secondary palette of equally bright colours — they also have a simple \n“Neutrals” palette \n(fig 9.7), intended mainly for headers and copy.\nHere’s how they describe this ‘neutrals’ palette:\n“There are colors used for action and attention, while others are \nused for utility. These neutral colors are meant to pair well with the \nprimary and secondary action colors and provide balance within the \nlarger palette.”\nConsistent and intentional use of colour is not only good for reinforcing a \nbrand’s identity and message – it also aids the user experience. For example, \nit’s good practice to use prominent and consistent colours for calls to action \nin order to draw attention to them. If you use too many different colours for \nthings like buttons and links, it becomes unclear what is actionable, and what \nisn’t. \nFIG 9.6 Primary brand colour palette\n\nDoCuMent eVerYtHInG!  193\nOpenTable’s colour documentation defines acceptable use cases for each \ncolour:\n• Their secondary colour palette is only for use in background colours. Not \ncalls to action, headers, or copy.\n• The only colours used for calls to action (e.g. buttons and links) are their two \nprimary colours.\n• Their neutrals palette is used primarily for headers and copy — clearly \ndistinguishing copy from calls to action.\nFIG 9.7 brand.opentable.com/color/\nBrand identity\nBranding and logos can be a big investment of time and money, so protect your \nbrand by documenting how it should be used. Some things to consider:\n• Are there any guidelines for logo size?\n• Can the logo overlay an image, or should it only be used on a plain \nbackground?\n• Can the colours be changed? Can the logo be all white to use on a dark \nbackground, or all black to use on a light background?\n\n194194\nThe guidelines and \ndecisions you make \nwhen designing a \nsystem are no good \njust in your head. \nThey’re not ‘need to \nknow’. Everyone \non your team \nneeds to know.\n\nDoCuMent eVerYtHInG!  195\n• What should we use for a Twitter avatar?\n• Where do I find a vector download for this asset?\nFIG 9.8 brand.opentable.com/logo/\nTo use another example (fig 9.8) from OpenTable’s digital brand guidelines: a \nnice touch here is that they include a rationale for why the logo looks the way it \ndoes. This may seem trivial to some, but the ethos behind their brand identity \nis core to the design of their companies services and products. Understanding \nthis is key to working with their design system:\n“With just a few shapes, our logo says a lot. It symbolizes the \nconnection we forge between restaurants and diners, the way we \nhelp diners find the perfect fit, and the fact that our customers are \nalways our focus.”\nOpenTable’s documentation for their logo is comprehensive. In addition to \ntheir rationalisation of the logos’ design, they cover:\n• Guidelines for the different ways it can be presented (“Lockups”).\n• The minimum size the various versions should be used.\n• Guidelines on spacing.\n\n196\n• Do’s and don’ts.\n• A download of the digital assets.\n• And as seen below \n(fig 9.9): the “preferred treatment” of the logo, including \nwhat to do when that’s not an option.\nFIG 9.9 Preferred treatments of logo (example use cases)\nTypography\nUsing a consistent and limited set of text styles, font-families, and font-weights \nsimplifies the complexity of a user interface and lowers the cognitive load for \nthe user. It also reduces the page load time, makes the text more legible, and \nreduces the amount of code required. As someone who’s built many websites \ndesigned by other designers, I can tell you with confidence: sticking to a \nconsistent range of text styles is something many designers fail to do.\nFor typefaces and font-weights:\n• Limit the number of typefaces and font-weights you use.\n• Note that the more typefaces (and different weights of fonts) you use, the \nslower your page will load, particularly for users on mobile phone/cellular \nnetworks. So consider this: do you need to use semi-bold and bold font-\nweights? Pick one.\n\nDoCuMent eVerYtHInG!  197DoCuMent eVerYtHInG!  197\nUsing a consistent \nand limited set of \ntext styles, font \nfamilies, and font \nweights simplifies \nthe complexity of \na user interface and \nlowers the cognitive \nload for the user.\n\n198\n• Define intent for each typeface. Why and when should you use typeface X \nover Y? For example, do you use a serif to distinguish headers and a sans-\nserif for copy?\nFor text styles:\n• Aim to create a broad range of text styles that cover different scenarios. \nDon’t just suggest a body text style and a headline text style, consider cases \nlike subheaders, leading paragraphs, blockquotes, bulleted lists, image \ncaptions, and so on.\n• You probably don’t need a header text style in 19px and 20px font-size. Pick \none.\n• What does each text style look like?\n• Document, at a minimum, each style’s font-size, line-height, and letter-\nspacing.\n• Do different header and copy styles have specific margins or padding?\n• If appropriate, provide some context as to when to use each text style. Do \nyou have a default size for copy? A particularly large or small text-size was \nlikely created for a specific use case. If so, document that intent.\nI like how Marvel’s typography documentation \n(fig 9.10) includes a little write-\nup on why they chose the typeface they did.\n“Marvel’s primary typeface is Fakt Soft Pro — a robust typeface with \nlegible numbers that renders well at all sizes. It is soft and friendly, \nyet plain enough to get out of the way and let the user’s designs \nshine.”\nI like how BBC GEL document “Type in action” (fig 9.11) — showing how \nand where to use different typefaces and text styles with simple wireframe \nexamples.\nCopywriting\nYour brand likely has a tone of voice and a style to adhere to for copywriting; \nthese guidelines will apply for all copy across your digital brand, whether \nit’s marketing copy, headers, labels, or error messages. If everyone on your \nteam writes their own copy ‘as they speak’, your brand won’t have a unified \nvoice, and won’t communicate as effectively as it could. So be sure your \ndocumentation includes answers to questions such as:\n• What is our brand’s tone of voice? Is it assertive, friendly, bold, etc.?\n\nDoCuMent eVerYtHInG!  199DoCuMent eVerYtHInG!  199\nFIG 9.11 bbc.co.uk/gel/guidelines/typography\nFIG 9.10 marvelapp.com/styleguide/design/typography\n\n200\n• What words do we use? Do we say “Hey!” or “Hello”? Do we say “employee” \nor “team member”?\n• Do we use sentence case, or title case for headers?\n• Do we include a period at the end of headers?\n• How do we format date, time, and currency? Do we write “June 24, 1982” or \n“24th June, 1982”?\n• Are we concerned about localisation/internationalisation?\nFor more tips on documenting copywriting, take a look back at the “Brand \nTone of Voice and Copywriting” section in the “Laying the Foundations” \nchapter in this book.\nComponents\nComponents come in many sizes, shapes, colours, and types. Make sure you \ncapture them all, plus all their variations and states. Some basic considerations \nfor your documentation to get you started: \n• Demonstrate what the component looks like, including all its different states \n(e.g. placeholder, value, hover, error, disabled).\nFIG 9.12 primer.style/css/components/buttons\n\nDoCuMent eVerYtHInG!  201\n• Provide context as to why and when you would use the component.\n• When should we use one type of button over another?\n• Do form inputs need a placeholder?\n• Do we hide or show labels above — or inline with — form inputs?\nThe Primer design system by GitHub has great documentation for their button \ncomponents \n(fig 9.12). They have example live components you can interact \nwith to really get a feel for how they work. They also show how to apply them \nin the code, and include a little write-up as to their use cases. This write-up is \nimportant, especially in cases like Primer where there are multiple types of \nbuttons — as it provides context as to when to use each variant.\nFIG 9.13 Clear breakdowns of components\nThe following two images are examples of text input (fig 9.14) and button \n(fig 9.15) component documentation I’ve created. Where the Primer \ndocumentation \n(fig 9.12) is a living style guide — using dynamic, interactive \ncomponents from production — I like to use (static) visuals to demonstrate all \nthe different states of each component. This allows me to be more explicit as to \ntheir different states.\nWhile live, interactive components are great, they do leave a lot to \ninterpretation. With this in mind, perhaps it’s worth doing both (include a \nlive interactive component and a static mockup of all its states). Where static \nvisuals require more work to maintain, they can be really valuable to foster \n\n202\nunderstanding of how the component works, as they allow you to clearly \ndemonstrate all the different states of the component (I’ll discuss the pros and \ncons of using dynamic examples in your documentation later in this chapter.)\nFIG 9.15 plasma.guide/buttons/\nFIG 9.14 plasma.guide/form-specs/\nWhen documenting components, I also like to include the basic CSS; this \nallows me to be even more explicit about the component’s makeup — plus \nI believe it’s healthy for designers to be exposed to CSS and get a sense for \nhow things are made \n(fig 9.14). I also include annotated breakdowns of the \n\nDoCuMent eVerYtHInG!  203\ncomponent (fig 9.13 + 9.15), and written guidelines of their makeup (e.g. \nspacing, sizes, and other specifications), and example use cases.\nAtlassian do a nice job of annotating the makeup of their components (fig 9.16) \nand patterns \n(fig 9.17):\nFIG 9.17 atlassian.design/guidelines/product/patterns/forms\nFIG 9.16 atlassian.design/guidelines/product/components/text-field\n\n204204\nFailing to document \nour design decisions \nis sometimes \nunavoidable. But \noften times we’re just \nmaking excuses, and \nit costs our teams, \nproducts, and users \ndown the road.\n\nDoCuMent eVerYtHInG!  205\nPatterns\nPatterns are the larger building blocks of a user interface that are used \nrepeatedly throughout a design. You should capture each of these patterns, and \nanswer questions such as: \n• Are our patterns modular? How do they work together?\n• What is the purpose of each pattern?\n• What are some example use cases?\n• How does a pattern respond at different browser widths, and on different \ndevices?\n• Is there any conditional logic, or variants to suit different content scenarios?\nBBC GEL does a really nice and very thorough job of documenting their design \npatterns \n(fig 9.18); they explain the makeup of the pattern (fig 9.19), what it is, \nwhen you could use it, any differences between iOS and Android \n(fig 9.20), and \ninclude any rules and variations.\nFIG 9.18 bbc.co.uk/gel/guidelines/category/design-patterns\n\n206\nThey even include guidelines and designs for edge cases, such as:\n• What happens if JavaScript is turned off? \n(fig 9.21)\n• How do patterns respond to long words in tight spaces? (fig 9.22) They use \nthe Welsh language as an example, but you could use German, or any long \nwords in any language! Remember: use realistic (and unruly) content when \nyou design.\nFIG 9.19 Breaking down the makeup and terminology of a pattern\nBootstrap also does a nice job of documenting patterns (fig 9.23); they lead \nwith a description of the pattern (not seen in the screenshot, but visit the \nlink), several interactive example variants of the pattern, and great CSS and \nJavaScript documentation. Documenting the code and use cases makes it easy \nto integrate the pattern into a project. Design system documentation is for \nyour whole team: designers and developers.\nDon’t forget the small things\nThe obvious things to document are text styles, colours, buttons, and inputs \n— but don’t forget components and patterns like avatars, pagination, tooltips, \npills, toggles, loading spinners, breadcrumbs, and so on.\nMarvel (not that Marvel) have a neat little section on how they present avatars \n(fig 9.24). It’s smart that they have a fallback to the user’s initials in the absence \nof an image. Empty states are an important thing to design for and document.\n\nDoCuMent eVerYtHInG!  207DoCuMent eVerYtHInG!  207\nFIG 9.21 What happens when JavaScript is turned off?\nFIG 9.22 Do’s and don’ts for dealing with long words\nFIG 9.20 Pattern variants for iOS and Android\n\n208\nDo you have a system philosophy covering how component and patterns are \nanimated and loaded, what border radius or drop-shadows to use, and so on? \nIf you do, document it. The Carbon design system by IBM has a section in \ntheir documentation on “Loading” \n(fig 9.25), including ‘skeleton states’ (load \nstates used to illustrate the overall architecture of the page while it’s loading), \nprogressive loading, loading spinners, and so on.\nGrid, layout, and spacing\nIt’s all very well and good to design and document a mass of components and \npatterns, but they’re effectively a UI kit without some logic for how they work \ntogether. Document the system accounting for things like:\n• Is there consistent spacing in and around components and patterns?\n• Are patterns designed to be modular?\n• Is the design system responsive, or designed to a grid?\n• How does the layout respond at different browser widths?\n• Are there any considerations for designing for different devices?\nBBC GEL do a great job of documenting their rationale and system thinking for \ngrid, spacing, and layout \n(fig 9.26 + 9.27).\nFIG 9.23 getbootstrap.com/docs/4.2/components/carousel/\n\nDoCuMent eVerYtHInG!  209DoCuMent eVerYtHInG!  209\nFIG 9.25 carbondesignsystem.com/patterns/loading\nFIG 9.24 marvelapp.com/styleguide/components/avatars\n\n210210\nFIG 9.27 bbc.co.uk/gel/guidelines/grid\nFIG 9.26 bbc.co.uk/gel/guidelines/grid\n\nDoCuMent eVerYtHInG!  211\nLook back at the “Responsive Design” section of the “Laying the Foundations” \nchapter in this book for more on responsive design.\nDesign tokens\nWe covered what design tokens are in the previous chapter. Suffice to say, \nif you have design tokens, your documentation definitely needs to include a \nsource of truth for what they are and how to use them!\nThe Lightning design system documentation \n(fig 9.28) does a good job of \nexplaining what each design token is for. Without this context, the design \ntokens could be misused, and you could lose the advantages that come with \ncreating them in the first place.\nFIG 9.28 lightningdesignsystem.com/design-tokens/\n\n212\nHow do you document a design system?\nThis is probably the most contentious part of this chapter. There are a \nmultitude of ways you can do this, and there are dozens of tools and resources \ncreated specifically for this task! I won’t get too into the technological depths \nof how to document a design system in this book, but you can find a list of \ngreat tools and resources on the website \n(9.3).\nSince there are so many options available to you, you should discuss amongst \nyour team what approach would be most effective for everyone. Developers are \nlikely going to be key to these discussions, as they are better placed to set up an \nenvironment to write, edit, share, maintain, and publish the documentation.\nThe basic factors you need to address are:\n• It needs to be accessible and editable by your team.\n• It needs to be easily shareable and visible to all stakeholders.\n• It can include text and images (visuals are important to aid understanding).\n• It’s likely going to be large, so it needs to be easy to navigate. And the \nnavigation needs to be scalable, to grow as you add more to the system.\nAnd the nice-to-haves are:\n• Ability to include (or embed) live, interactive examples.\n• Ability to include code snippets/examples.\n• A changelog so you can track iterations to the system over time.\n• Ability to search for content.\nGetting started, the easy way\nThere’s only one rule for how to document your design systems: don’t let \ntechnology or design bias stand in the way of progress.\nIt’s easy for a designer to get swept away in the presentation and styling of \nsomething, or get intimidated by technological barriers. Similarly, it’s easy for \na developer to get caught up in the most efficient or securest means of content \nmanaging, maintaining, and hosting the documentation. Both parties can be \nhighly opinionated. Don’t allow this friction to cause delay.\nI felt this friction the first time I approached design system documentation. \n9.3 designsystemfoundations.com/resources/\n\nDoCuMent eVerYtHInG!  213DoCuMent eVerYtHInG!  213\nDon’t leave \ndocumentation \nuntil the end, or as \nan afterthought. \nIf you do, it might \nnever get done. Make \ndocumentation part \nof your design and \nbuild process.\n\n214\nAs a designer and a developer, I felt almost imprisoned by the multitude of \noptions available! My initial goal — having seen so many stellar examples \nonline — was to create a custom branded website to document the system. \nThankfully, after a little research I quickly realised that the time spent thinking \nabout, researching, designing, and building this website was only delaying me \nactually creating the documentation!\nSo to get started I simply created a new Google Doc \n(9.4) and started typing.\nFIG 9.29 A screenshot from documentation I’ve created in Google Docs\nAs the document grew, I realised Google Docs covered all the basics (from the \nlist earlier) of what we needed it to do.\n• It’s simple and fast to set up and write.\n• It’s easily accessible by your team.\n• You can control privacy by setting who does and doesn’t have access to it, \nand assign levels of access — such as read or comment only.\n• Your team can comment inline, which is great for feedback and iteration.\n• You can insert images and tables for visuals and example use cases.\n9.4 google.com/docs/about/\n\nDoCuMent eVerYtHInG!  215\n• The ‘Document Outline’ feature — plus the ability to link/anchor to \nbookmarks and headings within the document — provides (good enough) \nnavigation.\nA Google Doc might not be the most exciting means of documentation, \nbut it does provide an effective and fast means of documenting everything \nfrom foundations, such as copywriting, brand tone of voice, and formatting \n(fig 9.30):\nFIG 9.30 You can use tables to format content (e.g. do’s and don’ts)\nTo documenting components (fig 9.31) and patterns (fig 9.32).\nNote: These Google Doc example screenshots are from the Plasma design \nsystem. If you’re interested, I wrote a case study (9.5) about the design and \ndocumentation of this system. \n9.5 medium.com/owl-studios/plasma-design-system-4d63fb6c1afc\n\n216216\nFIG 9.32 Documenting patterns\nFIG 9.31 Documenting components\n\nDoCuMent eVerYtHInG!  217\nGoogle Docs is a genuinely good tool for documentation, but it only takes you \nso far. Where the Plasma design system was concerned, we did experience \ngrowing pains:\n• It’s inefficient to quickly link to specific content within the document (e.g. \nfrom Slack or an email).\n• Searching for content could be easier.\n• You can’t embed live, interactive examples of components and patterns.\n• And despite your best efforts to format the content ‘nicely’, a Google \nDoc isn’t the most engaging way to present content (depending on your \naudience).\nFor what it’s worth, this particular Google Doc did its job for nearly a year while \nwe focussed on more pressing tasks, like actually building and implementing \nthe system! Don’t lose sight of your priorities.\nIn time, opportunities arose to evolve the documentation into more of a \n‘living style guide’, which aimed to include live examples from production and \ncode snippets, along with a more accessible, user-friendly, and branded user \nexperience.\nLiving style guides\nOne of the bigger challenges of design systems is keeping the design, code, and \ndocumentation in sync. Consider these scenarios:\n• A designer iterates on a button, the code and design library are updated, but \nthe designer forgets to update the image mockup of the button in the static \ndocumentation.\n• Similarly, if any code snippets (in the static documentation) are written \nas non-dynamic text entries, then they won’t reflect any updates made to \nthe production code, unless someone remembers to manually make the \nupdates.\nIt’s an easy mistake to make, but the documentation isn’t of much use when it’s \ndifferent to the actual design system.\nThe key difference between a living style guide and static documentation is \nthat a living style guide contains live design elements pulled directly from — \nor embedded from — the live source code. They are real and dynamic — not \n(only) an image or a mockup of a component. You can hover over a component \nand interact with it. And perhaps most importantly, they (somewhat \nautomatically) evolve as your system evolves. \n\n218\nWith a living style guide, any changes you make to production will be \nreflected in the documentation, at least where the live examples and code are \nconcerned. Any write-up concerning the foundation, component, or pattern \nwill still need to be updated.\nRegardless of whether you choose to use static or dynamic documentation, the \nmost important takeaway is this: it should be part of your process to update \nanything in your documentation that’s not automated whenever you make \nchanges to a design system.\nIf not a Google Doc, then what?\nIf you want to create more dynamic design system documentation — \nsomething more than a Google Doc — then there are a multitude of ways you \ncan do it. There are also ways to generate living style guides directly from your \ncode!\nMore and more tools and resources are being created all the time. As stated \nbefore; technology moves too fast for print, so rather than writing about them \nin this book — and risking tools becoming obsolete, or missing new tools post-\npublishing — I’ve linked to various tools and resources on this book’s website \n(9.6).\nSpinning up editable documentation and living style guides enters developer \nterritory — or at least an area where designers and developers should \nconverge. Since this is a design-focussed book, my advice is to speak to the \ndevelopers on your team and tell them you want to create design system \ndocumentation (or the Digital Foundations we spoke about earlier in this \nbook). Don’t be afraid to ask. My experience has often been that experts will \nappreciate you seeking their help.\nTell the developers you need:\n• A platform the whole team can contribute to and update on a regular basis.\n• The ability to write and format text and upload images.\n9.6 designsystemfoundations.com/resources/\n9.7 gitbook.com\n9.8 wikipedia.org/wiki/Markdown\n9.9 github.com\n\nDoCuMent eVerYtHInG!  219\n• The ability to add new pages and organise content by sections and \nsubsections.\n• A simple navigation which scales when you add new content.\n• The ability to pull in or embed real components and patterns from \nproduction (code) to demonstrate design system elements.\n• To publish the documentation online (publicly), or — if you prefer it be \nprivate — to make it password protected.\nNote: The above list isn’t comprehensive, it’s just to get you started. I advise \nthat you get together with your team to discuss the best solutions to benefit all \nparties.\nFor what it’s worth, in the Plasma design system example earlier — where we \nmoved from static documentation in Google Docs to a more dynamic solution \n— we used a tool called GitBook \n(9.7).\nThe basic premise of GitBook is this: you write your documentation in \nmarkdown (9.8) (a simple formatting language) in GitHub (9.9), then GitBook \nweaves its magic to convert it into a website. Full disclosure: I’m a front-end \ndeveloper and I still struggled to get this set up on my own, so I worked with \ndevelopers on our team to get it all running — I advise you to do the same. \nOnce it was set up, it was easy to write the documentation in markdown (once \nyou get used to it), and you need only a basic understanding of HTML and CSS \nto customise the style of the site and tailor the documentation to your brand. \nDon’t worry if creating a dynamic documentation website sounds too \nchallenging for now! As I said, using a simple tool like Google Docs for your \ndesign system documentation will take you far, and is much better than not \ndocumenting at all.\nWe’ve covered a lot in this chapter! Let’s take the foot off the pedal and look at \nsome inspiration for documenting design systems in the next chapter.\n\n220\nGallery\n220\n10\nGall— \nery\nLAYInG tHe FounDAtIons\n\nGALLerY  221\nIn the “Laying the Foundations” chapter of this book, we talked about \ncompanies building public websites to show off their digital brand guidelines. \nMore and more, it’s becoming common practice for companies to make their \nbrand guidelines and design system documentation public. Designers and \ndevelopers are publicly opening up about their code, processes, and design \nthinking.\nThe great thing about these companies sharing their documentation publicly \nis that we can learn from them! Building on the examples I’ve included \nthroughout this book, this chapter is a curation of great examples for you \nto explore, and includes a little insight into what makes them such good \nexamples.\nFIG 10.1 culture.basicagency.com\nHow a company presents its Digital Foundations and/or design system \ndocumentation in public — and the insights they provide into their design and \nengineering practices — says a lot about their culture. This in itself is a big \npart of the reason why presenting your work in the open is good — if nothing \nelse, it helps you recruit the best talent. \nBasic Culture\nThe Basic Culture Manual website (fig 10.1) is a first-class example of a \n\n222\ncompany flexing its muscles, giving an insight into their culture (quite literally \nin this case), and sending a firm message that: ‘We make cool shit! Hire us. \nWork with us.’\nWe looked at Basic’s website earlier in this book as a great example of \ndocumenting mission, values, and principles in the “Laying the Foundations” \nchapter. Their website is well worth a visit — if only to admire the design \nand animation — and be inspired by their values and design philosophies \n(fig 10.2). There’s something in here for everybody. \nFIG 10.2 culture.basicagency.com/our-way\nBBC GEL (Global Experience Language)\nIf you only look at one website for inspiration, look at the BBC GEL website \n(10.1). It includes more or less everything we covered in the “Document \nEverything” and “Laying the Foundations” chapters. GEL is a collection \nof digital brand guidelines, design system documentation, and articles on \neverything from “How to design for the (responsive) web”, to interviews with \ntheir creative teams. It’s even built into the chrome of the core BBC website; it’s \nnot a standalone website, so it all feels very inclusive and well-thought out.\nTheir “Foundations” section covers things like typography, grid, layout, \nspacing, and iconography. Their “Design Patterns” section \n(fig 10.3) has \n\nGALLerY  223\ndetailed breakdowns of established patterns (like accordions, cards, and \ncarousels) used throughout their digital properties, filtered by ‘Web’ and ‘App’. \nNote: notice how each pattern shows whether there’s a recent update to a \npattern, and the date it was last updated:\nFIG 10.3 bbc.co.uk/gel/guidelines/category/design-patterns\nOne of the things I love most about GEL is how all of their documentation \nreads more like an article than documentation \n(fig 10.4). It’s well laid out and \npresented, and the content is inviting, easy to navigate and consume. Each \npage — whether it’s a “how-to” article, or documentation governing typography \nor patterns — is clearly introduced with an easy to digest overview, the latest \nupdate, and the team that contributed to the system element or editorial. Any \nrelevant downloads or links to the code are clearly visible, and each page has \na sub-navigation, which is fixed on-scroll allowing you to skip-to important \n\n224224\nFIG 10.4 bbc.co.uk/gel/guidelines/category/foundations\n\nGALLerY  225\ncontent, so you can find what you’re looking for quickly.\nWhat I find particularly great is their section of “How-to” articles \n(fig 10.5). \nThis clearly demonstrates a level of care and responsibility that all designers \nand engineers should aspire to. To quote from their “How to Design for \nAccessibility” article \n(10.2):\n“We want the things we make to work for the whole audience, \nbecause the BBC believes everyone deserves the best. Our audience \nis diverse, not only in gender, age, and culture, but also in the ways \nthey interact with us and the abilities they have to do so. To deliver \nan inclusive experience, accessibility must be an integral part of the \nuser experience design. It must also be integral to development and \ntesting.”\nThe BBC’s design system documentation and digital brand guidelines are not \njust a technical blueprint, they are also thoughtful and inspirational, and give \ntheir teams a mission.\nFIG 10.5 bbc.co.uk/gel/guidelines/category/how-to\nIt’s interesting to note that the entire BBC GEL website is black and white. \nColour is seldom used. Even the visuals focus heavily on wireframes to \n\n226\ndemonstrate their design system patterns — like the following example \nscreenshot \n(fig 10.6) showing a variant on their “Cards” pattern.\nThis is worth noting because by focusing more on structure than style, they are \nhighlighting that their system foundations and patterns are really just a vehicle \nfor their content. As we covered earlier in this book: design for the content, \ndon’t fit the content to the design.\nFIG 10.6 Visuals focus on the pattern’s makeup, not visual design\nThe BBC’s patterns make no assumptions about the content. Given the \nabundance and wide range of content the BBC’s various digital properties \ncover, it’s imperative that their patterns are designed to work with any \ncontent, not just best case scenarios. And their documentation is a testament \nto that. They don’t rely on ‘pretty’ visuals for them to work. They include long \nheadlines, as opposed to convenient character counts. Patterns have variants \nto cover different scenarios, media, and content \n(fig 10.7). And they are all \ndesigned with accessibility in mind. \n10.1 bbc.co.uk/gel/\n10.2 bbc.co.uk/gel/guidelines/how-to-design-for-accessibility\n\nGALLerY  227\nThe BBC’s documentation shares more or less everything related to the design \nof their systems, even including some code. In contrast, Airbnb takes a very \ndifferent approach.\nAirbnb Design\nAirbnb’s public design system content shows that you can create buzz around \nyour design system without actually making your system or its documentation \npublic. Their “Airbnb Design” website \n(fig 10.8) clearly demonstrates their \nstrong design and engineering cultures, and the work that goes into creating \ntheir design systems. Their website features designers and engineers giving \ninsight into their design process via articles, events, and case studies. It \ndoesn’t give much away in terms of the system or documentation itself, but \nit’s an interesting insight into how they think about and design products and \nsystems.\nFIG 10.7 Documenting example use cases for pattern variants\n\n228228\nFIG 10.9 lightningdesignsystem.com\nFIG 10.8 airbnb.design\n\nGALLerY  229\nLightning design system (Salesforce)\nThe Lightning design system documentation (fig 10.9) is a treasure trove of \nknowledge. They even have a download section where you can download a \ncomprehensive Sketch file of all the components and icons they use, and they \neven offer their pre-built CSS framework!\nThe Lightning documentation is very much a ‘living style guide’; much of what \nyou see is pulled directly from source, so you can interact with the system \ncomponents and patterns.\nTheir system relies heavily on design tokens, which is reinforced throughout \ntheir documentation. They also include notes on the accessibility features \nof certain components, which is a nice touch — both because it educates us, \nand shows they care about all their users! Code is also featured throughout, \nincluding release notes, giving you in-depth insight into how to design and \nbuild with the system.\nWhere some documentation is aimed solely at designers, Lightning is very \nmuch aimed at designers and developers, or designer-developer hybrids.\nFIG 10.10 Technical, code-focussed documentation\n\n230230\nIt’s all very well and \ngood to design and \ndocument a mass \nof components and \npatterns, but \nthey’re effectively \na UI kit without some \nlogic for how they \nwork together.\n\nGALLerY  231\nWhere Salesforce’s Lightning documentation is very much a living style guide, \nin contrast, the Nachos design system is more of a static style guide.\nNachos design system (Trello)\nI like how simple and on-point the Nachos documentation website is. Trello’s \ndesign documentation uses static images to showcase components, and that’s \nfine, so long as the team responsible for maintaining the documentation \nupdates those images when any changes are made to their appearance. \nDocumenting systems in this way also requires less development support, so is \narguably a more designer-friendly approach.\nI love how detailed Trello gets with their image specs; this (for me) is \nsomething that makes (some) static documentation websites better than \n(some) living style guides. Interactive components are great, but I would still \nadvise including some kind of specs to really highlight what goes into the \ncreation of components and patterns. This way, designers learn how it’s \nmade, and don’t just see the end result.\nFIG 10.11 RIP Nachos website (formerly at: design.trello.com)\n\n232232\nFIG 10.13 Design principles and design systems go hand-in-hand\nFIG 10.12 Documenting the anatomy of design elements\n\nGALLerY  233\nBreaking down the anatomy of how a button is designed (fig 10.11) — or how \nicons are created and what size they should be \n(fig 10.12) — is both interesting \nand insightful, whether you’re a member of the team using the design system, \nor an outsider admiring their work. Remember the note earlier on insight into \nculture... Well, the attention to detail Trello’s documentation demonstrates is \ninspiring.\nI also like that Trello have included their design principles \n(fig 10.13) in with \ntheir documentation. In an ideal world, these things are inseparable. It’s \narguably ‘odd’ that so many design system documentation websites leave \nprinciples out (or don’t have any).\nMarvel design system\nDare I say it... Some design system documentation is plain ugly! Marvel’s \ndocumentation \n(fig 10.14) is a breath of fresh air with its clean and simple \ninterface and presentation.\nFIG 10.14 marvelapp.com/styleguide/\nTheir documentation home page is inviting and clear as to what you’re looking \nat; it also includes its purpose and mission:\n\n234\n“We created this style guide to act as a central location where we \nhouse a live inventory of UI components, brand guidelines, brand \nassets, code snippets, developer guidelines, and more. Anyone \nworking on the Marvel product is encouraged to stay familiar with \nthis style guide and help ensure that it is kept up-to-date.”\nNotice the orange “We’re hiring” prompt above their logo (fig 10.14)... \nRecruitment is a key motivation for publicising a good deal of documentation \nwebsites — so why not make it obvious? If I was looking for a job with a \ncompany that cared about system design, I’d click that link.\nTalking of ‘pretty websites’ (and flagging that we’re hiring)... Damn, Primer, \nlook at you \n(fig 10.15):\nFIG 10.15 primer.style\n\nGALLerY  235GALLerY  235\nThe better your \ndocumentation is \ndesigned and the \neasier the content is \nto navigate, the more \nlikely your team is \nto engage with it! \nEspecially designers.\n\n236\nPrimer design system (GitHub)\nSimilar to Marvel — only more pronounced this time — is GitHub’s reference \nto recruitment, proudly and prominently presented in this beautifully \ndesigned gateway page to their design system documentation. Sexy design is \ncertainly not the objective of design system documentation — don’t get me \nwrong — but if you’re going to all the trouble of creating this documentation, \nwhy not also make it look great. The better it’s designed and the easier the \ncontent is to navigate, the more likely your team is to engage with it!\nCarbon design system (IBM)\nI like how Carbon splits its documentation of components into “Usage” \n(fig 10.16) and “Code” (fig 10.17). It’s interesting to note their specificity over \nhow and when to use a link or a button, and the limit for how many times a \nFIG 10.16 carbondesignsystem.com/components/button/usage\n\nGALLerY  237\nprimary button should be used on a page. I particularly like their breakdown of \neach button types’ purpose:\n“Buttons are used primarily on action items. Some examples include \nAdd, Save, Delete, Sign up. Do not use Buttons as navigational \nelements. Instead, use Links because it takes the user to a new page \nand is not associated with an action. Each page may have one to two \nprimary buttons. Any remaining calls-to-action are represented as \nsecondary buttons.”\nIt’s also helpful that, alongside their code documentation for each component, \nthey include a link out to CodePen where you can view and edit the code \n(10.3). \nI think this is a great idea, as it gives you the opportunity to play with the code \nso you can really understand how it works. This also helps to bridge the gap \nbetween design and development.\nFIG 10.17 carbondesignsystem.com/components/button/code\n10.3 codepen.io/team/carbon/pen/xeZxLe\n\n238\nSeeds (Sprout Social)\nI really like how Sprout Social presents their brand guidelines and design \nsystem documentation in one central hub \n(fig 10.18). I’ve stressed the \nimportance of having a source of truth, and utilising digital brand guidelines as \nthe foundations of products and design systems. Keeping everything together \nmakes perfect sense. They should work together, so why separate them?\nSeed’s home page introduces what their “Creative Hub” is and why it’s \nFIG 10.18 sproutsocial.com/seeds/\n\nGALLerY  239\nimportant, and a simple navigation at the top breaks the content into “Brand”, \n“Product”, “Visual”, and “Writing”. Love it. It also has a page with downloads, so \ntheir brand assets are easily accessible.\n“A distinct and consistent brand presence sets us apart from \ncompetitors, builds trust and familiarity with our customers, and \neventually leads to long-term brand value.”\nI’m glad I found an example of a company who has chosen to protect some \nof it’s design system content \n(fig 10.19). Not everything needs to be for the \npublic’s eyes — some content is sensitive, or you may just prefer not to share \nit so openly. That’s totally fine, but you want to be sure you’re maintaining \nyour single source of truth, rather than have public content ‘here’ and private \ncontent ‘there’. Password protecting content that’s for personnel eyes only is a \nsimple solution.\nFIG 10.19 Password protecting content not for public eyes\nSolid design system (BuzzFeed)\nIt’s a good idea to keep your team informed about any changes being made \nto the design system they’re working with. This is often referred to as a \n“Changelog”, but in our example \n(fig 10.20), BuzzFeed has a page called \n“Release Notes”. This is where they document any updates: from changes to \ncolour hex codes to pixel value changes to a border-radius, the addition of a \nnew design token, or an update to a CSS class name or Sass variable, and so on.\n\n240\nFIG 10.21 thumbprint.design/guide/product/color/\nFIG 10.20 solid.buzzfeed.com/release-notes.html\n10.4 designsystemfoundations.com/resources/\n10.5 @andrewcouldwell\n\nGALLerY  241\nThumbprint design system (Thumbtack)\nThumbprint has a great “Guidelines” section in their documentation; it makes \neverything a little clearer for the system’s adopters. Within ‘Guidelines’ there is \na section on colour \n(fig 10.21), which has nice do’s and don’ts for each colour.\nMoving on\nIt’s my hope that the examples in this chapter have given you a sense of the \nrange of possibilities and best practices for presenting Digital Foundations \nand design system documentation, or even giving insight into your company’s \ndesign and engineering cultures.\nI’ve done my best to curate the finest examples being shared today. However, \nthere are so many more great examples out there, and new design system and \ndocumentation websites are popping up all the time — so be sure to check out \nthis book’s website \n(10.4) to get even more inspiration! And please share (10.5) \nany great examples you find.\nNext up, we’ll talk about one of the most difficult — but arguably most vital — \nparts of design system work: maintaining a design system.\n\n242\nMaintaining a design system\n242\n11\nMain— \ntain— \ning a \ndesign \nsystem\nLAYInG tHe FounDAtIons\n\nMAIntAInInG A DesIGn sYsteM  243\nCongratulations, you’ve designed, documented, built, and integrated a design \nsystem! (Or let’s assume you have). Now for the bad news: that was the easy \npart! Keeping the design, code, and documentation in sync is arguably the \nmost challenging part of working with design systems.\nThe following scenarios all lead to a design system’s demise:\n• Designers update their mockups, style guides, library, etc., but for whatever \nreason, the developers miss the changes — or they never get around to \nthem — and the design changes don’t get implemented in the code.\n• Team members save work on their desktop or personal computers, as \nopposed to a shared team drive/location.\n• Designers use their own personal set of foundations, components, and \npatterns, as opposed to a shared team library.\n• The design and code is updated, but the documentation isn’t.\n• Team members use different (incompatible) tools and/or software.\n• Teams aren’t kept in the loop about changes to the design system.\n• Team members feel excluded when they don’t feel involved in — or have any \nopportunities to influence — the design or evolution of the system.\nAll of the above scenarios lead to the same outcome: designers work with one \nor more alternate versions of the design system, while developers work with \nthe actual live version of the design system. This is frustrating for all parties — \nit’s also completely avoidable.\nMaintaining a design system requires communication, process, teamwork, \ndiscipline, and stewardship. In the sections to follow, we’re going to look at \nhow to achieve this, and solutions to all of the problem scenarios listed above.\nWork with shared design assets\nWe covered the importance of setting up editable and responsive components, \npatterns, and foundations in the “Systematising the Design” chapter. We talked \nbriefly about having them be easily accessible by your whole team. In this \nsection I want to build on this and stress the importance of having a shared \nlibrary of assets that your design team can simply insert into their designs. \nThey should also be made aware of — and able to sync — any changes made to \nthose assets.\nWhen design teams work with shared assets, it ensures consistency and cuts \ndown on unintentional design discrepancies. I think a shared library of design \nassets is the real game changer part of design systems — it’s where much of the \nspeed, ease, and efficiency comes in (at least on the design side of things).\n\n244\nI’m going to break my own rule concerning talking about tools in this book and \nrecommend Sketch \n(11.1) for web and product designers working with teams \nof other designers. This is only going on my experience. I also recommend you \ntry other tools and see what works best for your team. I’ve linked to some of \nthese tools on this book’s website \n(11.2). But as a working example in this book, \nI’ll use Sketch for demonstration purposes.\nUsing Sketch Library \n(11.3), you can create a master design system file \ncontaining all design system foundations, components \n(fig 11.1 + 11.2), and \npatterns and save it somewhere accessible by all your team. It needs to be \nsomewhere that will automatically sync any changes (e.g. Dropbox \n11.4).\nFIG 11.1 A Sketch file containing all system components\nWith your master design system file in a shared location, designers on your \nteam can very simply and quickly insert assets from the master file into their \n11.1 sketch.com\n11.2 designsystemfoundations.com/resources/\n11.3 sketch.com/docs/libraries/\n11.4 dropbox.com\n11.5 skl.sh/2xWBObZ\n\nMAIntAInInG A DesIGn sYsteM  245\nown design files. Then, any updates made to the master file will sync to any \ndesign files using its assets.\nDon’t worry if this sounds difficult — it’s not — it’s actually really fast and easy \nto set up! I’ve created a Skillshare class \n(11.5) demonstrating how to set up \neditable design system components and a Sketch Library.\nFIG 11.2 Zoomed in on the same Sketch file as fig 11.1\nFIG 11.3 A prompt (top-right) informs you of a library update\n\n246\nIf your team decides to change the colour of a button, it would be as simple as \nupdating the button symbol in the master design system library file. In Sketch, \nthe next time a member of your team is working on a design mockup, which \nuses this button they will see a “Library Updates Available” prompt to the top-\nright of their screen \n(fig 11.3) letting them know there’s been an update to a \ndesign asset they are using.\nClicking the “Library Updates Available” prompt opens up a convenient before \nand after (“Old” and “New”) view of everything that has an update \n(fig 11.4). It \nmight not always be appropriate to update, so it’s good you get the choice so \nyou can visually compare the change to measure what impact it will have on \nyour design.\nFIG 11.4 Before and after view to compare what the updates are\nWorking with patterns\nWhile Sketch symbols and Sketch Library work very well for things like \ncomponents, they don’t (always) work so well for more complex elements like \npatterns. (At least, not yet — I’m sure as design tools continue to evolve, they \nwill handle more complex patterns and responsive design better).\nFor patterns which are too complex to work as editable (Sketch) symbols \naccessed via Sketch Library, I recommend creating individual design files \nfor each pattern and saving them somewhere easily accessible by your team. \nAgain, this needs to be somewhere your team can easily sync updates or access \n\nMAIntAInInG A DesIGn sYsteM  247\nthe latest version of the file. In the below example’s case (fig 11.5), I stored \npattern files in a folder on Dropbox:\nFIG 11,5 A folder of design files, accessible by the whole team\nEach pattern’s design file contains an up-to-date version of the pattern. If \nyou’re designing for the web, it helps to include responsive ‘versions’ of the \npattern showing how it appears at different breakpoints. Setting up your \npatterns like this — ready to copy and paste into your designs — allows for \nrapid prototyping, and acts as a good source of truth for working with design \nsystem patterns.\nThe following screenshot \n(fig 11.6) shows a responsive pattern in Sketch. \nYou can see the desktop version of the pattern to the left, and to the right you \nsee a hint of how the pattern appears at different breakpoints (e.g. tablet and \nmobile).\nDesigners can also refer to the documentation for the pattern to see visuals, \na write-up, guidelines, and use cases \n(fig 11.7). Documentation can play a key \nrole in maintaining a design system, as it provides a ‘system of record’ for how \nsystem elements are intended to be used.\n\n248\nKeep documentation up to date\nWe’ve covered documenting design systems extensively in this book, but \nfor the sake of this chapter it’s worth reiterating the importance of keeping \nyour documentation up to date. Your documentation isn’t of much use if it’s \nrecording a previous state or version of the design and/or code.\nYour documentation should be a source of truth. When your team debates how \nFIG 11.7 Documentation for each pattern in the design system\nFIG 11.6 A pattern in Sketch, designed for each breakpoint’s grid\n\nMAIntAInInG A DesIGn sYsteM  249\nsomething should look or work, the documentation is the place they will look \nfor the answer — assuming you did due diligence and documented your design \nthinking when you designed the foundation, component, or pattern in question.\nMake it a part of your process to update design and code documentation \nwhen you create new — or update existing — system elements.\nWhile design documentation updates are more of a manual process, it is \npossible to (at least somewhat) automate the process of code documentation. \nYou can use dynamic documentation or living style guides that pull-in code \nfrom production, or documentation that’s generated directly from the code \n(with varying degrees of success).\nAs this is a design-focussed book — and code documentation is outside my \narea of expertise — I’ll leave the documentation of code to the experts (i.e. your \nengineering team). There are also links to some design system documentation \ntools and resources on this book’s website \n(11.6).\nKeeping the design and code in sync\nA problem every team faces with design systems is keeping the design and \ncode in sync. It’s difficult! When your team is designing with components that \ndon’t exist in your live product, it’s easy for design systems to split into two \nversions:\n1. The version designers work with.\n2. The (real) version that the public sees, and that the developers work with.\nFrustrated by having to keep Sketch files up to date and in-sync with the live \nversion of their design system components, Airbnb sought to bridge the gap \nbetween design and code. They did this by experimenting with — and creating \n— an open-source library that allows you to write React \n(11.7) components that \nrender to Sketch documents. This effectively allows designers and engineers \nto ‘design in the browser’, working with real data, APIs, and Flexbox \n(11.8).\n“In Sketch, we use symbols and overrides. In React, we use \ncomponents and properties. The concepts are so similar that it \nseemed silly not to unify them.”\n11.6 designsystemfoundations.com/resources/\n11.7 reactjs.org\n11.8 css-tricks.com/snippets/css/a-guide-to-flexbox/\n\n250250\nMake it part of your \nprocess to update \ndesign libraries and \nany documentation \nwhen you create new, \nor update existing \ndesign system \nelements.\n\nMAIntAInInG A DesIGn sYsteM  251\nSee Airbnb’s Painting with Code article (11.9) by Design Technologist, Jon Gold \n(11.10) for more about this experiment.\nOf course, methods like Airbnb’s require designers on your team to have at \nleast a basic understanding of coding languages like React and CSS, which is \nunderstandably a barrier to entry for most design teams.\nMore realistically speaking: keeping the design and code in sync comes down \nto process and discipline.\nHere’s the process — if you update the design of an existing system element, or \nadd a new one, you should:\n1. Update the library, style guide(s), or whatever design file(s) your team uses \nto share design assets.\n2. Make sure the update is effectively tracked and queued for a developer to \nupdate the code, (for example, by creating a Github Issue).\n3. Update any documentation.\n4. Inform your team about the change. Ideally, they should be aware of the \nchange before it’s been made. If you include them in the process of figuring \nout why the change is needed and what the change should be, you will avoid \nany conflicts or repetition of work. \nIt’s advisable to assign responsibilities within your team to make sure the \nabove process is adhered to. We’ll talk about design system guardians, \nambassadors, teams, and leaders later in this chapter.\nCode as a design tool\nThe line between traditional design tools and code is becoming blurred. A \ngood number of design tools output CSS code of variable quality, and some \ndesign tools even allow you to insert React components from production into \nyour designs. I’m sure this line will continue to blur as design tools become \nmore advanced.\n11.9 airbnb.design/painting-with-code/\n11.10 jon.gold\n\n252\nAirbnb’s Head of Design, Alex Schleifer (11.11) comments:\n“We’re investing in code as a design tool. Moving closer to working \nwith assets that don’t only include layout and design, but also \nlogic and data. This helps bridge the gap between engineers and \ndesigners, thus reducing the need for design specs – or redlines – and \nthe steps between vision and reality.”\nGranting designers access to code may seem like a scary proposition to \nsome. But consider the time designers spend waiting for developers to make \nchanges, or the distraction developers feel when designers regularly want to \nmake small tweaks. Maybe it’s not such a crazy notion that designers could just \nwork directly in the code?\nThe line between designer and developer is blurred at GitHub \n(11.12), which is \nhardly surprising given the nature of their business. Diana Mounter \n(11.13), a \ndesign system leader at GitHub, explains the benefit of designers writing code:\n“Product designers and web designers at GitHub contribute \nproduction code and often assist in implementing their own designs. \nSome designers get deeper into the stack, but every product and web \ndesigner writes CSS. This means designers are primary users of \nPrimer, our design system, and are often the first to notice when there \nare problems with styles or gaps in documentation.”\nKeep your team in the loop\nWhen you make updates to a design system, or even just while you are \ndeliberating about updates, it’s good practice to involve your team. This can \nmean a few things:\n1. Meet as a team to discuss proposed changes to the system, as opposed to \nhaving individuals make updates that the team might not agree with, or \naren’t aware of.\n11.11 twitter.com/alexoid\n11.12 medium.com/@broccolini/design-systems-at-github-c8e5378d2542\n11.13 broccolini.net\n\nMAIntAInInG A DesIGn sYsteM  253\n2. Keep a changelog so team members can see what’s been updated, why the \nchange was made, and when it changed.\n3. Update the team when changes are made so people are kept in-the-know. \nA meeting is good, but people can be absent from meetings, and meetings \ndon’t always work well for remote teams, so consider something more \ninclusive — like sending an email, or writing a journal, post, or log of release \nnotes — that detail the changes.\n4. You could have a Slack channel dedicated to questions and updates related \nto the design system.\n5.  You could hold ‘office hours’, where members of the team — or a design \nsystem lead — are available to anybody who wishes to discuss anything \nabout the system.\n6.  Use a task tracking tool like GitHub Issues, Trello, or Jira so people can post \nrequests and bugs, or ask questions.\nTo quote from the same GitHub article as earlier:\n“We started using team posts to tell people about new Primer [design \nsystem] updates, to give people a heads up when we shipped large \ncode changes, and share more information behind our decisions.”\nIt’s interesting to note that GitHub wanted to “share more information behind \nour decisions”. Providing context is always important in design systems. \nContext helps to prevent repeated tweaks of elements, which previous \niterations have already addressed. When making a change, be sure to note:\n• Why was the element updated?\n• What problem is the update attempting to solve? \n• What’s improved about it? \nIn addition to keeping your team apprised of changes, it’s useful to appoint a \nperson (or a rotation of people) who can answer questions about the design \nsystem, or make updates to code, files, and documentation as needed. GitHub \nagain has an answer for this with their ‘office hours’ system, as well as what \nthey call ‘First Responders’:\n“Most teams at GitHub have an on-call duty rotation that we call \nFirst Responder. Whoever is on call is responsible for triaging issues \n(assign degrees of urgency) and responding to requests for help or \ncode review. Having someone on call means the rest of the team can \nstay focused on deep work. In addition to First Responder, we started \n\n254\ndoing office hours 3 days per week to give people a regular time to \nask us questions in person. This is used for pairing on code, talking \nthrough product updates that need our support, and responding to \ngeneral questions.”\nWhether you appoint ‘first responders’, set up office hours, or use a Slack \nchannel to field requests and address issues, it’s vital to the longevity and \nhealth of your design system that you keep the whole team in the loop and \nengaged with the system’s evolution.\nGuardians, ambassadors, and leaders\nProcess, responsibility, and accountability are hard to maintain in large \norganisations. It’s even harder when you have more than one product team \nworking with a design system, or when teams are based in different locations.\nWe’re human. We forget things from time-to-time. Things slip through the \ncracks. And then — to put it bluntly — you have some people who resist \nadopting the system, for whatever reason.\nYou need someone — or a team of people — responsible for making sure \nthe design system is adopted and maintained, and that all stakeholders are \nsuitably educated and involved. This doesn’t mean you have to adopt an \noverlord mentality; just that you need to be realistic about the system’s chances \nof running smoothly — and evolving — without some level of oversight and \nmanagement.\nDesign systems require leadership — whether it comes from a concerted, \ncollective effort by designers at your company, a dedicated design systems \nteam, and/or a ‘design system lead’.\nAnd keep-in-mind: the goal is to educate, not enforce. People don’t generally \nrespond well to orders. Approach the management of a design system from a \nteaching and collaborating perspective, not as the ruling authority.\nWith that said, let’s look at a few different strategies for establishing design \nsystem leadership on your team.\n\nMAIntAInInG A DesIGn sYsteM  255MAIntAInInG A DesIGn sYsteM  255\nYou need to be \nrealistic about the \ndesign system’s \nchances of running \nsmoothly, and \nevolving, without \nsome level of \noversight and \nmanagement.\n\n256\nAppoint a design system lead\nA design system lead’s key responsibilities are to:\n• Advocate for the system.\n• Establish design system processes.\n• Ensure that any processes for updates and maintenance are upheld.\n• Educate designers on system design best practices.\n• Research and discover new and improved ways to manage and maintain the \nsystem — whether it’s technology, processes, or design tools that could help \nthe team.\n• Promote and seek opportunities for designers and developers to work \ntogether.\n• Keep everyone up-to-date and engaged with the system.\n• Deal with any resistance to the system.\n• If applicable, recruit design system specialists to the team.\nAppointing a ‘design system lead’ can help to keep things running smoothly. \nThey advocate (and, when necessary, go to battle) for the system so your team \n(and design system) can thrive.\nForm a design systems team\nA dedicated design systems team has the advantage of being freed from \nbusiness-as-usual tasks and product roadmaps, and instead can focus their \ntime on design system tasks. These teams are generally staffed with people \nwho have a broad set of skills, potentially including designer-developer \nhybrids, front-end engineers, and even roles like copywriters and animation \nspecialists. These teams work on creating design system library assets, \ndocumentation, pattern libraries, and even specialist tools that facilitate the \nwork of product teams.\nWhere designers on product teams can have a narrow vision of design at their \ncompany (i.e. they generally only see what their team works on — they don’t \nsee what every team is working on), the design systems team should have \ngreater oversight of design across all product teams. This awareness helps to \nidentify patterns and components that can be shared across teams — avoiding \nteams overlapping and needlessly creating the same elements twice.\n11.14 link.medium.com/e6xYd06HGX\n11.15 benlister.net\n\nMAIntAInInG A DesIGn sYsteM  257\nAmbassadors and guardians\nFor organisations with multiple product teams and/or locations, it’s somewhat \nunrealistic to expect a single design system lead — or even a design systems \nteam — to manage everything. They can’t be everywhere at once. And perhaps \nmost importantly, they can’t be expected to know all the intricacies and edge \ncases of each product team’s work, and the user and business problems they \nare solving (which is vital knowledge for creating things like design system \npatterns).\nAppointing a design system ambassador on each product team alleviates \nsome of this pressure, ensuring every team has a design system voice and \nguardian present in design critiques, sprints, and product discussions. These \nambassadors report back to the design system team — or lead — creating a \nvaluable feedback loop, and facilitating well-informed decisions.\nSprout Social \n(11.14) have successfully adopted this ambassador approach:\n“Our design system ambassadors are designers from across the \norganization that act as liaisons between their embedded teams \nand the design systems team. They are our eyes, ears, and voice \nacross the company. Design system ambassadors not only define and \ndocument their team’s design patterns and components, but they also \ntake ownership of them, keep their team synced on design system \ninitiatives, and uncover ways to include design system work on their \nteam’s roadmaps.”\nSprout Social’s Design Systems Team Lead, Ben Lister (11.15) continues:\n“When looking for ambassadors, we seek out people who are not \nonly passionate about design systems but also those who are systems \nthinkers, willing to stand up for good design and advocate for best \npractices.”\nThe great thing about this approach is — even if you’re not empowered to hire \na design system lead or create a separate team — you can suggest that you \nor other members of your team take on a “design system guardian” role. As a \nguardian, you and system-minded designers from other product teams meet to \ncollaborate on creating and maintaining your system.\n\n258\nWhatever approach you choose, be mindful that a design system is unlikely \nto take-off — or survive after the fact — without leadership. Be proactive in \nhelping your team and design system thrive. You can create a team and appoint \nleaders at the outset of a design system project, or introduce them as the \nproject matures and gains trust (and a budget).\nClosing thoughts\nA design system is a marathon, not a sprint. They’re never finished. A good \ndesign system is flexible and open to change. You will grow and develop your \nfoundations, components, and patterns as you learn more about your user’s \nneeds and behaviour, and as your brand and business evolve.\nUltimately, the goal is for design systems to become integral to how your \ncompany designs and builds products. To achieve this you need to approach \nsystem design not just from a technical stance, but also from a position of \ncooperation. Diplomacy and communication are as important as the pixels you \ncraft and the code you write.\nLinzi Berry \n(11.16), the Design Systems Lead at Lyft, wrote an excellent article \n(11.17) on approaching design systems in a human-centered way. To quote \nfrom her article:\n“Systems design is not only scientific and meticulous, it’s the mastery \nof interacting with people in a sensitive and effective way. The \nsystem is an internal tool and our coworkers are its users. They’re \nhuman, just like us, and they want to do a good job. By empathizing, \nreassuring, educating, remaining flexible, sharing, communicating, \nand staying positive — we’ve overcome many hurdles and are \nexcited to take on new challenges in the future.”\nThe designs we create can shape our world in positive ways. When we design \nsystematically, we are able to efficiently create better experiences for our users \n— but design systems also empower us to work better together.\n11.16 twitter.com/taptodismiss\n11.17 medium.com/tap-to-dismiss/art-of-diplomacy-2ad1e2cac795\n\nMAIntAInInG A DesIGn sYsteM  259\nMy hope is that by reading this book, you are inspired and empowered — not \njust to lay strong foundations for the work you do, but also for the relationships \nyou build. Perhaps the most powerful advantage design systems have is that \nthey allow us to create better work together.\nI sincerely hope you enjoyed this book, and that it helps you and your team.\nGood luck :)\n\nAbout the author\n— Andrew Couldwell\nAbout \nthe \nauthor\n\nAbout tHe AutHor\nAndrew is a web designer and developer, born and raised in Yorkshire, in the \nNorth of England. He started building websites in 2001, back when websites \nwere made of table-based HTML and Flash movies.\nHe started his career at various agencies, where he was employed as a web \ndeveloper, a web designer, and a product designer, respectively. Frustrated by \nthe limited scope and challenges of the agency world, he left to pursue a new \nlife of remote working from Cornwall, Spain, and London. During this period \nhe did freelance design and web development for brands like NASA, Red Bull, \nMTV, Nike, Harvey Nichols, and Foursquare.\nWhen not working on client projects, Andrew focusses on his long-time \npassion project: a website called Club of the Waves \n(01). First launched in 2006, \nthe site is an international showcase of artists and photographers whose work \nfocusses on surfing and surf culture.\nIn 2014, he moved overseas to New York City to be the lead product designer \nof a new Adobe product. Working with a team of developers at Behance, \ntogether they launched Adobe Portfolio, a tool that helps creatives share their \nwork online. In 2016, he moved onto a new challenge at WeWork as the system \ndesign lead, where he initiated, designed, and documented their digital brand \nguidelines, and two design systems.\nIn 2018, he returned to freelance design and development, working remotely \nfor clients all around the world. \nAndrew does his best work when he’s designing impactful, meaningful digital \nproducts, and working with creative people who want to help people and make \nthe world a better place. He also loves to build what he designs.\nCurrently based in Los Angeles, California, Andrew lives with his wife, Meagan, \nand their three cats. And they’re expecting their first child\n twins in 2020!\nSee Andrew’s portfolio at roomfive.net\nSay hello @andrewcouldwell\n01 clubofthewaves.com\n\nOwl Studios\nThis book is a product of Owl Studios, who are \na small but dedicated design and development \nstudio. It was written and designed by Andrew \nCouldwell, and edited by Meagan Fisher.\nWe’re wise — and often nocturnal — designers \nwho code; together we have over 30 years of \npractice creating web experiences. We take on \nprojects of all sizes, from web design and build, \nto product, branding, and system design. We also \ntravel to do workshops and talk at design events, \ninternationally.\nIf you want to work with us; reach out and say \nhello! We’re excited to hear about your \nawesome project.\nowlstudios.co\nhello@owlstudios.co\n\nbeHInD tHe book\nClub of the Waves\nThis name appears a few times thoroughout this \nbook — partly because it’s a website driven by a \ndesign system, and partly because it’s something \nI’m proud to share. Club of the Waves is a labour \nof love I founded back in 2006. It’s an international \nshowcase of artists and photographers whose \nwork focusses on surfing and surf culture. \nCheck out the website and find new artists and \nphotographers I think you’ll love.\nclubofthewaves.com\n@clubofthewaves\n\nAcknowledgments \nI couldn’t have created this book without the support and love of my wonderful \nwife and best friend, Meagan Couldwell \n(02). Writing and publishing a book \nwas only ever going to cost money, not make money. I had to take time out of \npaid work to do it. She only ever encouraged me to do this, and that’s pretty \namazing! Meagan also did a brilliant job editing this book — it simply wouldn’t \nbe what it is without her. Her patience, input, revisions, and contributions (as \na web designer herself ) made the content so much better — all for which I’m \nvery grateful.\nAlso, thanks to our little family of cats! Fluffy, Theo, and Junior. I most \ncertainly wrote some of this book with Fluffy on my lap, Theo pressed into me \nby my side, or attempting to type while Junior, Fluffy, or Theo tried to sit on the \nkeyboard. Our little family of cats and my wife make me a happier person. A \nhappy, healthy mind helps you do your best work.\nI’d like to thank my amazing family: Mum, Ian, grandparents, uncles, aunties, \ncousins... everyone. Though I may live on a different continent to them \nnow, they shaped who I am — and have always been supportive in my crazy \nendeavours to live and work abroad. And thank you to my ‘new’ family in the \nUnited States who have made me feel so welcome. I love you all.\nThanks to all my friends, internationally. Once upon a time, I virtually lived to \nwork. It got me a long way in my career, but it never made me happy. One of \nthe most important lessons I’ve learned is to strike a good work/life balance. \nThe friends I’ve made along the way, in Yorkshire, Cornwall, London, and New \nYork have made me a happier, healthier, and stronger person. Though my liver \nmight not share the same view!\nProfessionally, almost everyone I’ve worked with has in some small or large \nway informed much of what I cover in this book. Good and bad, thank you for \nthe learning experiences.\nI’d like to specifically thank a few former work colleagues. Nick Stamas \n(03) is \none of the rare people I’ve worked with whose talent and experimental nature \npushed me to be better, learn, and grow. Working with Nick on design systems \ninformed a good deal of the content of this book — and for that, he deserves \nhuge credit and thanks. Also, thanks to Keaton Price \n(04), who’s patient, \nsystematic, and iterative approach to design problems (and office politics) is \ninspiring — and something I held in mind a good few times while writing this \nbook. And finally, Bobby Ghoshal \n(05), who set me on the path to discovering \nthe Foundations Model and the idea of Digital Foundations. He didn’t tell me \n\nACknoWLeDGeMents\nwhat to do or how to do it. Instead, he freed me from the chains of my daily \nroutine and encouraged me to do what would ultimately be some of my best \nand most influential work to date.\nI’d like to thank Shane Mielke \n(06). The only part of this book process I knew \nhow to do was write. The rest was a mystery to me. Shane shared with me his \nstory of how he self-published his book, Launch It, and everything he’d learned \ndoing it.\nThank you to my good friend, Paul Davies \n(07). Paul took a chance on me early \nin my career, which proved to be a big turning point for me \n(08). 11 years later, \nhe kindly volunteered to proof-read this book, which I graciously accepted. It’s   \njust a shame he hated it! Only joking :)\nAnd finally, thank you! It means a lot to me that you read my book. I hope \nyou enjoyed it and found it useful. If you did, I’d really appreciate it if you’d \nrecommend this book to your friends, colleagues, and followers.\nIf I forgot you, I’m sorry, and thank you :)\n02 owltastic.com\n03 nickstamas.com\n04 keaton.design\n05 twitter.com/ghoshal\n06 shanemielke.com\n07 bhvr.co.uk\n08 medium.com/@andrewcouldwell/i-nearly-quit-42c246c15b74\n\nFor you, Dad\nI would like to dedicate this book to my dad, \nMichael Couldwell. I lost my dad to a short battle \nwith cancer before my 30th birthday. It knocked \nme sideways. He raised me to be competitive — \nfor better or for worse. Much of my teen years \nand young adulthood were spent trying to make \nmy Dad proud. He never saw me leave England’s \nshores to live and work in New York City. He only \ncaught a glimpse of my career taking off before \nthat. He never got to meet my wife, or my future \nkids. I often wonder how he’d feel about much of \nwhat I’ve done since he left. I wrote a book! I’m \nproud of that. I think he would be too.\nSo this book’s for him. I love you, Dad.\n\nDeDICAtIon\nFin\n\n",
  "chunks": [
    {
      "id": "chunk-0",
      "text": "Author and designer: Andrew Couldwell\nEditor: Meagan Fisher Couldwell\nPublished 2019. All rights reserved\nLaying\nthe\nFound—\nations\nTitle",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "Introduction",
        "globalChunkIndex": 0
      }
    },
    {
      "id": "chunk-1",
      "text": "Con— \ntents\n\nContents  III",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "II",
        "globalChunkIndex": 1
      }
    },
    {
      "id": "chunk-2",
      "text": "Foreword\nMeagan Fisher Couldwell\n10 \nIntroduction\nReal talk\nWho is this book for?\nThe role of development in design\nTechnology moves too fast for print\nSystem design is not a scary thing\nSystematic design\nThis book will help you and your team\n20\nChapter 1: \nWhat is a design system?\nWhy are design systems important?\nWhen do we need design systems?\nLeading the way\n26 \nChapter 2: \nselling a design system\nFind your partners\nLaying the foundations\nStart small, and adjust your pitch \naccordingly\nAt what stage do you sell?\nThe importance and quality of ‘the sell’\nA word on office politics",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "VIII",
        "globalChunkIndex": 2
      }
    },
    {
      "id": "chunk-3",
      "text": "80 \nChapter 4: \ndesign system model\nSpeaking the same language\nThe Foundations Model\nFoundations\nComponents\nPatterns\nTemplates and Pages\nDesign systems in product design\nA case study of a design system at work\nAllow for flexibility\n106 \nChapter 5: \nGetting started\nStart by identifying the problems \nWhere do we go from here?\nBe smart about which approach you choose\n38 \nChapter 3: \nLaying the Foundations\nPutting up scaffolding\nThe importance of brand in system design\nMarketing vs. product\nDigital Foundations\n— Mission, values, and principles\n— Brand identity\n— Brand tone of voice and copywriting\n— Formatting\n— Accessibility and inclusivity\n— Responsive design\n— Process\n— Design systems\nHow are brand guidelines different to \ndesign system documentation?\nMake it visible, make it count\nJust get it done!\nFlaunt it\nDon’t lose sight of why you’re doing this...\n\nContents  V\n114 \nChapter 6: \nAn Iterative approach\nFind your team\nInterface audits\nColour audits\nCode audits\nVisual audits\nWhat",
      "metadata": {
        "startIndex": 0,
        "endIndex": 994,
        "chunkIndex": 0,
        "section": "IV",
        "globalChunkIndex": 3
      }
    },
    {
      "id": "chunk-4",
      "text": "st get it done!\nFlaunt it\nDon’t lose sight of why you’re doing this...\n\nContents  V\n114 \nChapter 6: \nAn Iterative approach\nFind your team\nInterface audits\nColour audits\nCode audits\nVisual audits\nWhat now?\nManaging the workload\nThe Frankenstein monster effect\nRefinement vs. exploration\n140 \nChapter 8: \nsystematising the design\nSet the system up for success\nYou need a design system library \nConstraints are not a bad thing\nTools for the job\nNaming conventions\nColour system\nGuidelines for colour\nLimited text styles\nEditable components\nCover all states of components\nPattern library\nDesign tokens and Sass variables\nDesigner access to code\nTracking and organising system tasks\n128 \nChapter 7: \nA wholesale approach\nDesign exploration\nGround your work in reality\nBuilding a visual language\nBuild and launch plans\nIt doesn’t have to be perfect\nWholesale design, and an iterative build \nand launch\nThe disruption factor\nRolling out a design system, responsibly",
      "metadata": {
        "startIndex": 794,
        "endIndex": 1794,
        "chunkIndex": 1,
        "section": "IV",
        "globalChunkIndex": 4
      }
    },
    {
      "id": "chunk-5",
      "text": "launch plans\nIt doesn’t have to be perfect\nWholesale design, and an iterative build \nand launch\nThe disruption factor\nRolling out a design system, responsibly",
      "metadata": {
        "startIndex": 1594,
        "endIndex": 2594,
        "chunkIndex": 2,
        "section": "IV",
        "globalChunkIndex": 5
      }
    },
    {
      "id": "chunk-6",
      "text": "220 \nChapter 10: \nGallery\nInspirational examples of great \ndocumentation\n242 \nChapter 11: \nMaintaining a design system\nWork with shared design assets\nWorking with patterns\nKeep documentation up to date\nKeeping the design and code in sync\nCode as a design tool\nKeep your team in the loop\nGuardians, ambassadors, and leaders\nClosing thoughts\n260 \nthe author\nAndrew Couldwell\nOwl Studios\nClub of the Waves\nAcknowledgments\nDedication\n180 \nChapter 9: \nDocument everything!\nMore than a style guide\nThe basics\nBetter together\nDon’t leave documentation until last\nDocument as you go\nWhat should you document?\n— Do’s and don’ts\n— Colour\n— Brand identity\n— Typography\n— Copywriting\n— Components\n— Patterns\n— Don’t forget the small things\n— Grid, layout, and spacing\n— Design tokens\nHow do you document a design system?\nGetting started, the easy way\nLiving style guides\nIf not a Google Doc, then what?\n\nContents  VII\nLet’s \nget \nstar— \nted",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "VI",
        "globalChunkIndex": 6
      }
    },
    {
      "id": "chunk-7",
      "text": "system?\nGetting started, the easy way\nLiving style guides\nIf not a Google Doc, then what?\n\nContents  VII\nLet’s \nget \nstar— \nted",
      "metadata": {
        "startIndex": 800,
        "endIndex": 1800,
        "chunkIndex": 1,
        "section": "VI",
        "globalChunkIndex": 7
      }
    },
    {
      "id": "chunk-8",
      "text": "Fore— \nword\n— by Meagan Fisher Couldwell\n@owltastic\n\nForeWorD  IX\nThere are many reasons why I’m so excited that you’re holding this book right \nnow. To start, Andrew has years of experience creating design systems for \neveryone from small, agile clients to big, complex teams — in fact, he was \ndoing “system design” long before we had a name for it, and well before it first \nappeared in the growing list of skills which designers are required to know.\nI, on the other hand, had long avoided thinking, reading, or talking about \nsystem design because it sounded big and terrifying and complicated. But \nconversations with Andrew about his approach made it feel simple, logical, and \n(believe it or not) fun to do. I’ve been telling him for years that he should write \na book to help demystify system design for others, which is a big reason why \nI’m so glad this book is finally in your hands.\nIf you think system design won’t work for your complicated team, or are \nconfused by the jargon",
      "metadata": {
        "startIndex": 0,
        "endIndex": 992,
        "chunkIndex": 0,
        "section": "VIII",
        "globalChunkIndex": 8
      }
    },
    {
      "id": "chunk-9",
      "text": "fy system design for others, which is a big reason why \nI’m so glad this book is finally in your hands.\nIf you think system design won’t work for your complicated team, or are \nconfused by the jargon surrounding it, or just want to take some small steps \ntoday to be better at your job, this book is going to be a godsend for you. It’s \nnot written on behalf of any company, or to make anyone look good, so it’s an \nhonest and unflinching look at the challenges and rewards that come with \ndesigning systematically.\nThis book covers — and goes beyond — the more commonly explored \ntopics surrounding how to create a design system. It also gives us a helpful \nframework for how we can work together to create better experiences, and \nshows us how to lower the barriers between different teams and roles.\nIn addition to drawing on his own 15+ years of experience as a web designer, \nproduct designer, developer, manager, and system design lead, this book \nincludes a wealth of research; it covers case",
      "metadata": {
        "startIndex": 792,
        "endIndex": 1792,
        "chunkIndex": 1,
        "section": "VIII",
        "globalChunkIndex": 9
      }
    },
    {
      "id": "chunk-10",
      "text": "s.\nIn addition to drawing on his own 15+ years of experience as a web designer, \nproduct designer, developer, manager, and system design lead, this book \nincludes a wealth of research; it covers case studies, articles, and examples \nfrom dozens of different teams.\nAndrew often says “system design is really a term we use to talk about best \ndesign practices.” The knowledge packed into this book will not only improve \nthe way you create experiences, it will also empower you to build stronger \nteams and a better world. We can’t wait to see what you do with it!\n\n10\nIntro— \nduc—\ntion\nIntroduction\n\nIntroDuCtIon  11\nThis book covers what design systems are, why they are important, and how \nto get stakeholder buy-in to create one. It introduces you to a simple model, \nand two very different approaches to creating a design system. What’s unique \nabout this book is its focus on the importance of brand in design systems, and \ncreating documentation.",
      "metadata": {
        "startIndex": 1592,
        "endIndex": 2545,
        "chunkIndex": 2,
        "section": "VIII",
        "globalChunkIndex": 10
      }
    },
    {
      "id": "chunk-11",
      "text": "a simple model, \nand two very different approaches to creating a design system. What’s unique \nabout this book is its focus on the importance of brand in design systems, and \ncreating documentation. It’s a comprehensive, practical guide that’s simple to \nfollow and easy on the eye.\nI’ve been designing and building websites, working on products, and creating \ndesign systems for over 15 years. During that time:\n• I’ve been the solo designer and developer at a company.\n• I’ve worked with small 1-5 person teams.\n• I’ve worked with large 10-100+ person teams.\n• I’ve led teams of designers.\n• I’ve worked in-house, remotely, and as a freelancer.\n• I’ve worked with and at small startups and large corporations.\nI’ve seen things go so wrong, so many times. I’ve learned from those \nexperiences, and worked with others to fix the problems we’ve encountered.\nI’ve spent a lot of time learning, assimilating, and distilling all that I’ve learned \ndown to its simplest form.",
      "metadata": {
        "startIndex": 2345,
        "endIndex": 3317,
        "chunkIndex": 3,
        "section": "VIII",
        "globalChunkIndex": 11
      }
    },
    {
      "id": "chunk-12",
      "text": "rom those \nexperiences, and worked with others to fix the problems we’ve encountered.\nI’ve spent a lot of time learning, assimilating, and distilling all that I’ve learned \ndown to its simplest form. I’ve sold the value of simple system design thinking, \nmodels, terminology, and values to designers, developers, and stakeholders.\nAfter years of this, I’m left with dozens of Keynote decks, Google Docs, design \nsystems docs, style guides, design files, code, scars, bruises, lessons learned, \nenemies, friends, and a head full of thoughts.\nI decided to do something meaningful with all that experience. I sincerely \nhope you enjoy this book, and that it helps you and your team! :)\n\n1212\nThis is real talk \nabout creating design \nsystems. No jargon, \nno glossing over the \nhard realities, and \nno company hat. \nJust good advice, \nexperience, and \npractical tips.\n\nIntroDuCtIon  13\nReal talk\nPerhaps my “real talk” approach is because of my roots: I was born and raised \nin the industrious north of",
      "metadata": {
        "startIndex": 3117,
        "endIndex": 4116,
        "chunkIndex": 4,
        "section": "VIII",
        "globalChunkIndex": 12
      }
    },
    {
      "id": "chunk-13",
      "text": "ompany hat. \nJust good advice, \nexperience, and \npractical tips.\n\nIntroDuCtIon  13\nReal talk\nPerhaps my “real talk” approach is because of my roots: I was born and raised \nin the industrious north of England, where people value hard work and plain \nspeaking. Or perhaps it’s all my experiences — good and bad — that have \nshaped the way I think and talk about designing and building websites and \ndigital products.\nI don’t like jargon. I like to keep things simple. Nowhere is this more important \nthan in system design, where communication and collaboration are essential. \nThe simpler you keep things, the more successful you’ll be. This is a theme \nthroughout this book, from the design system model and terminology, to \npractical steps, to working with your team.\nI could tell you how to design, build, and document a design system for \nyourself, as a personal project. It would be awesome, but I doubt that’s a reality \nfor many people reading this book.",
      "metadata": {
        "startIndex": 3916,
        "endIndex": 4876,
        "chunkIndex": 5,
        "section": "VIII",
        "globalChunkIndex": 13
      }
    },
    {
      "id": "chunk-14",
      "text": "r team.\nI could tell you how to design, build, and document a design system for \nyourself, as a personal project. It would be awesome, but I doubt that’s a reality \nfor many people reading this book. Chances are you work on, or lead a team at \na company... Or you plan to.\nThe realities of working in-house at companies — especially large companies \n— are often very different from the rosy perspectives we read about on \nMedium and company blogs, and hear about in design talks. These stories \nare told by people wearing a company hat, who can only say generally positive \nthings about their experience. They don’t talk about office politics and other \nhard realities. I don’t work for anyone but myself. I’ll tell you — honestly \n— how to navigate the challenges of working in-house, with stakeholders, \ndeadlines, legacy problems (design, code, and people!), and all the other fun \nchallenges we encounter along the way.\nI’ve been in the creative trenches, fighting for the designers and",
      "metadata": {
        "startIndex": 4676,
        "endIndex": 5667,
        "chunkIndex": 6,
        "section": "VIII",
        "globalChunkIndex": 14
      }
    },
    {
      "id": "chunk-15",
      "text": "stakeholders, \ndeadlines, legacy problems (design, code, and people!), and all the other fun \nchallenges we encounter along the way.\nI’ve been in the creative trenches, fighting for the designers and developers on \nmy team, the brand, and the users. I’ve defeated the odds to create beautiful \nand meaningful work. It’s not always easy. In fact, it’s often very hard, and very \ntiring. Sometimes it even feels hopeless, but perseverance and the arsenal of \nknowledge you’ll learn in this book will set you in good stead to create the best \nwork of your career!\nWho is this book for?\nThis book is definitely more design-focussed, but we’ll be delving into the \nwhole process — which involves much more than just design.\nSelling, managing, and advocating are key to the success (or failure) of a design \nsystem. You can design a system in a matter of days, but you won’t get much \n\n14\nfurther without the support and collaboration of developers, product \nmanagers, and other stakeholders.",
      "metadata": {
        "startIndex": 5467,
        "endIndex": 6454,
        "chunkIndex": 7,
        "section": "VIII",
        "globalChunkIndex": 15
      }
    },
    {
      "id": "chunk-16",
      "text": ") of a design \nsystem. You can design a system in a matter of days, but you won’t get much \n\n14\nfurther without the support and collaboration of developers, product \nmanagers, and other stakeholders. This book will help you reach and \ncollaborate with these stakeholders.\nWe’ll cover brand and digital guidelines, and how to create, document and \nroll out a design system. This book will also prepare you for how to build your \nteam, and set your system up for success.\nBuilding, integrating, and launching a design system is arguably the lion’s \nshare of the work. We won’t be covering development processes or writing \n(much) code, but we’ll certainly look at the overlap of design and development. \nIt’s important that design and engineering teams work together, which is a \ntheme throughout this book.\nThe role of development in design\nA design system will go nowhere without developers. A beautifully designed \nlibrary of design components is useless if it lives only in design software and",
      "metadata": {
        "startIndex": 6254,
        "endIndex": 7250,
        "chunkIndex": 8,
        "section": "VIII",
        "globalChunkIndex": 16
      }
    },
    {
      "id": "chunk-17",
      "text": "his book.\nThe role of development in design\nA design system will go nowhere without developers. A beautifully designed \nlibrary of design components is useless if it lives only in design software and \ndocumentation. It has to be built, deployed, maintained, and scaled. Do you \nwant to create a design system? Developers are your new best friends (if \nthey’re not already, which they should be). \nDevelopment should always be part of the design process. Designers and \ndevelopers working in silo — or even physically separated from each other (in \nthe workplace) — is bad for team culture, as well as the quality and efficiency \nof the work.\nWith any form of digital design — but especially system design — I encourage \nyou to discard this (lazy) notion of ‘the developers will figure it out’. Involve \ndevelopers. Get them interested in building the system with you, not after \nyou’ve finished designing it.",
      "metadata": {
        "startIndex": 7050,
        "endIndex": 7959,
        "chunkIndex": 9,
        "section": "VIII",
        "globalChunkIndex": 17
      }
    },
    {
      "id": "chunk-18",
      "text": "encourage \nyou to discard this (lazy) notion of ‘the developers will figure it out’. Involve \ndevelopers. Get them interested in building the system with you, not after \nyou’ve finished designing it. We’ll talk about this more throughout this book.\nTechnology moves too fast for print\nThis book intentionally avoids referencing specific tools or software, save for \na few exceptions. Technology evolves so fast that anything I reference may be \nobsolete by the time you read this! (Hello, it’s 2018/19 as I write this).\nThat said: the supporting website \n(01) for this book includes links to tools, \nresources, and articles relating to system design. They, at least, will remain \ncurrent.\n\nIntroDuCtIon  15\nSystem design is not a scary thing\nA good place to start is to discard this notion that system design is a scary \nprocess, or an exclusive club for the design elite. System design is nothing \nnew. Unlike responsive design, Sass, CSS Grid, or Flexbox — nobody invented \nsystem design.",
      "metadata": {
        "startIndex": 7759,
        "endIndex": 8750,
        "chunkIndex": 10,
        "section": "VIII",
        "globalChunkIndex": 18
      }
    },
    {
      "id": "chunk-19",
      "text": "hat system design is a scary \nprocess, or an exclusive club for the design elite. System design is nothing \nnew. Unlike responsive design, Sass, CSS Grid, or Flexbox — nobody invented \nsystem design. It’s just a term our industry has given to cover the processes \nand habits that lead to the most efficient digital design, development, and \nmanagement. That’s all.\nFeel better? Good :)\nSystematic design\nIt might be easier to view system design as ‘a systematic approach to design’.\nSystem design is about not tackling design problems in isolation, or as one-\noffs. It’s about considering versatile solutions that can be used repeatedly and \nconsistently throughout a product. It’s about not creating a different way to \nsolve the same or similar problem every time you come across it.\nA design system is the end result of a systematic approach to design. It’s the \nharmonious package of design, code, guidelines, and documentation that’s \nused to build consistent, on-brand, and efficient websites",
      "metadata": {
        "startIndex": 8550,
        "endIndex": 9549,
        "chunkIndex": 11,
        "section": "VIII",
        "globalChunkIndex": 19
      }
    },
    {
      "id": "chunk-20",
      "text": "em is the end result of a systematic approach to design. It’s the \nharmonious package of design, code, guidelines, and documentation that’s \nused to build consistent, on-brand, and efficient websites and products.\nThe sobering reality\nHere’s the thing — and, sorry, this is the brutal and honest truth: if you’re a \ndesigner working on websites, products or apps, and you’re not designing (at \nleast somewhat) systematically — you’re doing more harm than good.\n• Do you choose a different font, weight, or size for every header?\n• Are you creating a different button every time you need a call to action?\nEvery time you design a different (unnecessary) solution, you’re adding more \ncomplexity to the code. This leads to legacy problems. Future edits will be \nharder to make. Shipping new features or iterations will take longer. Page \nload times will increase. The user experience can be diminished. You get the \npicture.",
      "metadata": {
        "startIndex": 9349,
        "endIndex": 10349,
        "chunkIndex": 12,
        "section": "VIII",
        "globalChunkIndex": 20
      }
    },
    {
      "id": "chunk-21",
      "text": "iterations will take longer. Page \nload times will increase. The user experience can be diminished. You get the \npicture.",
      "metadata": {
        "startIndex": 10149,
        "endIndex": 11149,
        "chunkIndex": 13,
        "section": "VIII",
        "globalChunkIndex": 21
      }
    },
    {
      "id": "chunk-22",
      "text": "16\nYou’re halfway there!\nThe good news is, you may already be designing systematically without even \nrealising that’s what you’re doing.\n• When you decide to use only two typefaces...\n• When you use title case instead of sentence case in certain scenarios...\n• When you define a set of text styles or pick a colour palette...\n• When you design to a consistent grid or use specific spacing...\n...and stick* to those design choices — you’re designing systematically.\nIf you design systematically, you’ll be a better digital designer for it. You don’t \nnecessarily have to create a design system, to ‘do’ system design! Not every \nproject requires a design system. We’ll get into this more throughout this book, \nbut just keep in mind: even if you don’t need a design system, don’t currently \nhave one, or your company won’t grant you the time to create one, you should \nstill take a systematic approach to design.\n* To clarify: by “stick”, I don’t mean permanently.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 964,
        "chunkIndex": 0,
        "section": "01. designsystemfoundations.com",
        "globalChunkIndex": 22
      }
    },
    {
      "id": "chunk-23",
      "text": "system, don’t currently \nhave one, or your company won’t grant you the time to create one, you should \nstill take a systematic approach to design.\n* To clarify: by “stick”, I don’t mean permanently. All design choices are subject to \nchange and iteration.\nThis book will help you and your team\nThis book is about levelling up as a digital designer by taking those extra steps \nto go from designing systematically to creating a design system.\nThis book will help you formulate and document the design choices you and \nyour team make. After all, a system wouldn’t be much of a system without \nrules. Remember: the systematic design choices you make are no good just in \nyour head — especially if you’re working with a team.\nWe’ll look at the importance of brand in system design — first by creating \ndigital brand guidelines, then building design systems upon those solid \nfoundations.\nYou’ll learn about creating a design library of system elements that will enable \nyour design team to work quickly,",
      "metadata": {
        "startIndex": 764,
        "endIndex": 1765,
        "chunkIndex": 1,
        "section": "01. designsystemfoundations.com",
        "globalChunkIndex": 23
      }
    },
    {
      "id": "chunk-24",
      "text": "gital brand guidelines, then building design systems upon those solid \nfoundations.\nYou’ll learn about creating a design library of system elements that will enable \nyour design team to work quickly, efficiently, and consistently.\nI’ll coach you on how to adjust your design system pitch to different \nstakeholders at your company in order to gain the support and momentum you \nneed to succeed.\n\nIntroDuCtIon  17IntroDuCtIon  17\nYou can design a \nsystem in a matter of \ndays, but you won’t \nget much further \nwithout the support \nand collaboration of \ndevelopers, product \nmanagers, and other \nstakeholders.\n\n18\nWe’ll talk (a lot) about the importance of finding your team, and working \ntogether to identify the problems in your product and processes — and \npractical things you can do to fix them. We’ll even look at two different \napproaches to these problems: an ‘iterative’ approach, and a ‘wholesale’ \napproach.\nAnd throughout this book, I’ll share lots of real examples of design work,",
      "metadata": {
        "startIndex": 1565,
        "endIndex": 2557,
        "chunkIndex": 2,
        "section": "01. designsystemfoundations.com",
        "globalChunkIndex": 24
      }
    },
    {
      "id": "chunk-25",
      "text": "them. We’ll even look at two different \napproaches to these problems: an ‘iterative’ approach, and a ‘wholesale’ \napproach.\nAnd throughout this book, I’ll share lots of real examples of design work, \ndocumentation, and best practices to illustrate the concepts covered.\n\nIntroDuCtIon  19\nThank you for reading my \nbook! I hope you enjoy it \nand find it useful. If you do \nlike it, I’d really appreciate \nit if you’d recommend it to \nyour friends, colleagues, \nand followers :)\n— designsystemfoundations.com\n@andrewcouldwell\nIntroDuCtIon  19\n\n20\nWhat is a design system?\n20\n01\nWhat \nis a \nDesign \nsys— \ntem?\nLAYInG tHe FounDAtIons\n\nWHAt Is A DesIGn sYsteM?  21\nA design system is hard to summarise. It’s perhaps easier to explain why \ndesign systems are important, and what they help us to do, than to explain \nexactly what they are. However, here’s my attempt at a definition:\nDesign systems bring order and consistency to digital products.",
      "metadata": {
        "startIndex": 2357,
        "endIndex": 3299,
        "chunkIndex": 3,
        "section": "01. designsystemfoundations.com",
        "globalChunkIndex": 25
      }
    },
    {
      "id": "chunk-26",
      "text": "systems are important, and what they help us to do, than to explain \nexactly what they are. However, here’s my attempt at a definition:\nDesign systems bring order and consistency to digital products. They help \nto protect the brand, elevate the user experience, and increase the speed \nand efficiency of how we design and build products. They are a source of \ntruth and a system of record for our design decisions. They hold us to high \nstandards, keep teams on the same page, and help to onboard new team \nmembers. They document the why, when, where, and how.\nI should stress that the design, build, and ‘rules’ of a system are not set in stone \n— they are a constant work in progress, open to iteration to improve, adapt, \nand scale.\nDesigning and building on-brand, quality, and consistent digital products \nat scale is hard. It’s even harder when your designers and engineers span \ndifferent product teams, departments, and locations.",
      "metadata": {
        "startIndex": 3099,
        "endIndex": 4038,
        "chunkIndex": 4,
        "section": "01. designsystemfoundations.com",
        "globalChunkIndex": 26
      }
    },
    {
      "id": "chunk-27",
      "text": "igning and building on-brand, quality, and consistent digital products \nat scale is hard. It’s even harder when your designers and engineers span \ndifferent product teams, departments, and locations. Success requires more \nthan an assortment of Photoshop or Sketch files, style guides, a print brand \nbook, pattern libraries, and whatever else your team may be working from. You \nneed a single source of truth.\nWhy are design systems important?\nHere are just some of the things design systems help us with:",
      "metadata": {
        "startIndex": 3838,
        "endIndex": 4838,
        "chunkIndex": 5,
        "section": "01. designsystemfoundations.com",
        "globalChunkIndex": 27
      }
    },
    {
      "id": "chunk-28",
      "text": "Design systems allow us to work faster and more efficiently. They streamline \nthe design and development process — decreasing the amount of time it takes \nto design, build, and ship new websites, products, and features. They also \nenable teams to rapidly prototype and experiment with ideas in high fidelity — \nultimately saving the business time and money.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "1. Efficiency and speed",
        "globalChunkIndex": 28
      }
    },
    {
      "id": "chunk-29",
      "text": "Design systems help us design and build on-brand, quality digital products. \nRather than working with a variety of styles and slightly differing approaches, \nteams are able to follow guidelines and stay consistent. This ensures interfaces \nare more predictable and accessible, which fosters trust in users and helps \nwith conversion and retention.\n\n22",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "2. Consistency and user experience",
        "globalChunkIndex": 29
      }
    },
    {
      "id": "chunk-30",
      "text": "Design systems help weave brand identity throughout a product in a \nconsistent and maintainable way. I’m a big believer that brand plays a crucial \nrole in design systems. This is why I recommend thinking and designing \nholistically — considering the brand and product as a whole, as opposed to \ntackling problems one-by-one and hoping the pieces will fit.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "3. Creating stronger brands",
        "globalChunkIndex": 30
      }
    },
    {
      "id": "chunk-31",
      "text": "Design systems help designers and engineers spend less time needlessly \ncreating the same things over-and-over — slightly differently every time — and \nmore time focussing on user research, problem-solving, and building great \nproducts. They also help keep feedback focussed on the user experience, as \nopposed to debating padding, colours, and type choices.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "4. They free us to focus on what matters",
        "globalChunkIndex": 31
      }
    },
    {
      "id": "chunk-32",
      "text": "Design systems keep our work organised, which makes everything easier \n— from accessing common design elements in a master library, to using a \nuniform approach for the structure and naming conventions in the code, to \nease of maintenance, iteration, and syncing of the design and code.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "5. Organisation",
        "globalChunkIndex": 32
      }
    },
    {
      "id": "chunk-33",
      "text": "Design systems help our teams communicate more clearly by establishing \nnaming conventions and consistent terminology across the design and code. \nWe’ll look at a simple design system model and terminology in the “Design \nSystem Model” chapter.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "6. Speaking the same language",
        "globalChunkIndex": 33
      }
    },
    {
      "id": "chunk-34",
      "text": "Design systems and documentation are a source of truth for the whole team. \nA well designed, implemented, and maintained design system sets high \nstandards for your product and your process. Everyone becomes accountable \nfor upholding these standards.\nWhen do we need design systems?\nDesign systems are always useful, but the ‘need’ for a design system varies \ngreatly depending on the nature of the business, product, or project.\nIt’s a reasonably common experience for design agencies, small companies, \nand freelancers to design and build without a design system, then move on. \nThis is often fine, and it works for many companies. The resulting product may \n\nWHAt Is A DesIGn sYsteM?  23\nbe online for only a couple years before it’s replaced when change is needed. \nThere’s nothing inherently wrong with that process. It’s cost effective, simple, \nand fast.\nDesign systems are useful when companies aim to iteratively work on a \nproduct over time — to not just build once, and replace later.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 997,
        "chunkIndex": 0,
        "section": "7. Source of truth",
        "globalChunkIndex": 34
      }
    },
    {
      "id": "chunk-35",
      "text": "wrong with that process. It’s cost effective, simple, \nand fast.\nDesign systems are useful when companies aim to iteratively work on a \nproduct over time — to not just build once, and replace later. This is why \nthey’re more frequently needed for products than marketing websites.\nDesign systems are especially useful when a team of people are working on the \nsame product. I can’t stress this point enough.\n“Software is often built by teams – sometimes incredibly large teams \n– of people. The challenge to create coherent experiences multiplies \nexponentially as more people are added to the mix. Also, over time, \nno matter how consistent or small a team is, different people will \ncontribute new solutions and styles, causing experiences to diverge.”\nQuote taken from an article (1.1) by Karri Saarinen (1.2), a principal designer \non the Airbnb design team.\nStartups are a little different. For startups, a design system can be a low \npriority, because everything tends to be wide open to",
      "metadata": {
        "startIndex": 797,
        "endIndex": 1792,
        "chunkIndex": 1,
        "section": "7. Source of truth",
        "globalChunkIndex": 35
      }
    },
    {
      "id": "chunk-36",
      "text": "rri Saarinen (1.2), a principal designer \non the Airbnb design team.\nStartups are a little different. For startups, a design system can be a low \npriority, because everything tends to be wide open to radical and fast changes \nof direction. They rarely have the stability, security, budget, and timeframes \nthat established companies have. This isn’t to say startups shouldn’t be \ndesigning systematically; they just need to be more realistic about their \npriorities. That said... Start as you mean to go on! If you create a design system \nfrom the start, you’ll avoid legacy problems later on.\nA recent trend is to bring design and development in-house. And the larger the \ncompany, the larger the product teams (for better or worse).\nMy time spent working with in-house design environments/people/teams/\ncultures taught me a lot about the importance of design systems, and the \nintricacies of designers, developers, and product managers working together.\nWorking on products which involve lots of",
      "metadata": {
        "startIndex": 1592,
        "endIndex": 2590,
        "chunkIndex": 2,
        "section": "7. Source of truth",
        "globalChunkIndex": 36
      }
    },
    {
      "id": "chunk-37",
      "text": "teams/\ncultures taught me a lot about the importance of design systems, and the \nintricacies of designers, developers, and product managers working together.\nWorking on products which involve lots of people requires a different \napproach than projects with smaller, leaner teams. It’s more complicated, and \n1.1. airbnb.design/building-a-visual-language/\n1.2. karrisaarinen.com\n\n24\nthere’s more that can go wrong. The expression: ‘too many cooks spoil the \nbroth’ becomes a little too real at times. Every member of the team has their \nown preferences about what typefaces, colours, buttons, formatting, spacing, \nframeworks, or naming conventions you should use.\nIt gets messy, if you allow it.\nDesign systems bring structure, accountability, and order to this chaos.\nLeading the way\nFor me, making the transition from freelance design into an in-house design \nleadership role was a learning experience, to say the least.",
      "metadata": {
        "startIndex": 2390,
        "endIndex": 3313,
        "chunkIndex": 3,
        "section": "7. Source of truth",
        "globalChunkIndex": 37
      }
    },
    {
      "id": "chunk-38",
      "text": "ure, accountability, and order to this chaos.\nLeading the way\nFor me, making the transition from freelance design into an in-house design \nleadership role was a learning experience, to say the least. Overseeing other \npeople doing the work — or working with a team of people on the same \nproduct — is very different to being the one person doing the work! \nDesign leadership and teamwork go beyond just handing-off design mockups, \nstyle guides, and specs. You need to find a way to create — and effectively and \nopenly communicate — common, shared design guidelines, so everyone works \nin the same direction. The alternative is everyone does their own thing — \nreinventing the wheel, bloating the code, and damaging the brand and product \nuser experience. And sometimes, falling out in the process.\nWhen you work on a team, your design thinking is useless if only you know \nabout it, or if it’s disruptively different from the approach of your colleagues.",
      "metadata": {
        "startIndex": 3113,
        "endIndex": 4070,
        "chunkIndex": 4,
        "section": "7. Source of truth",
        "globalChunkIndex": 38
      }
    },
    {
      "id": "chunk-39",
      "text": "And sometimes, falling out in the process.\nWhen you work on a team, your design thinking is useless if only you know \nabout it, or if it’s disruptively different from the approach of your colleagues. \nYou need to work together in the same direction. As other chapters in this \nbook will demonstrate, a design system genuinely helps you to do this.\nThe real test...\nThe real test of a design system is whether the design and build mirror each \nother, and if you and your team consistently use the elements you establish \nrather than needlessly creating new ones.\nA successful design system liberates your team from reinventing the wheel. \nIt allows you to focus on what really matters: learning and improving digital \nproducts to meet user and business goals. Heck, you might even create \nsomething amazing that you’re all proud of!\n\nWHAt Is A DesIGn sYsteM?  25WHAt Is A DesIGn sYsteM?  25\nSolving problems \nis a big part of the \nvalue proposition of \na design system.",
      "metadata": {
        "startIndex": 3870,
        "endIndex": 4839,
        "chunkIndex": 5,
        "section": "7. Source of truth",
        "globalChunkIndex": 39
      }
    },
    {
      "id": "chunk-40",
      "text": "might even create \nsomething amazing that you’re all proud of!\n\nWHAt Is A DesIGn sYsteM?  25WHAt Is A DesIGn sYsteM?  25\nSolving problems \nis a big part of the \nvalue proposition of \na design system. \n\n26\nSelling a design system\n26\n02\nsell— \ning a \nDesign \nsystem\nLAYInG tHe FounDAtIons\n\nseLLInG A DesIGn sYsteM  27\nSo far, I’ve talked about all the advantages a design system offers, many of \nwhich you’ve probably read about before. But before we get into design system \nmodels — and how to go about creating a design system — I want to take a \nminute to get real. Designers romanticise design systems in countless articles \nonline, and we make it sound so easy in our case studies. But the reality is:\n• They’re time-consuming to build and establish.\n• They take up a lot of development resources.\n• They distract from working on any roadmaps of features.\n• They’re tricky to maintain.\n• Designers can see them as a threat to their creativity.\n• And, they require a lot of stakeholder support to",
      "metadata": {
        "startIndex": 4639,
        "endIndex": 5638,
        "chunkIndex": 6,
        "section": "7. Source of truth",
        "globalChunkIndex": 40
      }
    },
    {
      "id": "chunk-41",
      "text": ".\n• They distract from working on any roadmaps of features.\n• They’re tricky to maintain.\n• Designers can see them as a threat to their creativity.\n• And, they require a lot of stakeholder support to succeed.\nHonestly, selling a design system could well be the hardest part of the process!\nYou need to convince a wide range of people  — from the bottom to the top of \nthe chain of command —  that it’s worth it. And it is, but I just listed a lot of \nlegitimate reasons not to create a design system! And these are just some of \nthe reasons why you’ll be told: “No”.\nTo avoid being told ‘No’, you need to learn how to teach the value of design \nsystems — and to earn the support and trust of stakeholders — or your design \nsystem is going to go nowhere.\nFind your partner(s)\nTo illustrate this process, I’ll share an example from my real-life experience of \nselling design systems at a company.\nAt this company, I had a partner in crime called Nick Stamas (2.1).",
      "metadata": {
        "startIndex": 5438,
        "endIndex": 6401,
        "chunkIndex": 7,
        "section": "7. Source of truth",
        "globalChunkIndex": 41
      }
    },
    {
      "id": "chunk-42",
      "text": "partner(s)\nTo illustrate this process, I’ll share an example from my real-life experience of \nselling design systems at a company.\nAt this company, I had a partner in crime called Nick Stamas (2.1). Nick had \nalready started selling the idea of a design system before I came onboard. He \nhad a smart approach: rather than lead with: “let’s create a design system!”, \nhe gave presentations to a number of engineers from different product \nteams about the advantages of a centralised code base, and promoted better \ncollaboration between designers and developers.\nI was only an observer at these meetings. As a fellow design lead at the same \ncompany, I had a vested interest in this presentation going well, and I was \ngauging the response from the attendees. I recognised that this was the type \nof support and interest we’d need — to inspire, and to build — from a range of \nstakeholders.\nIn essence, Nick was sowing the seed of the idea of a design system by simply",
      "metadata": {
        "startIndex": 6201,
        "endIndex": 7172,
        "chunkIndex": 8,
        "section": "7. Source of truth",
        "globalChunkIndex": 42
      }
    },
    {
      "id": "chunk-43",
      "text": "d that this was the type \nof support and interest we’d need — to inspire, and to build — from a range of \nstakeholders.\nIn essence, Nick was sowing the seed of the idea of a design system by simply \n\n28\nhighlighting common problems most developers can identify with and \ntailoring his presentation to different teams. He was getting developers excited \nabout things they care about!\nTo quote from an article \n(2.2) Nick wrote about this process:\n“Sell a vision that everyone can buy in to. Selling is a process, \nprobably more than a single meeting. Look for teaching moments. \nUse your storytelling skills. Show your team that a better way is \npossible. Come up with a memorable name and say it a lot. Get people \nexcited with a splashy presentation.”\nAside from these presentations, Nick had made a start on a design system \nwhich he called Plasma \n(2.3).\nNick’s early approach was to begin with code — not to mock up anything \nin design software.",
      "metadata": {
        "startIndex": 6972,
        "endIndex": 7922,
        "chunkIndex": 9,
        "section": "7. Source of truth",
        "globalChunkIndex": 43
      }
    },
    {
      "id": "chunk-44",
      "text": ".”\nAside from these presentations, Nick had made a start on a design system \nwhich he called Plasma \n(2.3).\nNick’s early approach was to begin with code — not to mock up anything \nin design software. He was building the bones of a code base in React by \ndocumenting basic system components like buttons and form inputs. He \ndidn’t focus on design or style. Instead, he focussed on getting the basics \nright, building strong foundations, and creating a semantic system for \nnaming conventions.\nOver time, he shared his progress with developers , one-by-one ,   getting them \nexcited about it. He started inviting other developers to contribute. His intent \nwas to prove that a simple, consistent, shared code base could be integrated \nand maintained effectively and efficiently within his team and product, and \nultimately across different teams and in different products.\nNote: Nick’s advantage was his diverse development and design skillset.",
      "metadata": {
        "startIndex": 7722,
        "endIndex": 8666,
        "chunkIndex": 10,
        "section": "7. Source of truth",
        "globalChunkIndex": 44
      }
    },
    {
      "id": "chunk-45",
      "text": "ined effectively and efficiently within his team and product, and \nultimately across different teams and in different products.\nNote: Nick’s advantage was his diverse development and design skillset. He spoke \nthe same language as engineers, which helped him pitch to them. Everyone has \ntheir strengths. Play to yours, and your team’s. You don’t have to start a design \nsystem in code. The important message here is to get people who will be involved \nin the system excited about it! That often means proving your point, or earning \npeople’s trust.\n2.1 nickstamas.com\n2.2 uxdesign.cc/selling-a-design-system-at-your-company-74cb2bc97195\n2.3 roomfive.net/plasma-design-system/\n\nseLLInG A DesIGn sYsteM  29\nMore than design and engineering\nIt’s important to note: in these early stages, Nick was also working with his \nlarger product team — including product managers and designers — to \nidentify problem areas in their products and processes that the design system \nwould address.\nSolving problems is",
      "metadata": {
        "startIndex": 8466,
        "endIndex": 9467,
        "chunkIndex": 11,
        "section": "7. Source of truth",
        "globalChunkIndex": 45
      }
    },
    {
      "id": "chunk-46",
      "text": "orking with his \nlarger product team — including product managers and designers — to \nidentify problem areas in their products and processes that the design system \nwould address.\nSolving problems is a big part of the value proposition of a design system. \nThe more powerful stakeholders won’t care about what the product looks like, \nor your code base. They will care about solving problems, or more specifically, \nthe business success these solutions lead to.\n‘Finding your partners’ involves gaining support from all stakeholders, not just \ndesigners and developers. We’ll come back to Nick’s story, and this process of \nforging partnerships, throughout this book.\nLaying the foundations\nIn parallel to Nick’s story so far — as Nick was highlighting the need for a \ndesign system — I was working on what I called the ‘Digital Foundations’, \nwhich we’ll cover in the next chapter. For now, think of these as ‘digital brand \nguidelines’.\nThese Digital Foundations were intended to act as a source of",
      "metadata": {
        "startIndex": 9267,
        "endIndex": 10268,
        "chunkIndex": 12,
        "section": "7. Source of truth",
        "globalChunkIndex": 46
      }
    },
    {
      "id": "chunk-47",
      "text": "what I called the ‘Digital Foundations’, \nwhich we’ll cover in the next chapter. For now, think of these as ‘digital brand \nguidelines’.\nThese Digital Foundations were intended to act as a source of truth for our \nvalues and to guide the design, content, and build of all of the company’s digital \nproducts. I based this work on the company’s existing brand book*, which had \nbeen created with print and physical spaces in mind. After extrapolating what \ncould successfully be applied to digital, I went on to greatly expand it to cover \ndigital product requirements.\n* Big brands commonly create — or commission an external agency to create — \na ‘brand book’, which acts as a ‘manual’ for everything created for that brand.\nIt’s important for a large company to have brand guidelines to prevent \neveryone from doing their own thing, and to keep products from spiraling out \nof control. With the creation of these ‘Digital Foundations,’ our guidelines now \nexisted, but we hadn’t put them to work",
      "metadata": {
        "startIndex": 10068,
        "endIndex": 11066,
        "chunkIndex": 13,
        "section": "7. Source of truth",
        "globalChunkIndex": 47
      }
    },
    {
      "id": "chunk-48",
      "text": "everyone from doing their own thing, and to keep products from spiraling out \nof control. With the creation of these ‘Digital Foundations,’ our guidelines now \nexisted, but we hadn’t put them to work yet. Brand guidelines are of no use \non their own. They need to be practically implemented and adhered to, and \ndesign systems give us the perfect opportunity to do so.\nSo naturally, after a period of shadowing each other’s work, there came a point \nwhere Nick and I teamed up to collaborate on a design system. Nick directed \nthe engineering and planning, and I led the design and creative direction. We \n\n30\ncombined the Digital Foundations with the product needs that Nick’s team \nhad brainstormed, and the code Nick had written. Working with these strong \nfoundations, it didn’t take long for an on-brand, problem-solving, and product-\nfocussed design system to take shape. \nWe’ll delve more into the process of creating a design system later, but for now, \nyou can read a design case study",
      "metadata": {
        "startIndex": 10866,
        "endIndex": 11861,
        "chunkIndex": 14,
        "section": "7. Source of truth",
        "globalChunkIndex": 48
      }
    },
    {
      "id": "chunk-49",
      "text": "r an on-brand, problem-solving, and product-\nfocussed design system to take shape. \nWe’ll delve more into the process of creating a design system later, but for now, \nyou can read a design case study article \n(2.4) about the Plasma design system \ndescribed here.\nStart small, and adjust your pitch accordingly\nContinuing our story: in parallel to the design and build work, we continued to \npresent to different stakeholders. Selling a design system never really stops, no \nmatter where you are in the process. We started small, working our way up the \nchain of command, gaining support and momentum as we went.\nIt’s impossible to say whether pitching the design system from top-to-bottom \nor bottom-to-top will work best at your company. It depends on the intricacies \nof different work culture, politics, personalities, and hierarchies. Have a think \nabout which will be more effective at your company. And remember, the point \nis to tailor your pitch to your audience.",
      "metadata": {
        "startIndex": 11661,
        "endIndex": 12633,
        "chunkIndex": 15,
        "section": "7. Source of truth",
        "globalChunkIndex": 49
      }
    },
    {
      "id": "chunk-50",
      "text": "different work culture, politics, personalities, and hierarchies. Have a think \nabout which will be more effective at your company. And remember, the point \nis to tailor your pitch to your audience. You want to excite as many people as \npossible with all the ways a design system will benefit them.\nFrom junior designers to design leads, from front-end developers to \nengineering leads, and from product managers to heads of departments: we \nspoke to a wide range of stakeholders, adjusting our pitch depending on who \nwe were talking to. Presentations were either broad, or focussed on design and \ncode, but they all emphasised the value of design systems. For example:\nProduct managers, leaders, and heads of departments...\n...care about how fast the team can ship products, and the impact the work has \non business goals, sales, reports, and analytics.\nSell them on how a well-established design system allows for a faster, more \nefficient shipping cycle.",
      "metadata": {
        "startIndex": 12433,
        "endIndex": 13393,
        "chunkIndex": 16,
        "section": "7. Source of truth",
        "globalChunkIndex": 50
      }
    },
    {
      "id": "chunk-51",
      "text": "an ship products, and the impact the work has \non business goals, sales, reports, and analytics.\nSell them on how a well-established design system allows for a faster, more \nefficient shipping cycle. Convince them of how taking the time to create a \ndesign system now will enable faster product releases and iteration, as well as \na better user experience going forward. In a ‘perfect world’, this increases the \npotential for growth, sales, and analytics trending in the right direction.\n2.4 medium.com/@andrewcouldwell/plasma-design-system-4d63fb6c1afc\n\nseLLInG A DesIGn sYsteM  31\nAnd remember, a really successful system will also unify the teams working \nwith it, creating a healthier work culture, staff retention, and tool for recruiting \ntalent. The leaders in your company should care about these things!\nEngineers...\n...care about a unified code base, version control, consistency, performance, \norganisation, efficiency, and naming conventions.",
      "metadata": {
        "startIndex": 13193,
        "endIndex": 14149,
        "chunkIndex": 17,
        "section": "7. Source of truth",
        "globalChunkIndex": 51
      }
    },
    {
      "id": "chunk-52",
      "text": "e leaders in your company should care about these things!\nEngineers...\n...care about a unified code base, version control, consistency, performance, \norganisation, efficiency, and naming conventions. \nSell them on how design systems will help bridge the gap between designers \nand developers, and their positive impact on all the engineering factors they \ncare about. If you’re not comfortable speaking their language; work with a \ndeveloper on these engineering pitches.\nDesigners...\n...care about aesthetics, brand, typography, colour, user experience, and \nshipping beautiful products, which stay true to their original vision.\nGet them excited about how great the end product will look! Anything relating \nto the front-end being a ‘pixel perfect’ reproduction of their designs will \nbe music to their ears. Be careful not to scare the more visual designers on \nyour team , as some will view design systems as a threat to their creativity.",
      "metadata": {
        "startIndex": 13949,
        "endIndex": 14892,
        "chunkIndex": 18,
        "section": "7. Source of truth",
        "globalChunkIndex": 52
      }
    },
    {
      "id": "chunk-53",
      "text": "erfect’ reproduction of their designs will \nbe music to their ears. Be careful not to scare the more visual designers on \nyour team , as some will view design systems as a threat to their creativity. \nInstead, focus on how quickly and efficiently they can design with pre-defined \nsystem components in their design tools of choice. The system will curb the \nintroduction of rogue elements like buttons and form inputs, freeing them \nto focus on more interesting tasks like problem solving, layout, and user \nexperience. The best designers on your team will be excited about this, and it \nwill be a valuable learning experience for everyone else.\nWe’re all in this together\nFor all parties, be sure to pitch the importance of this being a collaborative \nteam effort. Some may worry their voice won’t be heard, or that the system will \ngo against how they like to work. A good design system won’t be designed and \nbuilt by only a few people, then closed to changes from everyone. It will evolve.",
      "metadata": {
        "startIndex": 14692,
        "endIndex": 15686,
        "chunkIndex": 19,
        "section": "7. Source of truth",
        "globalChunkIndex": 53
      }
    },
    {
      "id": "chunk-54",
      "text": "on’t be heard, or that the system will \ngo against how they like to work. A good design system won’t be designed and \nbuilt by only a few people, then closed to changes from everyone. It will evolve. \nIt requires everyone’s input and support, over time, in different capacities. \nIt will help everyone, and it will help the business. It’s something everyone \nshould be proud of.\nThe following screenshot \n(fig 2.1) is from a deck I used to present to an \nexecutive when I was the System Design Lead at a previous employer. This \nexecutive was not a designer or a developer, but a powerful individual with \nsignificant influence and connections. A fellow design lead at the company \n\n32\ntold me this person would be interested in the digital brand guidelines I was \nworking on, and could be a powerful ally for our design system initiatives. \nWith their advice, I contacted the executive, set a date/time/place for a \nmeeting, and started preparing this presentation.\nFIG 2.1 Presentation deck\nThis",
      "metadata": {
        "startIndex": 15486,
        "endIndex": 16484,
        "chunkIndex": 20,
        "section": "7. Source of truth",
        "globalChunkIndex": 54
      }
    },
    {
      "id": "chunk-55",
      "text": "ul ally for our design system initiatives. \nWith their advice, I contacted the executive, set a date/time/place for a \nmeeting, and started preparing this presentation.\nFIG 2.1 Presentation deck\nThis particular stakeholder didn’t know or care about what designers were \ndoing in Sketch, or how developers were refactoring code. The way to reach \nthis person was to pitch:\n• What is the value of a design system to our company?\n• The design system saves us time and money because _____ (e.g. we can ship \nupdates faster, as engineers won’t have to write as much new code).\n• The design system makes us/you look good because _____ (e.g. we can ship \nmore updates per quarter, which could have a positive impact on sales).\n• The design system sets us apart from our competition because _____ \n(e.g. our competition doesn’t have a consistent brand across their digital \nplatforms, so we can stand out from the crowd with a stronger brand and \nuser experience).\n• Our competitors are doing _____, which",
      "metadata": {
        "startIndex": 16284,
        "endIndex": 17282,
        "chunkIndex": 21,
        "section": "7. Source of truth",
        "globalChunkIndex": 55
      }
    },
    {
      "id": "chunk-56",
      "text": "r competition doesn’t have a consistent brand across their digital \nplatforms, so we can stand out from the crowd with a stronger brand and \nuser experience).\n• Our competitors are doing _____, which helps them because _____. (e.g. \nThey are publicly sharing their design system, which helps them recruit a \nhigher-caliber of designer and engineer).\n\nseLLInG A DesIGn sYsteM  33\n• How can you help us achieve this? (e.g. We need your endorsement. And \nwho else do you recommend we talk to, to make this happen?).\nProve to them how what you’re pitching helps the company, and makes us (i.e. \nthe stakeholder and the company at large) look good in the process! It’s hard \nfor managers and executives to turn down something that makes them look \ngood, when often all they have to do is say “Yes” and grant you an endorsement \nand a few connections. It’s a win-win for everyone.\nAt what stage do you sell?\nThis chapter on selling a design system was one of the hardest to place in \nthis book.",
      "metadata": {
        "startIndex": 17082,
        "endIndex": 18071,
        "chunkIndex": 22,
        "section": "7. Source of truth",
        "globalChunkIndex": 56
      }
    },
    {
      "id": "chunk-57",
      "text": "es” and grant you an endorsement \nand a few connections. It’s a win-win for everyone.\nAt what stage do you sell?\nThis chapter on selling a design system was one of the hardest to place in \nthis book. There is no strict linear structure to this book, but ‘selling a design \nsystem’ doesn’t belong at the end — because you don’t want to put in a lot of \nwork only to be told “No” by someone higher up the chain of command. And it \ndoesn’t belong at the start, because you don’t know yet what you’re selling. You \nfirst need to understand what a design system is, why it’s valuable, and what \nproblems you’re solving in order to build and present your case.\nThe key thing to understand is: selling a design system isn’t a stage of the \nprocess. It’s ongoing. You need to always be advocating for the system, or it \nwill fail. Even — and perhaps especially — after you’ve successfully designed, \nbuilt, and integrated the system.\nAll it takes is a powerful stakeholder to come on board and decide they",
      "metadata": {
        "startIndex": 17871,
        "endIndex": 18869,
        "chunkIndex": 23,
        "section": "7. Source of truth",
        "globalChunkIndex": 57
      }
    },
    {
      "id": "chunk-58",
      "text": "ystem, or it \nwill fail. Even — and perhaps especially — after you’ve successfully designed, \nbuilt, and integrated the system.\nAll it takes is a powerful stakeholder to come on board and decide they don’t \nlike a systematic approach to design, and the whole thing comes crashing \ndown. Believe me, I’ve seen this happen. However, if you’ve been gathering \nsupport throughout the conception and creation phases, the design system \nwill have a better chance of weathering organisational changes and individuals \nwho oppose it.\nThe importance and quality of ‘the sell’\nYou need a convincing pitch to sell your vision, and you need to present it \npassionately and concisely — as some stakeholders’ time and attention can be \nlimited.\nAt large companies with more complex hierarchies (and the politics that come \nwith that), I like to think of it as being well armed before going into battle. \nYou stand a much better chance of being taken seriously if you build up an \narsenal of data, problem",
      "metadata": {
        "startIndex": 18669,
        "endIndex": 19660,
        "chunkIndex": 24,
        "section": "7. Source of truth",
        "globalChunkIndex": 58
      }
    },
    {
      "id": "chunk-59",
      "text": "litics that come \nwith that), I like to think of it as being well armed before going into battle. \nYou stand a much better chance of being taken seriously if you build up an \narsenal of data, problem statements, and industry examples to demonstrate \nyour points, as well as having the backing of a small army of supporters all \nchamping at the bit to get started.\n\n3434\nIf you believe in \ndesign systems and \nwant to see one thrive \nat your company, you \nneed a compelling \ncase that’s tailored to \nyour business, team, \nand user needs. \n\nseLLInG A DesIGn sYsteM  35\nIt’s easy for higher-ups to say no. Very easy. As I mentioned earlier, creating \ndesign systems can be involved, and therefore expensive to the company.\nSometimes, projects like design systems are rejected with good reason. The \nmore experience you get in the tech industry, the more you understand the \nimportance of saying no. Creating new things just for the sake of having \nsomething new often leads businesses down the wrong",
      "metadata": {
        "startIndex": 19460,
        "endIndex": 20457,
        "chunkIndex": 25,
        "section": "7. Source of truth",
        "globalChunkIndex": 59
      }
    },
    {
      "id": "chunk-60",
      "text": "ore experience you get in the tech industry, the more you understand the \nimportance of saying no. Creating new things just for the sake of having \nsomething new often leads businesses down the wrong path. Just as we \nshouldn’t create new product features because one person ‘thinks it would be \ncool’, we also shouldn’t create a design system ‘because everyone else is doing \ni t’.\nSo, if you believe in design systems and want to see one thrive at your \ncompany, you need a compelling case that’s tailored to your business, team, \nand user needs. This helps your stakeholders to make informed decisions.\nIn the “Getting Started” chapter we’ll cover how to build a compelling case \nby investigating what problems exist in your product and team processes, \nand communicating how a design system can help to solve those problems. \nMatching problems to a potential roadmap of solutions can be a compelling \nway to gain stakeholder support and turn “No” into “Yes”.\nA word on office politics\nEvery",
      "metadata": {
        "startIndex": 20257,
        "endIndex": 21252,
        "chunkIndex": 26,
        "section": "7. Source of truth",
        "globalChunkIndex": 60
      }
    },
    {
      "id": "chunk-61",
      "text": "can help to solve those problems. \nMatching problems to a potential roadmap of solutions can be a compelling \nway to gain stakeholder support and turn “No” into “Yes”.\nA word on office politics\nEvery stakeholder wants something different. Some focus purely on the \nbusiness needs. Some care most about customer happiness.\nAnd — let’s be honest — others may be driven by a selfish motivation. I’ve \nseen employees driven by something as trivial as taking credit, winning an \naward, or gaining a portfolio piece. Others have more toxic incentives, and \nwill make poor decisions to ‘earn’ a promotion at the expense of their team. \nUnfortunately, you have to navigate these people and work around them, or \nfind a way to make their goals fit with your broader goal of creating better \nproducts.\nHere’s my advice on office politics: try to understand what’s really driving \neveryone involved in your product.\nYour primary goal should be to rally those with pure motivations to join your \ncause.\n• For",
      "metadata": {
        "startIndex": 21052,
        "endIndex": 22049,
        "chunkIndex": 27,
        "section": "7. Source of truth",
        "globalChunkIndex": 61
      }
    },
    {
      "id": "chunk-62",
      "text": "s my advice on office politics: try to understand what’s really driving \neveryone involved in your product.\nYour primary goal should be to rally those with pure motivations to join your \ncause.\n• For stakeholders who care about business needs; play up the speed of \niteration that comes with design systems.\n\n36\n• For designers who want to make something beautiful for your users; \nadvocate for the quality output that comes with a well-crafted library of \nelements.\n• For developers who want well-performing code; celebrate the efficiency of a \nconsistently designed interface.\nIf you are passionate and well-informed, you’ll build a team of like-minded \nadvocates that can defeat any of the self-involved office politicians who might \ntry to stand in your way.\nIt may also be possible to convince those who have selfish motivations that \na design system will make them look good, help them win an award, or gain \nthem the promotion they’re after — in which case they could become its \nbiggest",
      "metadata": {
        "startIndex": 21849,
        "endIndex": 22844,
        "chunkIndex": 28,
        "section": "7. Source of truth",
        "globalChunkIndex": 62
      }
    },
    {
      "id": "chunk-63",
      "text": "nce those who have selfish motivations that \na design system will make them look good, help them win an award, or gain \nthem the promotion they’re after — in which case they could become its \nbiggest champion. The point is to understand what’s driving your stakeholders, \nand work with them accordingly.\nCreating a design system is a process. It’s a long-haul — and often expensive — \nproject that takes up a lot of time and resources which involves more people in \nyour organisation than just designers and developers.\nIt stands to reason that design systems are easier to implement at smaller \norganisations. A smaller design team will create less rogue design elements, \nand a smaller engineering team means less friction in the code base. There are \nalso fewer people with the word ‘manager’ in their title, which often means \nthere are fewer opportunities for things to go wrong. There’s less need for buy-\nin or permission, which means there’s greater potential for faster progress.\nLarger",
      "metadata": {
        "startIndex": 22644,
        "endIndex": 23640,
        "chunkIndex": 29,
        "section": "7. Source of truth",
        "globalChunkIndex": 63
      }
    },
    {
      "id": "chunk-64",
      "text": "in their title, which often means \nthere are fewer opportunities for things to go wrong. There’s less need for buy-\nin or permission, which means there’s greater potential for faster progress.\nLarger organisations are a different animal. More hierarchy means more \nchannels for decisions to go through to be approved and implemented. Think \nabout what happens when there are dozens — even hundreds — of designers, \nengineers, and managers split across multiple teams, all working on the same \nfamily of products. Some of those teams may even be remote, nationwide, or \ninternational.\nIt gets complicated.\nThis isn’t intended to scare you, but rather to provide a dose of reality from \nthe trenches of my real-world experience. As I said in the beginning of this \nchapter, we romanticise about design systems, and we make it sound so easy. \nHopefully, now that we’ve explored some of the challenges of creating a design \nsystem, you’ll be better armed to deal with them as they arise.",
      "metadata": {
        "startIndex": 23440,
        "endIndex": 24425,
        "chunkIndex": 30,
        "section": "7. Source of truth",
        "globalChunkIndex": 64
      }
    },
    {
      "id": "chunk-65",
      "text": "e about design systems, and we make it sound so easy. \nHopefully, now that we’ve explored some of the challenges of creating a design \nsystem, you’ll be better armed to deal with them as they arise.\n\nseLLInG A DesIGn sYsteM  37\nI admit selling a design system is hard work, and it’s not the sexy part that gets \nshared on Dribbble or Medium, but it’s important.\nIn summary\n• Start small.\n• Be prepared.\n• Identify the problems you’re trying to solve.\n• Do some (enough) impressive design and build work to get people talking.\n• Make friends and build a team of people excited to work with you.\n• Come up with a cool name, and create a sexy presentation.\n• Tailor your pitch according to your audience.\n• Earn trust and support.\n• Be an advocate and a guardian for the system, and inspire others to do the \nsame.\n\n38\nLaying the foundations\n38\n03\nLaying \nthe \nFound— \nations\nLAYInG tHe FounDAtIons\n\nLAYInG tHe FounDAtIons  39\nIt’s easy to explain how brands and products go astray, especially nowadays",
      "metadata": {
        "startIndex": 24225,
        "endIndex": 25225,
        "chunkIndex": 31,
        "section": "7. Source of truth",
        "globalChunkIndex": 65
      }
    },
    {
      "id": "chunk-66",
      "text": "the \nsame.\n\n38\nLaying the foundations\n38\n03\nLaying \nthe \nFound— \nations\nLAYInG tHe FounDAtIons\n\nLAYInG tHe FounDAtIons  39\nIt’s easy to explain how brands and products go astray, especially nowadays \nwith the trend of staffing huge in-house design teams with dozens of designers \nand engineers. \nIt takes a dedicated (and rare) kind of leadership to unify a team of individuals. \nIn sport, it’s the job of a coach to condition their players to adopt team tactics \nand play as a unit. In design and development, our teams are often so large, \ndisparate, and constantly changing that we usually can’t rely on one manager \nto get us all on the same page.\nInstead, we can use guidelines for our brand, design, and code — as well as a \nclearly defined set of values and principles — to help us all work in sync. \nMy dad was a quantity surveyor; it was his job to evaluate building plans to \nassess the risk and cost required to create a solid structure.",
      "metadata": {
        "startIndex": 25025,
        "endIndex": 25975,
        "chunkIndex": 32,
        "section": "7. Source of truth",
        "globalChunkIndex": 66
      }
    },
    {
      "id": "chunk-67",
      "text": "t of values and principles — to help us all work in sync. \nMy dad was a quantity surveyor; it was his job to evaluate building plans to \nassess the risk and cost required to create a solid structure. In many ways \nthis isn’t so different to what I do as a web designer and developer. Perhaps \nit’s because of his influence that I tend to think of my work in terms of \nconstruction, and why I believe the phrase ‘laying the foundations’ is a great \nmetaphor for how we should think about setting up brands, products, and \nteams for success. \nIn order for teams to work together to create great products, they need \na strong foundation to build on. Just as a building built on sand won’t hold \nup as well as one built on stable foundations, a product built with a poorly \ndefined structure will quickly start to have issues. A solid set of guidelines \nand principles helps us achieve the cohesiveness, sturdiness, confidence, and \nscalability we need.\nIn this chapter, we’ll focus on how to create",
      "metadata": {
        "startIndex": 25775,
        "endIndex": 26771,
        "chunkIndex": 33,
        "section": "7. Source of truth",
        "globalChunkIndex": 67
      }
    },
    {
      "id": "chunk-68",
      "text": "ckly start to have issues. A solid set of guidelines \nand principles helps us achieve the cohesiveness, sturdiness, confidence, and \nscalability we need.\nIn this chapter, we’ll focus on how to create these digital brand guidelines and \nprinciples.\nPutting up scaffolding\nI want to be as real as possible in this book, which is why I’m going to be \nblunt for a minute. As design systems become more trendy, many design \narticles and case studies give idealistic accounts of creating beautiful design \nsystems, and sometimes they pass over the ugly, gritty details. This can leave \nmany designers feeling like a systematic approach won’t work for their team, \nbecause their team or product has too many issues to address. Perhaps you \ncan’t just start from scratch with a shiny new system, as many seem to do in \ntheir polished case studies.\nIn keeping with my construction analogy: in a perfect world, you want to ‘lay \n\n40\nthe foundations’, then build a beautiful ‘building’ (i.e.",
      "metadata": {
        "startIndex": 26571,
        "endIndex": 27552,
        "chunkIndex": 34,
        "section": "7. Source of truth",
        "globalChunkIndex": 68
      }
    },
    {
      "id": "chunk-69",
      "text": "ystem, as many seem to do in \ntheir polished case studies.\nIn keeping with my construction analogy: in a perfect world, you want to ‘lay \n\n40\nthe foundations’, then build a beautiful ‘building’ (i.e. a design system and \nproduct) upon those foundations. Other times, it’s just not that simple. You \nmay have to deal with a crumbling structure that’s already in place. Out with \nthe old and in with the new isn’t always an option.\nIf you’ve inherited a mess and your team’s decided enough is enough, \nsometimes you can take a wrecking ball to it and clear the way for a fresh start. \nBut what should you do if you don’t have that luxury, and have to work with \nwhat you’ve got? In these cases, you’ve got to build scaffolding around your \nexisting structure — stabilising, stopping the rot, and renovating it over time.\nWorry not. Whether you’re facing a nice empty plot of land, a wrecking ball, \nor putting up scaffolding, the principles in this chapter will help you and your \nteam.\nThe importance",
      "metadata": {
        "startIndex": 27352,
        "endIndex": 28352,
        "chunkIndex": 35,
        "section": "7. Source of truth",
        "globalChunkIndex": 69
      }
    },
    {
      "id": "chunk-70",
      "text": "ting it over time.\nWorry not. Whether you’re facing a nice empty plot of land, a wrecking ball, \nor putting up scaffolding, the principles in this chapter will help you and your \nteam.\nThe importance of brand in system design\nI’m a big believer that brand is a core component to a design system. It’s \nwhy we spend so much time and money on building unique design systems. \nWithout a unique brand, an off-the-shelf, white-label system (e.g. Bootstrap \n3.1) would do the job.\nYou likely don’t want to use an open-source design system because it doesn’t \ncommunicate your brand story effectively. It might have everything you ‘need’, \nbut you want to create something that gives your brand a unique, strong, and \nfocussed voice to set you apart from your competitors.\nLet’s look at a scenario where brand guidelines and design systems work well \ntogether.\nMarketing vs. product\nProduct design and web design are two distinct disciplines.",
      "metadata": {
        "startIndex": 28152,
        "endIndex": 29088,
        "chunkIndex": 36,
        "section": "7. Source of truth",
        "globalChunkIndex": 70
      }
    },
    {
      "id": "chunk-71",
      "text": "apart from your competitors.\nLet’s look at a scenario where brand guidelines and design systems work well \ntogether.\nMarketing vs. product\nProduct design and web design are two distinct disciplines. You can’t — or \narguably shouldn’t — apply the same design methodologies or design systems \nto designing a product as you would to marketing design. Websites and \nproducts often have very different business objectives, use cases, and target \naudiences.\n3.1 getbootstrap.com\n\nLAYInG tHe FounDAtIons  41LAYInG tHe FounDAtIons  41\nBrand foundations \nhelp to keep \neveryone on the \nsame page, speaking \nthe same language, \nand working as \na team — rather \nthan a collection of \nindividuals doing \ntheir own thing.\n\n4242\nFIG 3.3 Dropbox product\nFIG 3.1 Dropbox brand\nFIG 3.2 Dropbox marketing\n\nLAYInG tHe FounDAtIons  43\nTake Dropbox, for example, the bright colours, extreme spacing, large buttons, \nand dramatic typeface Dropbox use in their brand \n(fig 3.1) and marketing \nwebsite \n(fig 3.2) wouldn’t",
      "metadata": {
        "startIndex": 28888,
        "endIndex": 29887,
        "chunkIndex": 37,
        "section": "7. Source of truth",
        "globalChunkIndex": 71
      }
    },
    {
      "id": "chunk-72",
      "text": "FounDAtIons  43\nTake Dropbox, for example, the bright colours, extreme spacing, large buttons, \nand dramatic typeface Dropbox use in their brand \n(fig 3.1) and marketing \nwebsite \n(fig 3.2) wouldn’t work in their product.\nDropbox’s marketing website is loud and confident, but their product succeeds \nby running quietly in the background — simply and efficiently. The last thing \ntheir product should be is loud, so it uses lighter colours, more compact \nspacing, smaller buttons, and a more reserved typeface, as seen in \nfig 3.3.\nHowever, some things are inherent throughout all of Dropbox’s digital \nproperties — like their use of their brand blue colour, their logo (or a \ncompact version of it), the odd illustration, sentence case, and certain other \nguiding principles. Their website and product are very different, visually and \nfunctionally, but there’s just enough similar about them to unify them under \none brand.",
      "metadata": {
        "startIndex": 29687,
        "endIndex": 30614,
        "chunkIndex": 38,
        "section": "7. Source of truth",
        "globalChunkIndex": 72
      }
    },
    {
      "id": "chunk-73",
      "text": "tence case, and certain other \nguiding principles. Their website and product are very different, visually and \nfunctionally, but there’s just enough similar about them to unify them under \none brand. And that’s very much by design.\nBrand guidelines help companies like Dropbox unify their marketing, \nproduct, advertising, social media, copywriting, illustrations, icons, \nphotography, and so on.\nThe threads that tie these different assets together need to be documented. \nThey are the brand foundations — the pillars that run through each floor of \nyour building, holding the whole thing together. Brand foundations help to \nkeep all designers and engineers at a company on the same page, speaking the \nsame language, and working as a team — rather than a collection of individuals \ndoing their own thing.\nDigital Foundations\nI call these digital brand guidelines “Digital Foundations”. Digital Foundations \nare different from traditional brand guidelines, for reasons I’ll go into shortly.",
      "metadata": {
        "startIndex": 30414,
        "endIndex": 31407,
        "chunkIndex": 39,
        "section": "7. Source of truth",
        "globalChunkIndex": 73
      }
    },
    {
      "id": "chunk-74",
      "text": "eir own thing.\nDigital Foundations\nI call these digital brand guidelines “Digital Foundations”. Digital Foundations \nare different from traditional brand guidelines, for reasons I’ll go into shortly. \nWhy give them the name Digital Foundations? Because it’s memorable. It \ndifferentiates digital assets from other brand assets like print materials or \nyour company’s physical space. It helps to reinforce the idea of ‘laying the \nfoundations’ for creating great products, and it works with our design system \nmodel*. Digital Foundations govern much of the foundational layer of the \nmodel, and guide the design of components and patterns too.\n* We’ll delve into the design system model in the next chapter.\nTraditional brand guidelines typically cover the do’s and don’ts of logo, colours, \nart direction, brand values, and tone of voice. They are applicable to everything \n\n44\na company does. Some companies might publish these guidelines in a ‘brand \nbook’.",
      "metadata": {
        "startIndex": 31207,
        "endIndex": 32167,
        "chunkIndex": 40,
        "section": "7. Source of truth",
        "globalChunkIndex": 74
      }
    },
    {
      "id": "chunk-75",
      "text": "and don’ts of logo, colours, \nart direction, brand values, and tone of voice. They are applicable to everything \n\n44\na company does. Some companies might publish these guidelines in a ‘brand \nbook’. Some companies produce a simple PDF.\nDigital is different. The same principles we apply to physical spaces and print \nmediums don’t always work for digital, and there are some considerations that \nonly affect digital. Factors like accessibility and user experience impact things \nlike the colours we use (e.g. blue for navigation, red for errors, and green for \nsuccess, etc.). There are other considerations such as typography, animation, \ngrids, responsive design, different platforms and operating systems, \nlocalisation, formatting, animation, load times, etc. which are unique to the \ndigital experience.\nWhere a brand book typically comes in print or PDF forms, the ever changing \nnature of digital experiences requires a more — well — digital approach.",
      "metadata": {
        "startIndex": 31967,
        "endIndex": 32927,
        "chunkIndex": 41,
        "section": "7. Source of truth",
        "globalChunkIndex": 75
      }
    },
    {
      "id": "chunk-76",
      "text": "etc. which are unique to the \ndigital experience.\nWhere a brand book typically comes in print or PDF forms, the ever changing \nnature of digital experiences requires a more — well — digital approach. \nDigital Foundations are better suited to a dynamic, accessible, and easily \neditable digital form. Some companies choose to make their digital brand \nguidelines public, and we’ll look at a few of those in a bit. Others are private — \nfor employee eyes only.\nLet’s take a look at some of the things Digital Foundations cover.\nFIG 3.4 mozilla.design/overview\n\nLAYInG tHe FounDAtIons  45\nMission, values, and principles\nEveryone who works at your company should be aligned on what your \ncompany does, its core values, and its mission. Who is your target audience? \nWhat are your design and engineering principles? You want to align your team \nwith a common vision, set of standards, and way of thinking.\nMozilla has a page introducing their brand, mission statement, what they \nstand for, and their",
      "metadata": {
        "startIndex": 32727,
        "endIndex": 33724,
        "chunkIndex": 42,
        "section": "7. Source of truth",
        "globalChunkIndex": 76
      }
    },
    {
      "id": "chunk-77",
      "text": "ng principles? You want to align your team \nwith a common vision, set of standards, and way of thinking.\nMozilla has a page introducing their brand, mission statement, what they \nstand for, and their design principles \n(fig 3.4).\n“Mozilla is the champion for a healthy internet, one that is open and \naccessible for all, both technologically and culturally.”\nFIG 3.5 design.firefox.com/values/\n\n46\nFirefox, a product of Mozilla, builds upon its parent company’s brand with \ntheir own design values tailored to their products \n(fig 3.5).\n“As we design new features for our existing products, and create new \nproducts,  we  find  ourselves  asking  —  is  this  Firefoxy?  Is  what  we’re  \nmaking a clear expression of what it means to be Firefox?”\nWhile it’s not sourced from digital brand guidelines (or design system \ndocumentation), I’d be a fool not to share the following stellar example of \nmission and values in a digital space.",
      "metadata": {
        "startIndex": 33524,
        "endIndex": 34460,
        "chunkIndex": 43,
        "section": "7. Source of truth",
        "globalChunkIndex": 77
      }
    },
    {
      "id": "chunk-78",
      "text": "e Firefox?”\nWhile it’s not sourced from digital brand guidelines (or design system \ndocumentation), I’d be a fool not to share the following stellar example of \nmission and values in a digital space. Basic, a design agency in the United \nStates, created a website called Basic Culture \n(fig 3.6), dedicated to sharing \ntheir ‘Culture Manual’. While the content is intended for internal purposes, \nit’s very much a statement to the outside world of ‘we do awesome work, come \nwork with us!’. Aside from the beautiful and memorable design and quirky \nanimations, they confidently state their mission, values, and philosophies in a \nmemorable and inspirational way — what better way is there to present such \ncontent?\nFIG 3.6 culture.basicagency.com\n“Do work you’ll be proud of. Work hard while doing it. Have fun, \nalways. Don’t wait for permission. Be bold and try things. Mistakes \n\nLAYInG tHe FounDAtIons  47LAYInG tHe FounDAtIons  47\nFIG 3.8 culture.basicagency.com/our-way/\nFIG 3.7 “How we think”",
      "metadata": {
        "startIndex": 34260,
        "endIndex": 35261,
        "chunkIndex": 44,
        "section": "7. Source of truth",
        "globalChunkIndex": 78
      }
    },
    {
      "id": "chunk-79",
      "text": "Have fun, \nalways. Don’t wait for permission. Be bold and try things. Mistakes \n\nLAYInG tHe FounDAtIons  47LAYInG tHe FounDAtIons  47\nFIG 3.8 culture.basicagency.com/our-way/\nFIG 3.7 “How we think”\n\n4848\nCreating values and \nstandards as a team \nis a great way to open \nup a positive dialogue \nand momentum that \nyou can take into \nfuture design system \ninitiatives.\n\nLAYInG tHe FounDAtIons  49\nhappen. Learn from your mistakes. Be real. Be better. Love what you \nd o.”\nI couldn’t agree more with this mission statement (above).\nThe content you define in this section of your Digital Foundations has to \ncome from somewhere. Perhaps your company already has something similar \nfor the brand and company at large. If so, you should also document these \nvalues and make them accessible to your team — it all helps to foster a better \nunderstanding of the company you work for. But consider that any existing \nbrand values may be written with consumers, business objectives, and the \nphysical world in",
      "metadata": {
        "startIndex": 35061,
        "endIndex": 36061,
        "chunkIndex": 45,
        "section": "7. Source of truth",
        "globalChunkIndex": 79
      }
    },
    {
      "id": "chunk-80",
      "text": "it all helps to foster a better \nunderstanding of the company you work for. But consider that any existing \nbrand values may be written with consumers, business objectives, and the \nphysical world in mind. You might want to write new values specific to design, \nproduct, technology, and a digital audience.\nEarly in the formation of your Digital Foundations, gather a group of people \nwho best represent the diversity of teams working on digital products at your \ncompany — stakeholders, designers, copywriters, developers, marketing, \nproduct, etc. — and hash out your mission, values, standards, and principles. \nThis can be an illuminating and exciting part of creating the Digital \nFoundations, as it reminds everyone across departments what your common \ngoals are. Creating these shared values and standards as a team is a great way \nto bring people together and open up a positive dialogue and momentum that \nyou can take into future design system initiatives.\nBrand identity\nYour brand",
      "metadata": {
        "startIndex": 35861,
        "endIndex": 36854,
        "chunkIndex": 46,
        "section": "7. Source of truth",
        "globalChunkIndex": 80
      }
    },
    {
      "id": "chunk-81",
      "text": "alues and standards as a team is a great way \nto bring people together and open up a positive dialogue and momentum that \nyou can take into future design system initiatives.\nBrand identity\nYour brand identity covers everything from your logo, to typography, colour, \ntone of voice, photography, illustration, creative direction, motion, and so on. It \nanswers questions such as:\n• What is our logo, and how do we use it?\n• What fonts and colours do we use — why, when, and how do we use them?\n• Do we have any cross-platform considerations (web, iOS, Android)?\n• Art and creative direction: what style of imagery do we use?\n• How do we use photography, illustration, icons, animation, and video?\n• Do we have any guiding principles for motion?\nUber Design \n(fig 3.9) has a comprehensive case study page dedicated to their \nbrand identity covering all of these topics, which forms the basis of their \ndigital, print, and physical design systems.",
      "metadata": {
        "startIndex": 36654,
        "endIndex": 37600,
        "chunkIndex": 47,
        "section": "7. Source of truth",
        "globalChunkIndex": 81
      }
    },
    {
      "id": "chunk-82",
      "text": "er Design \n(fig 3.9) has a comprehensive case study page dedicated to their \nbrand identity covering all of these topics, which forms the basis of their \ndigital, print, and physical design systems.\n\n50\nBrand identity is about more than just making things look good. The colours, \nwords, typefaces, shapes, graphics, and motion you use — and the way you use \nthem — can make your brand more or less accessible, memorable, or relatable. \nBrand identities heighten the user experience, and create a familiar and \nconsistent identity.\nFIG 3.9 uber.design/case-studies/rebrand-2018\nMy personal project, Club of the Waves (fig 3.10), is a website with a simple \npurpose: to showcase artists and photographers whose work focusses on \nsurfing and surf culture. The simplicity of the concept is reflected in both it’s \nbrand identity and design system. The brand uses just three colours:\n• Black for utility.\n• Red to represent anything related to artists.\n• Blue to represent anything related to",
      "metadata": {
        "startIndex": 37400,
        "endIndex": 38389,
        "chunkIndex": 48,
        "section": "7. Source of truth",
        "globalChunkIndex": 82
      }
    },
    {
      "id": "chunk-83",
      "text": "flected in both it’s \nbrand identity and design system. The brand uses just three colours:\n• Black for utility.\n• Red to represent anything related to artists.\n• Blue to represent anything related to photographers.\nIn the design system, these brand colours translate to section colour, links, \nbuttons, the logo, hover states, filters, accent colours, and so on.\nI should say — while the brand colours dictate meaning as an aid to the user \nexperience and an embellishment — they are not required for understanding \nor navigation. Users can easily navigate without awareness of these colours (if \nthey were, say, colour blind, or just don’t pick up on the meaning). Accessibility \nconsiderations like this are an important distinction between Digital \n\nLAYInG tHe FounDAtIons  51\nFoundations and traditional brand guidelines — as we’ll look at more in depth \nlater in this chapter.\nFIG 3.10 clubofthewaves.com\nGoogle is a great example of a company with a strong and consistent brand \nidentity \n(fig",
      "metadata": {
        "startIndex": 38189,
        "endIndex": 39189,
        "chunkIndex": 49,
        "section": "7. Source of truth",
        "globalChunkIndex": 83
      }
    },
    {
      "id": "chunk-84",
      "text": "itional brand guidelines — as we’ll look at more in depth \nlater in this chapter.\nFIG 3.10 clubofthewaves.com\nGoogle is a great example of a company with a strong and consistent brand \nidentity \n(fig 3.11) threaded throughout its digital properties; their simplicity, \n\n52\nwhite space, clean design, logo, iconography, motion, colour, and typography \nmake their brand instantly recognisable. Google wrote a great account \n(3.2) of \nhow they designed their brand, and how it’s intended to be used systematically \nacross their various products.\n“A new brand identity that makes Google more accessible and useful \nto our users — wherever they may encounter it.”\nFIG 3.11 Google’s strong brand identity\n“The final logotype was tested exhaustively at various sizes and \nweights for maximum legibility in all the new digital contexts. To \nguide usage in screen and print, we developed standards to cover all \naspects of the logotype including spacing, clearance rules, product \nlockups, and redline",
      "metadata": {
        "startIndex": 38989,
        "endIndex": 39982,
        "chunkIndex": 50,
        "section": "7. Source of truth",
        "globalChunkIndex": 84
      }
    },
    {
      "id": "chunk-85",
      "text": "ty in all the new digital contexts. To \nguide usage in screen and print, we developed standards to cover all \naspects of the logotype including spacing, clearance rules, product \nlockups, and redline specifications for in-product treatments.”\nWe’ll cover documenting brand identity later in this book. In the meantime, \njust know that having strong guidelines for your brand identity is a vital piece \nof your Digital Foundations.\nBrand tone of voice and copywriting\nHow does your company want to come across to its audience? We all have \nour own distinct personalities and ways of talking. A brand is no different. \nIf your designers aren’t aligned on what your brand’s voice and personality \nis, then they’ll all do their own thing, and your brand voice will be weakened \nor lost. This is why it’s vital to include copywriting guidelines in your Digital \nFoundations.\nThis interesting interview \n(3.3) with Molly Young (3.4) describes Warby \nParker’s “robust creative vision” when she joined them,",
      "metadata": {
        "startIndex": 39782,
        "endIndex": 40782,
        "chunkIndex": 51,
        "section": "7. Source of truth",
        "globalChunkIndex": 85
      }
    },
    {
      "id": "chunk-86",
      "text": "vital to include copywriting guidelines in your Digital \nFoundations.\nThis interesting interview \n(3.3) with Molly Young (3.4) describes Warby \nParker’s “robust creative vision” when she joined them, and how that vision \n\nLAYInG tHe FounDAtIons  53\ndefined the tone for their copywriting:\n“It [the Warby Parker brand] was very literary, and quirky, and fun. \nThey had mood boards with a very specific bike, and a very specific \nedition of a book, and a calendar that they really liked the graphic \ndesign of. There was very specific reference points. They would \ndescribe it to me as: ‘Warby Parker is the person you want to sit next \nto at a dinner party. They are funny and smart, and they get up to do \nthe dishes.’”\nAs their ‘Director of Copy’, Molly worked with Warby Parker’s design team to \ntranslate this creative vision into brand copywriting guidelines.\nI like this approach. Copywriting starts with brand identity and vision and is \ninterpreted into a practical guide for its application",
      "metadata": {
        "startIndex": 40582,
        "endIndex": 41581,
        "chunkIndex": 52,
        "section": "7. Source of truth",
        "globalChunkIndex": 86
      }
    },
    {
      "id": "chunk-87",
      "text": "ranslate this creative vision into brand copywriting guidelines.\nI like this approach. Copywriting starts with brand identity and vision and is \ninterpreted into a practical guide for its application in a digital product. These \nguidelines help to create more user friendly and on-brand experiences.\nMolly also brings up an important point on copywriting in digital products, \nadvising that designers and copywriters should sit and work together:\n“If you put them [designers and copywriters] next to each other, \nthey’ll be looking at each other’s screens and asking each other \nquestions, and interrupting each other, and learning from each \nother. Once a copywriter knows how a designer thinks and vice \nversa, you can work together really seamlessly.”\nI think this is great advice; much the same as I believe designers and \ndevelopers should sit and work together. Don’t segregate your teams. Have \nthem work together and benefit from each other’s expertise.\nAnother excellent article \n(3.5),",
      "metadata": {
        "startIndex": 41381,
        "endIndex": 42377,
        "chunkIndex": 53,
        "section": "7. Source of truth",
        "globalChunkIndex": 87
      }
    },
    {
      "id": "chunk-88",
      "text": "me as I believe designers and \ndevelopers should sit and work together. Don’t segregate your teams. Have \nthem work together and benefit from each other’s expertise.\nAnother excellent article \n(3.5), Words Shape Design by Joscelin Cooper (3.6) at \nAirbnb, also describes the importance of copywriters and designers working \n3.2 design.google/library/evolving-google-identity/\n3.3 link.medium.com/MlRsSmQABX\n3.4 molly-young.com\n3.5 airbnb.design/words-shape-design-2/\n3.6 linkedin.com/in/joscelin-cooper-0262191/\n\n54\ntogether. Joscelin dispels the common (and unfortunate) expectation that a \ncopywriters role is to:\n“...provide a word layer to already-complete designs.”\nJoscelin advises designers and project leads to involve writers early. Ideally, \nprojects should start with a “content kickoff ”:\n“Getting a writer involved at the beginning means you’ll start design \nexplorations with a more informed perspective of the messages \nyou’re working to convey.”\nJust as new design projects benefit",
      "metadata": {
        "startIndex": 42177,
        "endIndex": 43175,
        "chunkIndex": 54,
        "section": "7. Source of truth",
        "globalChunkIndex": 88
      }
    },
    {
      "id": "chunk-89",
      "text": "”:\n“Getting a writer involved at the beginning means you’ll start design \nexplorations with a more informed perspective of the messages \nyou’re working to convey.”\nJust as new design projects benefit from early considerations for voice and \ntone, so should the creation of your Digital Foundations that will in-turn guide \nall future digital content and design projects.\nAtlassian \n(fig 3.12) introduce their brand “personality” as:\n“Our personality establishes the foundation of the Atlassian brand. \nIt is a product of our mission, and a reflection of our culture, values, \nand promise to customers. We make sure that these traits come \nthrough in all of our customer-facing communications and content.”\nAs well as defining your brand tone of voice and personality, it’s good practice \nto define a shared vocabulary.\nThe Digital Foundations I created for WeWork include guidelines for brand \nterminology, so the team consistently uses the same language across all \nproperties \n(fig 3.13).",
      "metadata": {
        "startIndex": 42975,
        "endIndex": 43966,
        "chunkIndex": 55,
        "section": "7. Source of truth",
        "globalChunkIndex": 89
      }
    },
    {
      "id": "chunk-90",
      "text": "define a shared vocabulary.\nThe Digital Foundations I created for WeWork include guidelines for brand \nterminology, so the team consistently uses the same language across all \nproperties \n(fig 3.13). For example, all companies have ‘customers’ of some \nvariety, but not all brands like to refer to them as “customers” or “clients”; \ninstead they may use friendlier, more ‘human’ terms like: “members” or \n“guests”. A popular example is using “team” instead of “staff ” or “employee”. \nDisney refer to their theme park employees as “cast members”. I’m sure your \ncompany has its own preferences... If so, document them so your whole team \nknows about and uses them. This piece of your Digital Foundations will be \nespecially helpful for onboarding new team members, as learning the lingo of a \nnew company can sometimes be daunting.\n\nLAYInG tHe FounDAtIons  55LAYInG tHe FounDAtIons  55\nFIG 3.13 digital-foundations.netlify.com/brand-voice/\nFIG 3.12 atlassian.design/guidelines/brand/personality",
      "metadata": {
        "startIndex": 43766,
        "endIndex": 44762,
        "chunkIndex": 56,
        "section": "7. Source of truth",
        "globalChunkIndex": 90
      }
    },
    {
      "id": "chunk-91",
      "text": "company can sometimes be daunting.\n\nLAYInG tHe FounDAtIons  55LAYInG tHe FounDAtIons  55\nFIG 3.13 digital-foundations.netlify.com/brand-voice/\nFIG 3.12 atlassian.design/guidelines/brand/personality\n\n56\nFormatting\nIn addition to tone and vocabulary, your Digital Foundations should include \nguidelines for formatting. For reasons we’re about to examine, being \nconsistent with punctuation, abbreviation, and language choice is vital for user \ncomprehension and team collaboration. \nWithout a source of truth, your team may be unsure about something as basic \nas how to format a headline. Speaking from experience, you wouldn’t believe \nhow much friction a question like: “do we use sentence case or title case?” can \ncause across teams! Shakes head, remembering.\nFIG 3.14 When do we use sentence case vs. title case?\nThe next few example images (fig 3.14 - 3.18) are excerpts from Digital \nFoundations I’ve written in the past, including guidelines for writing \neverything from copy, titles, form",
      "metadata": {
        "startIndex": 44562,
        "endIndex": 45559,
        "chunkIndex": 57,
        "section": "7. Source of truth",
        "globalChunkIndex": 91
      }
    },
    {
      "id": "chunk-92",
      "text": "ase vs. title case?\nThe next few example images (fig 3.14 - 3.18) are excerpts from Digital \nFoundations I’ve written in the past, including guidelines for writing \neverything from copy, titles, form labels, and calls to action. The screenshot \nabove \n(fig 3.14) is just one small piece of this documentation; it focusses on \nexplaining when to use sentence case versus title case in various product \nscenarios. \n\nLAYInG tHe FounDAtIons  57\nFormatting guidelines could also answer questions such as:\n• Do we use “and” or “&”?\n• Do we put a period (“.”) at the end of a header?\n• Do we use American English or British English?\n• Do we use the Oxford comma?\nTo you, these questions may seem inconsequential, but when you’re part of a \ndiverse team with varied (personal) approaches to writing, the answers may \nnot be obvious to everyone \n(fig 3.15). \nFIG 3.15 The little details can make a big difference\nFor example, I live in the United States, but I’m from England.",
      "metadata": {
        "startIndex": 45359,
        "endIndex": 46327,
        "chunkIndex": 58,
        "section": "7. Source of truth",
        "globalChunkIndex": 92
      }
    },
    {
      "id": "chunk-93",
      "text": "approaches to writing, the answers may \nnot be obvious to everyone \n(fig 3.15). \nFIG 3.15 The little details can make a big difference\nFor example, I live in the United States, but I’m from England. Although a good \ndeal of my audience are undoubtedly in the United States, I made a decision \nto write this book in my native British English because this book is available \nworldwide, where British English is more commonly used. If this book was \nexclusively a digital product, I might decide to use American English for my \naudience in the United States, and British English internationally.\nThese things may seem trivial to some people, but if you’re a San Francisco \nbased company with a good deal of your audience outside of the United States, \nyou should think about your approach to language and have guidelines in \nplace.\n\n58\nFormatting date and time\nAn important factor to consider with international audiences is that the \nUnited States, Europe, and Asia all format things like date, time,",
      "metadata": {
        "startIndex": 46127,
        "endIndex": 47127,
        "chunkIndex": 59,
        "section": "7. Source of truth",
        "globalChunkIndex": 93
      }
    },
    {
      "id": "chunk-94",
      "text": "nd have guidelines in \nplace.\n\n58\nFormatting date and time\nAn important factor to consider with international audiences is that the \nUnited States, Europe, and Asia all format things like date, time, and currency \nvery differently. Don’t make the mistake of assuming your international users \nwill perceive everything the same way you do.\nFor example, when formatting dates \n(fig 3.16):\n• The United States puts the month before the day (MM/DD/YYYY).\n• Europe puts the day before the month (DD/MM/YYYY).\n• Asia puts the year before the month and the day (YYYY/MM/DD).\nFIG 3.16 Document formatting guidelines for dates\nTake my birth date for example (presents welcome): where I’m from (England), I \nwould write my birth date as:\n“24th June, 1982” or “24/06/1982”\n\nLAYInG tHe FounDAtIons  59\nBut in the United States, I would write:\n“June 24, 1982” or “06/24/1982”\nAlso, notice I wrote “th” after “24” in the first example... It’s common practice \nin the United Kingdom to add an ordinal indicator",
      "metadata": {
        "startIndex": 46927,
        "endIndex": 47923,
        "chunkIndex": 60,
        "section": "7. Source of truth",
        "globalChunkIndex": 94
      }
    },
    {
      "id": "chunk-95",
      "text": "the United States, I would write:\n“June 24, 1982” or “06/24/1982”\nAlso, notice I wrote “th” after “24” in the first example... It’s common practice \nin the United Kingdom to add an ordinal indicator (e.g. 2nd, 3rd, 4th) after an \nordinal number (i.e. a date), where it’s less common to see ordinal indicators \nfor dates in the United States.\nFIG 3.17 Document formatting guidelines for time\nAs for time: the United States (U.S.) is one of the only countries in the world \nnot to use the 24-hour clock (they use the 12-hour clock). Those not living in \nthe United States would understand that 09:00 is 9 in the morning, where \n21:00 is 9 in the evening — but a good deal of people in the U.S. would need \nto see 9:00 a.m. or 9:00 p.m. to make sense of these times. This is important, \nboth for companies in the U.S. building products that are used abroad, and for \ncompanies outside of the United States targeting a U.S.",
      "metadata": {
        "startIndex": 47723,
        "endIndex": 48644,
        "chunkIndex": 61,
        "section": "7. Source of truth",
        "globalChunkIndex": 95
      }
    },
    {
      "id": "chunk-96",
      "text": "or 9:00 p.m. to make sense of these times. This is important, \nboth for companies in the U.S. building products that are used abroad, and for \ncompanies outside of the United States targeting a U.S. audience.\nSimilarly, the east and west coasts of the United States are in different time \nzones. If your target audience is nationwide in the U.S., being specific about \ntime is important. If you state that a game kicks off at 7:30 p.m., but don’t \nspecify 7:30 p.m. EST (Eastern Standard Time), your audience on the west \n\n60\ncoast (in the Pacific Standard Time zone) are gonna be pretty mad when they \ntune in 3 hours too late!\nTime and date are tricky. There are so many different ways you can represent \nboth. When we look at something called ‘interface audits’ later in this book, \nyou may be surprised by how many different formats you find in your product \nfor time and date. If you’re referencing time, for example, you could write:\n• “1 hour ago”\n• “1 hr ago”\n• 1h ago\n• 1h\nA quick browse",
      "metadata": {
        "startIndex": 48444,
        "endIndex": 49442,
        "chunkIndex": 62,
        "section": "7. Source of truth",
        "globalChunkIndex": 96
      }
    },
    {
      "id": "chunk-97",
      "text": "surprised by how many different formats you find in your product \nfor time and date. If you’re referencing time, for example, you could write:\n• “1 hour ago”\n• “1 hr ago”\n• 1h ago\n• 1h\nA quick browse through several news websites shows how many different \nformats are used to express the exact same time and date. The following \nexamples are real:\n• Feb 1, 2019\n• February 01, 2019\n• 1 February 2019\n• 1st February 2019, 4:04 pm\n• February 1, 2019, at 4:04 p.m.\n• February 1 2019, 4:04pm\n• Feb. 1, 2019 4:04 p.m. ET\n• Feb. 1, 2019, 4:04 PM EST\n• Fri 1 Feb 2019 16.04 GMT\n• 4:04 PM ET, Fri February 1, 2019\n• 16:04 EST, 1 February 2019\nGiven that there are so many different ways to format things like dates, times, \nnumbers, and currency; including do’s and don’ts and example scenarios in \nyour Digital Foundations can provide a valuable distinction for clarity sake.\nThe Google Material documentation \n(3.7) also has a section on best practices \nfor formatting date and time.\nNow that you’ve got a",
      "metadata": {
        "startIndex": 49242,
        "endIndex": 50242,
        "chunkIndex": 63,
        "section": "7. Source of truth",
        "globalChunkIndex": 97
      }
    },
    {
      "id": "chunk-98",
      "text": "tal Foundations can provide a valuable distinction for clarity sake.\nThe Google Material documentation \n(3.7) also has a section on best practices \nfor formatting date and time.\nNow that you’ve got a better sense of the importance of documenting these \nseemingly small details, I hope you’re motivated to include formatting \nguidelines in your Digital Foundations.\n3.7 material.io/design/communication/data-formats.html\n\nLAYInG tHe FounDAtIons  61LAYInG tHe FounDAtIons  61\nDon’t assume your \ninternational \naudience perceives \neverything the same \nway you do. \n\n62\nAccessibility and inclusivity\nIdeally, your company should already understand the importance of \naccessibility in their digital products. If not, I recommend reading: Planning \nfor Accessibility \n(3.8) by Laura Kalbag (3.9), which outlines a number of \nconsiderations to ‘make the case for accessibility — to yourself, coworkers, \nbosses, and clients’. Laura has also written a book \n(3.10) on accessibility.",
      "metadata": {
        "startIndex": 50042,
        "endIndex": 51017,
        "chunkIndex": 64,
        "section": "7. Source of truth",
        "globalChunkIndex": 98
      }
    },
    {
      "id": "chunk-99",
      "text": "a Kalbag (3.9), which outlines a number of \nconsiderations to ‘make the case for accessibility — to yourself, coworkers, \nbosses, and clients’. Laura has also written a book \n(3.10) on accessibility. And \nI put together a list \n(3.11) of accessibility resources and tools on this book’s \nwebsite that you may find useful. So now you have no excuses! ;)\nMaybe you’re not sure why accessibility and inclusivity are that big of a deal? \nWell, consider that accessibility isn’t just about disabilities and impairments, \nbut also people of different ages (young and old), and people who speak a \ndifferent language. We’re talking about a potentially very large audience!\nThere are several business benefits to creating more accessible products. For \nexample: \n• A more accessible e-commerce product will have fewer sales fall through, \nand fewer community support and help enquiries and complaints.\n• You could expand your reach to a larger audience, giving you a competitive \nedge over your",
      "metadata": {
        "startIndex": 50817,
        "endIndex": 51804,
        "chunkIndex": 65,
        "section": "7. Source of truth",
        "globalChunkIndex": 99
      }
    },
    {
      "id": "chunk-100",
      "text": "roduct will have fewer sales fall through, \nand fewer community support and help enquiries and complaints.\n• You could expand your reach to a larger audience, giving you a competitive \nedge over your competitors.\n• If nothing else, you probably care about not being sued for discrimination! \nDepending on the countries and/or industries you operate in, an accessible \nsite may be required by law. Think about shops providing disabled access \nvia ramps and lifts/elevators, as opposed to (or in addition to) steps... Your \nonline shop is not so different.\nSimple accessibility issues include:\n• Use of colour. Think about colour blindness. The contrast between text and \nbackground colour can affect the legibility and visibility of text.\n• How do you distinguish links, warnings, and changes of state? If you’re \nrelying only on a change of colour to indicate something, be aware that \nsome people won’t see that change of colour.",
      "metadata": {
        "startIndex": 51604,
        "endIndex": 52535,
        "chunkIndex": 66,
        "section": "7. Source of truth",
        "globalChunkIndex": 100
      }
    },
    {
      "id": "chunk-101",
      "text": "text.\n• How do you distinguish links, warnings, and changes of state? If you’re \nrelying only on a change of colour to indicate something, be aware that \nsome people won’t see that change of colour. Instead, try more explicit \nstates — and changes of state — like an underline, or a different weight/\nsize/position.\n• Form inputs should always have a label. Without a label, an input (on its \nown) is most likely meaningless to a screen reader.\n• If you use icons on their own, without an accompanying text label — what \ndoes the icon mean? This is as much a user experience, cultural, and \ncommon sense thing, as it is an accessibility issue.\n• Think about people who use screen readers, or navigate websites with a \n\nLAYInG tHe FounDAtIons  63\nkeyboard, as opposed to a mouse or trackpad. Not everyone navigates and \nconsumes content the same way.\n• Do you rely on sound to convey something important?",
      "metadata": {
        "startIndex": 52335,
        "endIndex": 53240,
        "chunkIndex": 67,
        "section": "7. Source of truth",
        "globalChunkIndex": 101
      }
    },
    {
      "id": "chunk-102",
      "text": "sites with a \n\nLAYInG tHe FounDAtIons  63\nkeyboard, as opposed to a mouse or trackpad. Not everyone navigates and \nconsumes content the same way.\n• Do you rely on sound to convey something important? Not everyone can \nhear.\nWhen we talk about accessibility and inclusivity, we’re not just talking about \ndesigning for disabilities and impairments, we’re talking about everyone.\nFor example, physical (and mental) attributes deteriorate as we age. Of course \nit depends on your business and target audience, but is excluding people \nabove a certain age wise for your business? As Don Norman \n(3.12) puts it in his \nexcellent article \n(3.13):\n“The number of active, healthy oldsters is large–and increasing. We \nare not a niche market. And businesses should take note: we are good \ncustomers often with more free time and discretionary income than \nyounger people.”\nEspecially when designing for touchscreens and mobile devices, we should \nconsider things like small text being harder to read, or small",
      "metadata": {
        "startIndex": 53040,
        "endIndex": 54041,
        "chunkIndex": 68,
        "section": "7. Source of truth",
        "globalChunkIndex": 102
      }
    },
    {
      "id": "chunk-103",
      "text": "more free time and discretionary income than \nyounger people.”\nEspecially when designing for touchscreens and mobile devices, we should \nconsider things like small text being harder to read, or small touchpoints \nand/or touch-sensitive interactions being difficult to action as eye-hand \ncoordination declines, or when people are on the move. Have you ever \nwatched an older family-member try to perform a ‘force touch’ on a screen or \ntrackpad... Yeah, good luck explaining that interaction! “Press it, but don’t press \nhard — just a little bit... No, too hard!”.\n“Are elderly people handicapped? Maybe, but so is a young, athletic \nparent while carrying a baby on one arm and a bag of groceries in \nthe other (and perhaps trying to open their car door).”\n3.8 alistapart.com/article/planning-for-accessibility/\n3.9 laurakalbag.com\n3.10 abookapart.com/products/accessibility-for-everyone\n3.11 designsystemfoundations.com/resources/\n3.12 jnd.org\n3.13",
      "metadata": {
        "startIndex": 53841,
        "endIndex": 54791,
        "chunkIndex": 69,
        "section": "7. Source of truth",
        "globalChunkIndex": 103
      }
    },
    {
      "id": "chunk-104",
      "text": "oor).”\n3.8 alistapart.com/article/planning-for-accessibility/\n3.9 laurakalbag.com\n3.10 abookapart.com/products/accessibility-for-everyone\n3.11 designsystemfoundations.com/resources/\n3.12 jnd.org\n3.13 fastcompany.com/90338379/i-wrote-the-book-on-user-friendly-design-what-\ni-see-today-horrifies-me\n\n64\nIf you haven’t put any accessibility standards in place already, you should \nresearch what you can do, start a discussion with your team, review your \nproducts, and take steps to improve your product’s accessibility. It’s a \nfascinating subject, and you may be surprised at what you learn and how much \nof a difference you can make.\nFIG 3.18 microsoft.com/design/inclusive/\n\nLAYInG tHe FounDAtIons  65\nUse your Digital Foundations to document your standards, raise awareness \nby educating your team on accessibility issues in digital design, and write \nguidelines for how to design for accessibility.\nMicrosoft has a comprehensive page \n(fig 3.18) in their digital design guidelines \non their",
      "metadata": {
        "startIndex": 54591,
        "endIndex": 55585,
        "chunkIndex": 70,
        "section": "7. Source of truth",
        "globalChunkIndex": 104
      }
    },
    {
      "id": "chunk-105",
      "text": "team on accessibility issues in digital design, and write \nguidelines for how to design for accessibility.\nMicrosoft has a comprehensive page \n(fig 3.18) in their digital design guidelines \non their dedication to inclusive design, including their principles, resources, \ntoolkits, and case studies.\nSmall changes can make a big difference. Consider making inclusive design a \npart of your team’s design and product thinking.\nResponsive design\nHopefully, you and your design team are already working ‘responsively’, but \nif you’re not sure what I mean by this, don’t worry — you’re not alone. I’ve \nworked on many teams where some of the designers weren’t sure how to \ndesign with different browser widths and/or devices in mind. If this describes \nyou, or someone on your team, pause here to read — or recommend — my \narticle \n(3.14) on responsive web design, which covers best practices for \nincorporating responsive web design into your design process.\nIf you’re already designing with responsive",
      "metadata": {
        "startIndex": 55385,
        "endIndex": 56385,
        "chunkIndex": 71,
        "section": "7. Source of truth",
        "globalChunkIndex": 105
      }
    },
    {
      "id": "chunk-106",
      "text": "or recommend — my \narticle \n(3.14) on responsive web design, which covers best practices for \nincorporating responsive web design into your design process.\nIf you’re already designing with responsive layouts in mind, you should \ndocument any responsive grids you use in your products, and best practices \nfor designing responsively.\nResponsive design is a problem area I’ve experienced at many companies. You \nmay be surprised how little some web designers know about responsive design \n— don’t take anything for granted. Instead, use your Digital Foundations as \na platform to educate your team and get everyone on the same page about \ndesigning for all screen sizes and devices.\nGoogle Material \n(fig 3.19) does a great job of documenting the makeup of their \nresponsive layout grid by clearly defining the makeup and terminology of a \nresponsive grid.\nMaterial clearly documents what ‘columns’, ‘gutters’, and ‘margins’ are, \nand how they work across different breakpoints.",
      "metadata": {
        "startIndex": 56185,
        "endIndex": 57162,
        "chunkIndex": 72,
        "section": "7. Source of truth",
        "globalChunkIndex": 106
      }
    },
    {
      "id": "chunk-107",
      "text": "ut grid by clearly defining the makeup and terminology of a \nresponsive grid.\nMaterial clearly documents what ‘columns’, ‘gutters’, and ‘margins’ are, \nand how they work across different breakpoints. Their guidelines explain \npercentage width columns versus fixed pixel (px) values, and flexible columns \nversus fixed gutter widths.\n3.14 medium.com/owl-studios/responsive-design-af7a1f14b991\n\n6666\nFIG 3.19 material.io/design/layout/responsive-layout-grid.html\n\nLAYInG tHe FounDAtIons  67\nProcess\nDocument your design, engineering, and even interviewing processes so \neveryone knows what is expected. You might even document things like \nnaming conventions for files and folder structure, to keep things organised.\nHow does your team approach a design problem, and answer questions like:\n• From design thinking, brainstorming, sketching, wireframing, initial ideas, \ndesign mockups, design critiques, to design hand-off...",
      "metadata": {
        "startIndex": 56962,
        "endIndex": 57885,
        "chunkIndex": 73,
        "section": "7. Source of truth",
        "globalChunkIndex": 107
      }
    },
    {
      "id": "chunk-108",
      "text": "your team approach a design problem, and answer questions like:\n• From design thinking, brainstorming, sketching, wireframing, initial ideas, \ndesign mockups, design critiques, to design hand-off... What do you do?\n• Who is responsible for what?\n• How do designers and engineers work together?\n• How do you go from design to code?\nYou should have a clear process for making iterations or additions to a design \nsystem, so everyone knows things like:\n• How is it decided what your team works on?\n• How and where do you keep track of tasks, to-dos, and so on?\n• Have you updated the design library, as well as the code?\n• Have you updated the documentation with the latest change?\nIf you’re not sure of the answers to these questions, then that’s proof you need \nto discuss these topics — and document the answers and processes you agree \non (i.e. your Digital Foundations) — with your team. Anything you can do to \nalign your team on process is a good thing.",
      "metadata": {
        "startIndex": 57685,
        "endIndex": 58644,
        "chunkIndex": 74,
        "section": "7. Source of truth",
        "globalChunkIndex": 108
      }
    },
    {
      "id": "chunk-109",
      "text": "d \nto discuss these topics — and document the answers and processes you agree \non (i.e. your Digital Foundations) — with your team. Anything you can do to \nalign your team on process is a good thing. Think about the benefit to new \nteam members who need to rapidly familiarise themselves with your team’s \nprocesses, or how a source of truth will help align your team on design process \nand workflows.\nDesign systems\nYour Digital Foundations are guidelines for all the best practices that fall \noutside of — and dovetail into — your actual design system(s), such as brand \nidentity, tone of voice, process, etc. Relating to design systems, your Digital \nFoundations should be a source of truth and answer questions like:\n• Does your team follow a specific model or methodology for design systems? \nIn the next chapter, I’ll introduce you to a simple design system model. If \nyou choose to follow that model — or for whatever methodology you use — \nyou should outline it in your Digital Foundations,",
      "metadata": {
        "startIndex": 58444,
        "endIndex": 59443,
        "chunkIndex": 75,
        "section": "7. Source of truth",
        "globalChunkIndex": 109
      }
    },
    {
      "id": "chunk-110",
      "text": "n the next chapter, I’ll introduce you to a simple design system model. If \nyou choose to follow that model — or for whatever methodology you use — \nyou should outline it in your Digital Foundations, so everyone is on the same \npage.\n\n68\n• Do you use specific terminology to describe different aspects of your design \nsystem?\n• Why are design systems valuable to different teams at your company? You \ncould repurpose any pitches you’ve used while ‘selling your design system’, \nas referenced in the previous chapter, to empower other team members to \nadvocate for the adoption of design systems.\nYour company may have more than one design system (one for marketing \nwebsites, one for mobile apps, one for employee-facing products, one for \ncustomer-facing products, etc.), so these guidelines should be general enough \nto set the foundation for all your design systems. To unify them under one \nbrand, and to ensure when your teams collaborate across different products, \nteams, and departments, that",
      "metadata": {
        "startIndex": 59243,
        "endIndex": 60244,
        "chunkIndex": 76,
        "section": "7. Source of truth",
        "globalChunkIndex": 110
      }
    },
    {
      "id": "chunk-111",
      "text": "e general enough \nto set the foundation for all your design systems. To unify them under one \nbrand, and to ensure when your teams collaborate across different products, \nteams, and departments, that they are speaking the same language — using \nthe same vocabulary and methodologies. From these Digital Foundations for \ndesign systems, you can also link to any design system documentation and \nresources, if applicable.\nHow are Digital Foundations different to design system \ndocumentation?\nAs stated earlier with the Dropbox example, some things are inherent \nthroughout all of a brand’s digital properties (across marketing websites, \nproducts, apps, and so on). Each property can be very different — visually \nand functionally — but Digital Foundations help to unify a brand across all \nits digital experiences. A company can have Digital Foundations and a design \nsystem; some companies even have multiple design systems to cover different \nproducts, each with their own documentation.\nDigital",
      "metadata": {
        "startIndex": 60044,
        "endIndex": 61042,
        "chunkIndex": 77,
        "section": "7. Source of truth",
        "globalChunkIndex": 111
      }
    },
    {
      "id": "chunk-112",
      "text": "tal experiences. A company can have Digital Foundations and a design \nsystem; some companies even have multiple design systems to cover different \nproducts, each with their own documentation.\nDigital Foundations are more all-encompassing, covering brand identity, \nformatting, and “a shared vocabulary for design”, as IBM puts it \n(fig 3.20). \nDesign system documentation is more specific — it covers components and \npatterns created using the Digital Foundations as a starting point, but is \nspecifically for use in a particular website or product.\nFor example, IBM’s Carbon design system \n(fig 3.21) was built upon the \nfoundations of their “IBM Design Language” \n(fig 3.20) brand guidelines.\nOnce their “IBM Design Language” guidelines (or their version of Digital \nFoundations) were in place, they had a strong foundation on which to build \ntheir design system.\n\nLAYInG tHe FounDAtIons  69\nMake it visible, make it count\nMost importantly, your team needs easy access to these Digital Foundations.",
      "metadata": {
        "startIndex": 60842,
        "endIndex": 61843,
        "chunkIndex": 78,
        "section": "7. Source of truth",
        "globalChunkIndex": 112
      }
    },
    {
      "id": "chunk-113",
      "text": "had a strong foundation on which to build \ntheir design system.\n\nLAYInG tHe FounDAtIons  69\nMake it visible, make it count\nMost importantly, your team needs easy access to these Digital Foundations. \nThe more accessible they are, the more likely your team are to adopt, \nunderstand, and even — ideally — contribute to them.\nThe way you present or document these guidelines, values, and principles will \nFIG 3.21 carbondesignsystem.com\nFIG 3.20 ibm.com/design/language/\n\n70\nhave a big impact on their adoption. It might be smart to brainstorm with your \nteam how to proceed. Get them involved and excited about it.\nIt doesn’t have to ( just) be a website, digital document, or a wiki — it could be \nsomething visual in the physical space.\nFIG 3.22 percolate.com/values\nPercolate, a marketing platform in New York City, put up posters (fig 3.22) \naround their office as a reminder of their values.\n“Our mission and vision keep us aligned to a common goal.",
      "metadata": {
        "startIndex": 61643,
        "endIndex": 62598,
        "chunkIndex": 79,
        "section": "7. Source of truth",
        "globalChunkIndex": 113
      }
    },
    {
      "id": "chunk-114",
      "text": "te.com/values\nPercolate, a marketing platform in New York City, put up posters (fig 3.22) \naround their office as a reminder of their values.\n“Our mission and vision keep us aligned to a common goal. Each \nvalue is paired with a question that anyone within Percolate could \nask themselves, to help them understand whether the decision they’re \nmaking is aligned with the company.”\nYour brand, design, and engineering principles are the mantra that guide \neverything you do. They are the driving force and inspiration. With every \nfoundation, component, pattern, template, web page, or banner you design, \nand with each header and paragraph you write, ask yourself: “Does this align \nto our brand principles?”\n\nLAYInG tHe FounDAtIons  71\nFocus Lab, a design agency in the United States, created a series of posters \n(fig 3.23) highlighting their design standards and hung them prominently \naround their studio space.\n“We have a collection of standards that we strive to live up to each \nday.",
      "metadata": {
        "startIndex": 62398,
        "endIndex": 63389,
        "chunkIndex": 80,
        "section": "7. Source of truth",
        "globalChunkIndex": 114
      }
    },
    {
      "id": "chunk-115",
      "text": "ed a series of posters \n(fig 3.23) highlighting their design standards and hung them prominently \naround their studio space.\n“We have a collection of standards that we strive to live up to each \nday. We reference them just about every week in one way or another. \nThey’ve become part of our lexicon in the office.”\nIt’s an interesting idea: to present design values, principles, and standards in \nthe physical world — not just digitally. We are very passive in our consumption \nof most things digital. It’s easy to forget a website, or never revisit it.\nPresenting design guidelines in the real world — in poster form \n(fig 3.24), a \ndesktop calendar, a sketchbook, a coaster, a desktop/phone wallpaper, and so \non — might be a brilliant way of getting people to notice and remember.\nFIG 3.23 focuslabllc.com/standards\n\n72\nMy former colleague, Keaton Price (3.15) came up with a cool idea to reinforce \nour design team’s values — by presenting them as an award \n(fig 3.25).",
      "metadata": {
        "startIndex": 63189,
        "endIndex": 64163,
        "chunkIndex": 81,
        "section": "7. Source of truth",
        "globalChunkIndex": 115
      }
    },
    {
      "id": "chunk-116",
      "text": "remember.\nFIG 3.23 focuslabllc.com/standards\n\n72\nMy former colleague, Keaton Price (3.15) came up with a cool idea to reinforce \nour design team’s values — by presenting them as an award \n(fig 3.25). He \ndesigned a beautiful postcard, and distributed a limited number of these cards \nto each team member. The idea was: if you experienced a member of the team \nexemplifying one of the team’s core values, then you would tick the value(s) \nthey exhibited, write them a personal message, sign it, and present it to them \nas an award. I can tell you from the perspective of someone who both received \nand gave these awards that it was a great feeling, and did wonders for team and \npersonal morale too! It put a smile on someone’s face, showed gratitude and \nteam spirit, and reinforced our team’s values. Win-win!\nFIG 3.24 Posters reminding team of their design values\n3.15 keaton.design\n3.16 google.com/docs/about/",
      "metadata": {
        "startIndex": 63963,
        "endIndex": 64877,
        "chunkIndex": 82,
        "section": "7. Source of truth",
        "globalChunkIndex": 116
      }
    },
    {
      "id": "chunk-117",
      "text": "on someone’s face, showed gratitude and \nteam spirit, and reinforced our team’s values. Win-win!\nFIG 3.24 Posters reminding team of their design values\n3.15 keaton.design\n3.16 google.com/docs/about/\n\nLAYInG tHe FounDAtIons  73\nAnd it doesn’t just have to be stating standards and values. You could get \ncreative — presenting other foundations like brand colours, typography, \nformatting reminders, art direction, and so on.\nFIG 3.25 Design team values presented as awards\nJust get it done!\nIt’s easy to get caught up in the presentation of things — sometimes, so much \nso that we delay or even don’t do the things we wanted to do! As designers, \nwe want to create something beautiful and memorable. As developers, we’re \ntempted to build everything ourselves. I faced this very problem on both fronts \n(as a designer and developer) when I first set out to create Digital Foundations. \nI was tempted to design and build a website as a vehicle for the content — but \nthe content was practically",
      "metadata": {
        "startIndex": 64677,
        "endIndex": 65670,
        "chunkIndex": 83,
        "section": "7. Source of truth",
        "globalChunkIndex": 117
      }
    },
    {
      "id": "chunk-118",
      "text": "fronts \n(as a designer and developer) when I first set out to create Digital Foundations. \nI was tempted to design and build a website as a vehicle for the content — but \nthe content was practically bursting out of me, waiting to be written — so I \ndecided it was daft to let design and code stand in the way of progress.\nMy solution seemed so simple, yet so effective. I just opened a new Google Doc \n(3.16), and started writing. The content flowed out, free from the distraction \nof design software or code editors. Plus, a Google Doc is easy to share with \nyour team; they can contribute, comment, suggest edits, and invite more team \n\n74\nmembers to join. It’s easy to reference from anywhere, on any device, even \noffline. It does almost everything you need it to do!\nHere is a screenshot (fig 3.26) from the Digital Foundations I created, in a \nGoogle Doc:\nFIG 3.26 Digital Foundations in a Google Doc\nOf course, it’s hard to get excited about a Google Doc.",
      "metadata": {
        "startIndex": 65470,
        "endIndex": 66434,
        "chunkIndex": 84,
        "section": "7. Source of truth",
        "globalChunkIndex": 118
      }
    },
    {
      "id": "chunk-119",
      "text": "t to do!\nHere is a screenshot (fig 3.26) from the Digital Foundations I created, in a \nGoogle Doc:\nFIG 3.26 Digital Foundations in a Google Doc\nOf course, it’s hard to get excited about a Google Doc. So in the longer term, \nthe Digital Foundations evolved into a more visually compelling and engaging \nentity (as a website), but the Google Doc did its job well, for a long time. It’s \nworth considering.\nAgain, don’t let technology or design ego stand in the way of getting your \nDigital Foundations produced and out there with your team. The longer they \nstay unwritten, the longer your product woes will persist.\nWe’ll talk more about Google Docs in the “Document everything!” chapter, \nlater in this book.\nFlaunt it\nIt’s not uncommon for companies to make their Digital Foundations or \ndesign system documentation public. This may seem like a strange decision... \n\nLAYInG tHe FounDAtIons  75LAYInG tHe FounDAtIons  75\nFIG 3.28 mailchimp.com/design/\nFIG 3.27 uber.design/case-studies/rebrand-2018",
      "metadata": {
        "startIndex": 66234,
        "endIndex": 67234,
        "chunkIndex": 85,
        "section": "7. Source of truth",
        "globalChunkIndex": 119
      }
    },
    {
      "id": "chunk-120",
      "text": "em documentation public. This may seem like a strange decision... \n\nLAYInG tHe FounDAtIons  75LAYInG tHe FounDAtIons  75\nFIG 3.28 mailchimp.com/design/\nFIG 3.27 uber.design/case-studies/rebrand-2018\n\n76\nIt’s kinda like putting an instruction manual online for everyone to see, for \nsomething only you use. However, it actually has its advantages.\nDigital Foundations are the best and most idealistic representation of your \nbrand. They are what your company aspires to be, what it wants to look like, \nand how it wants to make people think or feel. Presented well, they can paint \na brand in a positive light. They can even paper over the cracks — and let’s be \nhonest, some tech companies need any good press they can get! Design can \noffer these companies a great opportunity to look good in the public domain.\nInternally, the objective should be to align your team(s) on how you design and \nbuild products.\nExternally, it’s showbiz. It’s a confident move.",
      "metadata": {
        "startIndex": 67034,
        "endIndex": 67993,
        "chunkIndex": 86,
        "section": "7. Source of truth",
        "globalChunkIndex": 120
      }
    },
    {
      "id": "chunk-121",
      "text": "great opportunity to look good in the public domain.\nInternally, the objective should be to align your team(s) on how you design and \nbuild products.\nExternally, it’s showbiz. It’s a confident move. It says: ‘We’re proud of the great \nwork our team does. We’re awesome. Come work with us!’ And it works! \nDigital Foundations can be a great recruiting tool, and they can be great for \npublic relations. They can be beautifully designed, sexy, colourful, loud, or \nanimated. They can make the company look awesome, and they’re a great \ntalking point on social media and in design case studies. \nUber Design \n(3.17) hired outside help from a respected design agency, Ueno \n(3.18) to help create and publically showcase their brand guidelines. Together \nthey created a splashy website \n(fig 3.27) to really maximise their impact and \nreach.\nMailChimp Design (fig 3.28) opted for a simpler, one-page website to showcase \ntheir 2018 redesign/brand.",
      "metadata": {
        "startIndex": 67793,
        "endIndex": 68737,
        "chunkIndex": 87,
        "section": "7. Source of truth",
        "globalChunkIndex": 121
      }
    },
    {
      "id": "chunk-122",
      "text": "ether \nthey created a splashy website \n(fig 3.27) to really maximise their impact and \nreach.\nMailChimp Design (fig 3.28) opted for a simpler, one-page website to showcase \ntheir 2018 redesign/brand. It’s part business promotion, part flexing design \nmuscle, and part recruitment tool. This approach can cost very little to do if \nyou do it internally.\nAnother growing trend for highlighting design and engineering at tech \ncompanies is to showcase a limited amount of digital brand guidelines \nalongside articles and case studies. Some even offer free design resources, \ndownloads, podcasts, and interviews.\nAirbnb Design \n(fig 3.29) and Microsoft Design (fig 3.30) both do something \nlike this.\n3.17 uber.design\n3.18 ueno.co/work/uber-design\n\nLAYInG tHe FounDAtIons  77LAYInG tHe FounDAtIons  77\nFIG 3.30 microsoft.com/design/\nFIG 3.29 airbnb.design\n\n78\nDon’t lose sight of why you’re doing this...\nPublishing your Digital Foundations for the world to see is a choice.",
      "metadata": {
        "startIndex": 68537,
        "endIndex": 69508,
        "chunkIndex": 88,
        "section": "7. Source of truth",
        "globalChunkIndex": 122
      }
    },
    {
      "id": "chunk-123",
      "text": "LAYInG tHe FounDAtIons  77\nFIG 3.30 microsoft.com/design/\nFIG 3.29 airbnb.design\n\n78\nDon’t lose sight of why you’re doing this...\nPublishing your Digital Foundations for the world to see is a choice. It can be \ngreat for public relations, and it can be a great recruitment tool. But the most \nimportant thing is that you lay these foundations internally at your company \nfor the benefit of your team(s) and your product(s). Outside attention is not the \ncore reason for doing them.\nAnd keep in mind that the public brand guidelines you see online may be \nmore for show than anything — so by all means use them for inspiration, but \ndon’t lose sight of your team’s particular needs, or let your desire to create \nsomething flashy get in the way of creating something useful.\nWith your Digital Foundations laid, let’s look at creating a design system!\n\nLAYInG tHe FounDAtIons  79LAYInG tHe FounDAtIons  79\nThe more \naccessible your \nDigital Foundations \nare, the more likely \nyour team are to \nadopt,",
      "metadata": {
        "startIndex": 69308,
        "endIndex": 70307,
        "chunkIndex": 89,
        "section": "7. Source of truth",
        "globalChunkIndex": 123
      }
    },
    {
      "id": "chunk-124",
      "text": "ions laid, let’s look at creating a design system!\n\nLAYInG tHe FounDAtIons  79LAYInG tHe FounDAtIons  79\nThe more \naccessible your \nDigital Foundations \nare, the more likely \nyour team are to \nadopt, understand, \nand even (ideally) \ncontribute to them. \n\n80\nDesign system model\n80\n04\nDesign \nsystem \nmodel\nLAYInG tHe FounDAtIons\n\nDesIGn sYsteM MoDeL  81\nThe previous chapter talked about laying strong foundations for digital \nproducts at a company by establishing digital brand guidelines. With those \nfoundations in place, we’re ready to start building an on-brand design system \nthat combines our brand and digital guidelines with the user and business \nneeds.\nLet’s start with the basics by defining some terminology and looking at a \nsimple model for creating design systems.\nSpeaking the same language\nThe Internet is flooded with information on design systems, and I encourage \nyou to read as much as you can.",
      "metadata": {
        "startIndex": 70107,
        "endIndex": 71024,
        "chunkIndex": 90,
        "section": "7. Source of truth",
        "globalChunkIndex": 124
      }
    },
    {
      "id": "chunk-125",
      "text": "ogy and looking at a \nsimple model for creating design systems.\nSpeaking the same language\nThe Internet is flooded with information on design systems, and I encourage \nyou to read as much as you can. However, the more you read about design \nsystems, the more you realise that everyone uses different terminology \nto describe the same or similar things. This starts to get very confusing, \nespecially when you’re trying to get other people (aka stakeholders) on board \nwith the idea of creating a design system.\nSpeaking the same language is very important when working with teams. \nCommunication is hard enough without adding different definitions for \ndifferent design system terms to the mix. So at the very least, you need to align \non what terminology you’re all using.\nOne thing to always keep in mind: the less jargon you use, the better.\nCommunication made easy\nFollowing one design system model is a great way to keep your team on the \nsame page as to what each part of the system represents.",
      "metadata": {
        "startIndex": 70824,
        "endIndex": 71825,
        "chunkIndex": 91,
        "section": "7. Source of truth",
        "globalChunkIndex": 125
      }
    },
    {
      "id": "chunk-126",
      "text": "mind: the less jargon you use, the better.\nCommunication made easy\nFollowing one design system model is a great way to keep your team on the \nsame page as to what each part of the system represents. A simple model will \nalso assist you in selling the concept of design systems to stakeholders.\nAlso, the simpler the language you use in your design system model, the \neasier it will be to communicate. As covered in the previous chapter, you \nshould define the (design system) terms your team is using in your Digital \nFoundations, or at least in your design system documentation.\nFor example, you may have heard design system lingo like: foundation, \ncomponent, pattern, atom, molecule, and organism. But the thing is: after \nyou’ve read a few articles and spoken to a few different people, you realise \nthat people draw their own conclusions as to what each term means based on \ntheir use in a variety of different contexts.",
      "metadata": {
        "startIndex": 71625,
        "endIndex": 72552,
        "chunkIndex": 92,
        "section": "7. Source of truth",
        "globalChunkIndex": 126
      }
    },
    {
      "id": "chunk-127",
      "text": "you’ve read a few articles and spoken to a few different people, you realise \nthat people draw their own conclusions as to what each term means based on \ntheir use in a variety of different contexts. With an industry the size of tech \n— spanning international borders, languages, and cultures — it’s easy for the \nmeaning of terms to diverge.\n\n82\nThis confusion is unavoidable, industry-wide. But it is avoidable on your \nteam(s). It’s an inefficient use of time and a frustrating experience for all to \nhave to continually explain terminology to people and then debate which \nterm is better, so it’s important your team(s) align on a model, and a shared \nlanguage. The same goes for any naming conventions used in the design and \ncode of a design system.\nNot everyone knows what you know\nIt’s easy to recommend you create Digital Foundations (see previous \nchapter) and to define the terminology of this model as a source of truth \nthat’s accessible by everyone on the team.",
      "metadata": {
        "startIndex": 72352,
        "endIndex": 73328,
        "chunkIndex": 93,
        "section": "7. Source of truth",
        "globalChunkIndex": 127
      }
    },
    {
      "id": "chunk-128",
      "text": "hat you know\nIt’s easy to recommend you create Digital Foundations (see previous \nchapter) and to define the terminology of this model as a source of truth \nthat’s accessible by everyone on the team. But not everyone sees your \ndocumentation. Not everyone reads the same articles you do, attends the same \nconferences, or shares your experience. And as much as I’d like them to, not \neveryone will read this book (though by all means, buy them all a copy!).\nI’ve made the mistake a few times of dropping design system lingo into \nconversations where there wasn’t a shared understanding of terminology, and \nit’s caused confusion and frustration. The lesson I learned is not to assume \neveryone knows what you know. It’s a simple and somewhat obvious lesson, \nbut we’re all guilty of it in one way or another.\nHere’s a simple way I got my team using the same terminology: in \npresentations to department heads, product managers, and designers \n(referring back to the “Selling a Design System”",
      "metadata": {
        "startIndex": 73128,
        "endIndex": 74120,
        "chunkIndex": 94,
        "section": "7. Source of truth",
        "globalChunkIndex": 128
      }
    },
    {
      "id": "chunk-129",
      "text": "way or another.\nHere’s a simple way I got my team using the same terminology: in \npresentations to department heads, product managers, and designers \n(referring back to the “Selling a Design System” chapter), I would often start by \nbriefly introducing what design systems are, and the model and terminology \nI was proposing we use. It’s no use launching into a pitch if the people you’re \naddressing don’t understand what you’re talking about.\nI made this mistake again, later, when I assumed the engineering team(s) \nwould know all about design systems, and that they’d be totally on board with \nthe concept. I was wrong, at least about the knowing part.\nI remember having a productive and enthusiastic chat about our plans for \ncreating a design system with an Engineering Lead. He got it. Everything. We \nwe were on the same page. But I was somewhat surprised when the meeting \nended with him asking me to schedule a presentation to our engineering \nteams, which, at the time, was dozens of",
      "metadata": {
        "startIndex": 73920,
        "endIndex": 74916,
        "chunkIndex": 95,
        "section": "7. Source of truth",
        "globalChunkIndex": 129
      }
    },
    {
      "id": "chunk-130",
      "text": "erything. We \nwe were on the same page. But I was somewhat surprised when the meeting \nended with him asking me to schedule a presentation to our engineering \nteams, which, at the time, was dozens of people scattered around the planet! \nHe asked me to explain to them what design systems are, to introduce them \nto the model and terminology, and to help them understand why we should \ninvest time in any of it. \n\nDesIGn sYsteM MoDeL  83DesIGn sYsteM MoDeL  83\nIt’s important \nyour team aligns \non a design system \nmodel and a \nshared language \nthat everybody \nunderstands. The \nless jargon you use, \nthe better.\n\n84\nThankfully the presentation went well. Aligning everyone on the same page \ngot them excited about the project, and helped me earn their support. I was \nalso able to answer any questions, dispel any concerns, and gain a lot of \nmomentum.\nAligning on a model and terminology\nBack in 2016, I became a ‘Design System Lead’ at a large company and was \ntasked with launching a",
      "metadata": {
        "startIndex": 74716,
        "endIndex": 75703,
        "chunkIndex": 96,
        "section": "7. Source of truth",
        "globalChunkIndex": 130
      }
    },
    {
      "id": "chunk-131",
      "text": "any questions, dispel any concerns, and gain a lot of \nmomentum.\nAligning on a model and terminology\nBack in 2016, I became a ‘Design System Lead’ at a large company and was \ntasked with launching a department-wide system design initiative for teams \nthat hadn’t worked with design systems before. While researching a design \nsystem model and terminology to use, I was confused by the many different \nterms — and jargon — I found to describe and break down a design system. \nCall me stubborn, but since what I found was too complicated, I created my \nown! My goal with creating this model was to give the team a set of easy-\nto-understand terms that we could all start using with as little friction as \npossible.\nFIG 4.1 The Foundations Model\nThe Foundations Model\nPlease feel free to use this model at your company, but don’t be afraid to \nchange the terminology to suit your team’s preferences. The most important \nthing is that you all understand and feel comfortable with it!\nI call it the",
      "metadata": {
        "startIndex": 75503,
        "endIndex": 76498,
        "chunkIndex": 97,
        "section": "7. Source of truth",
        "globalChunkIndex": 131
      }
    },
    {
      "id": "chunk-132",
      "text": "model at your company, but don’t be afraid to \nchange the terminology to suit your team’s preferences. The most important \nthing is that you all understand and feel comfortable with it!\nI call it the ‘Foundations Model’ \n(fig 4.1).\nI came across the term ‘foundations’ a few times in my research. Its use \n\nDesIGn sYsteM MoDeL  85\ncase was a little different every time, but as I mentioned in the previous \nchapter, I thought it was a great analogy for how to approach system design. \nIn construction, foundations are crucial to a building’s stability, quality, and \nlongevity — and the same applies to building digital products. To reiterate \nwhat I said earlier:\nA building built on sand will only stand for so long. You need to lay strong \nfoundations, before you build anything.\nI’ve already shared my love of using construction analogies, but I really \nthink it’s no coincidence we use terms like ‘building’ in digital design.",
      "metadata": {
        "startIndex": 76298,
        "endIndex": 77230,
        "chunkIndex": 98,
        "section": "7. Source of truth",
        "globalChunkIndex": 132
      }
    },
    {
      "id": "chunk-133",
      "text": "ay strong \nfoundations, before you build anything.\nI’ve already shared my love of using construction analogies, but I really \nthink it’s no coincidence we use terms like ‘building’ in digital design. There \nare many parallels between the construction and tech industries — from \narchitecture and design, to engineering and development, to quality assurance, \ndeployment, marketing, and maintenance. \nIn line with keeping things simple and easy for people to understand, it’s \nhelpful to think in visual terms. You could look at the design system model \n(fig 4.1) as a building made up of building blocks. Each level expands upon, \nintegrates with, and is built upon the level below.\nIt’s also important to consider: there are many other factors involved in the \nprocess of creating or iterating on a design system \n(fig 4.2). User experience, \ndata, accessibility, content strategy, localisation, user testing, and brand \nshould all be interwoven in every level of your design system model.",
      "metadata": {
        "startIndex": 77030,
        "endIndex": 78021,
        "chunkIndex": 99,
        "section": "7. Source of truth",
        "globalChunkIndex": 133
      }
    },
    {
      "id": "chunk-134",
      "text": "ing on a design system \n(fig 4.2). User experience, \ndata, accessibility, content strategy, localisation, user testing, and brand \nshould all be interwoven in every level of your design system model. They are \nFIG 4.2 Many other factors are involved in design systems\n\n86\nthe glue, the cement, the beams, and the pillars that hold the model together, \nand make it great.\nLet’s get into what each level of our design system model is.\nFoundations\nAs we covered in depth in the previous chapter, your Digital Foundations \nshould be the basis for every digital project you do, including your design \nsystem(s). Foundations are multifaceted and arguably more extensive than the \nother levels, which is why they warranted their own chapter. There’s a reason \nthe model is named after this foundational layer.\nTo review, Digital Foundations include the subjects that brand guidelines \ntypically cover, such as guidelines for the identity, typography, text styles, \ncolour, icons, photography, imagery, and",
      "metadata": {
        "startIndex": 77821,
        "endIndex": 78820,
        "chunkIndex": 100,
        "section": "7. Source of truth",
        "globalChunkIndex": 134
      }
    },
    {
      "id": "chunk-135",
      "text": "er.\nTo review, Digital Foundations include the subjects that brand guidelines \ntypically cover, such as guidelines for the identity, typography, text styles, \ncolour, icons, photography, imagery, and illustration. They also cover less \nvisual aspects like brand tone of voice, formatting choices, and things like \nbrand values and design and engineering principles.\nFIG 4.3 Foundations example: text styles\nDigital Foundations also go beyond brand to span design and code issues, with \nguidelines for calls to action and links, layout and spacing, formatting of date, \ntime, and currency, localisation, responsive grids, animation, and accessibility.\n\nDesIGn sYsteM MoDeL  87\nFoundations can be extensive or brief, depending on the size and complexity \nof your product suite. As I mentioned in the previous chapter, your Digital \nFoundations are guidelines for things (such as brand values, logo treatment, \nformatting, etc.) that cover all your digital properties.",
      "metadata": {
        "startIndex": 78620,
        "endIndex": 79586,
        "chunkIndex": 101,
        "section": "7. Source of truth",
        "globalChunkIndex": 135
      }
    },
    {
      "id": "chunk-136",
      "text": "ct suite. As I mentioned in the previous chapter, your Digital \nFoundations are guidelines for things (such as brand values, logo treatment, \nformatting, etc.) that cover all your digital properties. However, other aspects \nof your foundations may only be specific to one digital property — for \nexample, your company’s marketing site may use a responsive grid, but your \ndesktop or mobile app/product may not. Or, it’s not uncommon for different \ndigital properties to use fonts unique to them (think back to the Dropbox \nexample in the previous chapter). In these cases, you may have foundations \nthat are unique to the design system created for each digital property. Be \nsure to include any property-specific guidelines — along with the company-\nwide Digital Foundations you’ve already created — in your design system \ndocumentation. \nA simple example of property-specific foundations are a set of text styles \nfor a website, which are different to those used in a mobile app.",
      "metadata": {
        "startIndex": 79386,
        "endIndex": 80367,
        "chunkIndex": 102,
        "section": "7. Source of truth",
        "globalChunkIndex": 136
      }
    },
    {
      "id": "chunk-137",
      "text": "already created — in your design system \ndocumentation. \nA simple example of property-specific foundations are a set of text styles \nfor a website, which are different to those used in a mobile app. Defining a \nlimited set of text styles for headers, copy, quotes, captions, and so on is wise \nfor consistency and user experience, as well as a streamlined code base. The \nexample \n(fig 4.3) shows two responsive text styles designed specifically for \nheaders and subheaders.\nComponents \nThese are the smaller building blocks of a digital product. Components are \nFIG 4.4 Components example: a text input\n\n88\ndistinctive user interface (UI) elements that are used repetitively throughout \na product. For the most part, they are actionable or at least used to convey \nmeaning.\nExamples include: buttons, form inputs, selects, textareas, radio buttons, \ncheckboxes, range sliders, toggles, avatars, tooltips, and so on.",
      "metadata": {
        "startIndex": 80167,
        "endIndex": 81085,
        "chunkIndex": 103,
        "section": "7. Source of truth",
        "globalChunkIndex": 137
      }
    },
    {
      "id": "chunk-138",
      "text": "they are actionable or at least used to convey \nmeaning.\nExamples include: buttons, form inputs, selects, textareas, radio buttons, \ncheckboxes, range sliders, toggles, avatars, tooltips, and so on. The following \n(fig 4.4) shows a text input component and all its states.\nIt’s good practice to not get too carried away with creating completely bespoke \ncomponents — for the most part, there’s rarely a need to reinvent the wheel \nwith these. There’s a good reason why selects (i.e. a form input with an arrow, \nwhich opens a dropdown menu on-click) look the same on most websites: \npeople can instantly identify their function. This commonality, consistency, \nand familiarity in digital interfaces are important, not boring. Using \nconventional components (that aren’t ‘overstyled’) makes sure that inputs and \nactionable items are instantly recognisable to users. It also makes it easier for \ndevelopers to build an accessible and consistent solution that works across a \nvariety of devices and",
      "metadata": {
        "startIndex": 80885,
        "endIndex": 81883,
        "chunkIndex": 104,
        "section": "7. Source of truth",
        "globalChunkIndex": 138
      }
    },
    {
      "id": "chunk-139",
      "text": "at inputs and \nactionable items are instantly recognisable to users. It also makes it easier for \ndevelopers to build an accessible and consistent solution that works across a \nvariety of devices and browsers which isn’t too complicated or code heavy.\nTake the example below \n(fig 4.5):\nFIG 4.5 One of these is more identifiable than the other\nThe component on the left is unmistakably a select — we know that if we \nclick the input, or the arrow, we will see a dropdown with more options. The \ncomponent on the right, however, could be mistaken for a button, or it could \nbe overlooked entirely as a non-actionable, purely decorative element. If \nthis were an e-commerce website, can you afford for some users to miss this \ncomponent and leave without making a purchase?\nPatterns \nThese are the larger building blocks of a digital product. Patterns refer to \nrecurring or ever-present elements or practices throughout a product.",
      "metadata": {
        "startIndex": 81683,
        "endIndex": 82613,
        "chunkIndex": 105,
        "section": "7. Source of truth",
        "globalChunkIndex": 139
      }
    },
    {
      "id": "chunk-140",
      "text": "nent and leave without making a purchase?\nPatterns \nThese are the larger building blocks of a digital product. Patterns refer to \nrecurring or ever-present elements or practices throughout a product. A \npattern can often be comprised of established foundations and components \n\nDesIGn sYsteM MoDeL  89\n— for example, a card pattern may feature a header and a description, using a \ncouple of different text styles (foundations), and a button (component).\nExamples include: navigation, footer, modals, alerts, notifications, tables, feed \ncards, product cards, image galleries, carousels, feature or masthead areas, \npagination, breadcrumbs, and so on. The example below \n(fig 4.6) shows a \nresponsive image gallery pattern:\nFIG 4.6 Patterns example: image carousel\nEven specific layouts or content blocks can be patterns — for example, a \nsimple, repeatable lock-up of image and text, like the example pattern below \n(fig 4.7):\nFIG 4.7 Patterns example: simple modular layout of image and",
      "metadata": {
        "startIndex": 82413,
        "endIndex": 83401,
        "chunkIndex": 106,
        "section": "7. Source of truth",
        "globalChunkIndex": 140
      }
    },
    {
      "id": "chunk-141",
      "text": "content blocks can be patterns — for example, a \nsimple, repeatable lock-up of image and text, like the example pattern below \n(fig 4.7):\nFIG 4.7 Patterns example: simple modular layout of image and text\nPatterns can also refer to less tangible factors, such as your philosophy for \n\n90\nhow pages and content should load, your use of error states and animations, or \nwhat happens with empty states, onboarding, and guiding tips throughout a \nproduct.\nPatterns are often modular, meaning they’re designed to pair well with other \npatterns to tell marketing stories, sell products, present content, cross-sell, \nand so on.\nTemplates and Pages\nFoundations, components, and patterns make up the basis of this design \nsystem model, but their application is just as important as the elements \nthemselves. If foundations, components, and patterns are the building blocks, \nthen you need schematics to pull it all together, which is where the following \nadditional layers of the model come in.",
      "metadata": {
        "startIndex": 83201,
        "endIndex": 84188,
        "chunkIndex": 107,
        "section": "7. Source of truth",
        "globalChunkIndex": 141
      }
    },
    {
      "id": "chunk-142",
      "text": "themselves. If foundations, components, and patterns are the building blocks, \nthen you need schematics to pull it all together, which is where the following \nadditional layers of the model come in. \nWhen designing a mainly content-driven website (as opposed to digital \nproducts or apps, which I’ll address shortly), I refer to these additional layers \nas ‘templates’ and ‘pages’ \n(fig 4.8):\nFIG 4.8 The Foundations Model applied to a website\n\nDesIGn sYsteM MoDeL  91\nLet’s look at these two new layers in depth.\nTemplates\nIn digital terms, a template is a consistent layout that is used multiple times \nthroughout a website, and are populated with different content each time \nthey’re used. Common examples of templates include an article or a blog post.\nConsistency in web design is important for good user experience — not just \nfor style, but also for the way content is presented. It’s good practice to have \nas few templates as possible, so people can familiarise themselves with the",
      "metadata": {
        "startIndex": 83988,
        "endIndex": 84980,
        "chunkIndex": 108,
        "section": "7. Source of truth",
        "globalChunkIndex": 142
      }
    },
    {
      "id": "chunk-143",
      "text": "tant for good user experience — not just \nfor style, but also for the way content is presented. It’s good practice to have \nas few templates as possible, so people can familiarise themselves with the \ninterface as quickly as possible. If somebody needs to keep re-learning what’s \ngoing on — where to look or click for every new template they encounter — \nthey’re highly likely to get frustrated. And frustrated customers don’t stay \ncustomers very long!\nUsing fewer templates is also a consideration for development, maintenance, \nand scalability. The fewer templates you use, the easier and less expensive the \nbuild and maintenance will be. For example, adding a new employee profile \npage using an existing template is significantly faster and easier than building \na bespoke page for each new person you hire. Making global, sweeping changes \nto a website is easier when you update a single template, which automatically \nupdates multiple pages.",
      "metadata": {
        "startIndex": 84780,
        "endIndex": 85731,
        "chunkIndex": 109,
        "section": "7. Source of truth",
        "globalChunkIndex": 143
      }
    },
    {
      "id": "chunk-144",
      "text": "ier than building \na bespoke page for each new person you hire. Making global, sweeping changes \nto a website is easier when you update a single template, which automatically \nupdates multiple pages. Imagine what a nightmare it would be to make a global \nchange to the New York Times or BBC websites, if each of their articles had \na bespoke page design, as opposed to using the same, or a limited number of \ntemplate(s).\nPages\nPages are essentially the final application of the design system at work. They’re \nwhat your audience ultimately sees.\nA page is either the application of a template, or a bespoke one-off web page. \nSometimes it’s good for certain pages to differentiate and not come from a \ntemplate, such as when you need them to communicate a bespoke message \nor perform a specific function. Pages like the home page or a contact page are \ngood examples of bespoke pages.\nFor an example of the relationship between templates and pages, consider the \ndesign system I created for Club of",
      "metadata": {
        "startIndex": 85531,
        "endIndex": 86531,
        "chunkIndex": 110,
        "section": "7. Source of truth",
        "globalChunkIndex": 144
      }
    },
    {
      "id": "chunk-145",
      "text": "tion. Pages like the home page or a contact page are \ngood examples of bespoke pages.\nFor an example of the relationship between templates and pages, consider the \ndesign system I created for Club of the Waves, a website featuring surf artists \nand photographers, each of whom has their own unique profile page on the \nsite. \n\n92\nThe image below (fig 4.9) shows templates (only two) in the left column, and \npages to the right:\nFIG 4.9 Templates vs. pages (example: clubofthewaves.com)\nPageTemplate\nClub of the Waves has a bespoke home page, with no template applied to it — \nas seen in the first row of the image above. \nThe second row shows the template for an index of profiles, and two pages (to \nthe right of it) with that template applied to them. The third row shows the \ntemplate for individual profiles, and several pages (to the right of it) with that \ntemplate applied to them.\nIn Club of the Waves’ case, there are hundreds of pages running off the one \nprofile template.",
      "metadata": {
        "startIndex": 86331,
        "endIndex": 87315,
        "chunkIndex": 111,
        "section": "7. Source of truth",
        "globalChunkIndex": 145
      }
    },
    {
      "id": "chunk-146",
      "text": "ate for individual profiles, and several pages (to the right of it) with that \ntemplate applied to them.\nIn Club of the Waves’ case, there are hundreds of pages running off the one \nprofile template. It would be unrealistic to design and build a bespoke page for \nevery creative profile, and a nightmare to make global changes to each unique \npage. But with all the pages running off the one template, you need only update \n\nDesIGn sYsteM MoDeL  93\nthe one template to change every page — for example, if you wanted to add a \ncomments section or social sharing links to all profile pages.\nThe same logic applies to all aspects of a design system. For example, if you \nupdate a system component like a button, the change would be applied \neverywhere that button is used in the system. This is much easier than the \nlengthy and hazardous task of digging for and updating all of the buttons. The \nsystem at work!\nDesign systems in product design\nAs I stated before, the model’s terminology is flexible.",
      "metadata": {
        "startIndex": 87115,
        "endIndex": 88115,
        "chunkIndex": 112,
        "section": "7. Source of truth",
        "globalChunkIndex": 146
      }
    },
    {
      "id": "chunk-147",
      "text": "ier than the \nlengthy and hazardous task of digging for and updating all of the buttons. The \nsystem at work!\nDesign systems in product design\nAs I stated before, the model’s terminology is flexible. For example, where \nthe Foundations Model terminology we’ve covered thus far — foundations, \ncomponents, patterns, templates, and pages — works best for web design, \nthe following terminology is arguably more appropriate for product design \n(fig 4.10).\nFIG 4.10 The Foundations Model applied to product design\n‘Templates’ and ‘pages’ can be applicable to products too, but ‘features’ and \n‘screens’ are arguably more applicable terms when designing a system for a \nmore complex or dynamic digital product or app.\n‘User journeys’ map out the often complex interactions within a product’s \nfeatures. And ‘screens’ are snapshots in time of a product in use (i.e. a step in \nthe user journey). I’ll demonstrate this using a real product in a moment, but",
      "metadata": {
        "startIndex": 87915,
        "endIndex": 88867,
        "chunkIndex": 113,
        "section": "7. Source of truth",
        "globalChunkIndex": 147
      }
    },
    {
      "id": "chunk-148",
      "text": "ex interactions within a product’s \nfeatures. And ‘screens’ are snapshots in time of a product in use (i.e. a step in \nthe user journey). I’ll demonstrate this using a real product in a moment, but \n\n94\nfirst, consider this:\nWebsites are often about consuming content, and only include quite simple \ninteractions like clicking a button to go to a different page, submitting a form, \nfiltering a list to make a selection, or opening an accordion. Products and apps, \non the other hand, tend to be more multi-layered, with interactions that can go \nseveral layers (or steps) deep.\nFor example, a banking product might have a ‘screen’ dynamically created \nand tailored to a specific user account, user type, and preference settings. \nThis already sets it apart from a ‘page’, because the format and content of \nthese dynamic screens might have dozens of possible outcomes and resulting \nfeature sets. For example, a single screen in a banking product may include the \nability to transfer money between",
      "metadata": {
        "startIndex": 88667,
        "endIndex": 89666,
        "chunkIndex": 114,
        "section": "7. Source of truth",
        "globalChunkIndex": 148
      }
    },
    {
      "id": "chunk-149",
      "text": "tent of \nthese dynamic screens might have dozens of possible outcomes and resulting \nfeature sets. For example, a single screen in a banking product may include the \nability to transfer money between accounts, set up a wire transfer, pay a bill, \nview statements, download data, open a new account, and so on. \nWhere typical patterns or templates in web design are not so complicated, \neach of our banking example’s features may require more than one or two \nclicks to set in motion. Each feature can have a multi-step ‘user journey’ to \nperform certain tasks. In a way, you could look at features as being ‘super \npatterns’, but that name doesn’t hold much credibility. On the surface, a \nfeature is an assortment of foundations, components, and patterns — pulled \ntogether to perform a specific task(s). But each interactive part of a feature can \ngo several layers deep, creating more of a user journey.\nTo give a more specific example, let’s say a banking product has a feature \nthat enables you",
      "metadata": {
        "startIndex": 89466,
        "endIndex": 90466,
        "chunkIndex": 115,
        "section": "7. Source of truth",
        "globalChunkIndex": 149
      }
    },
    {
      "id": "chunk-150",
      "text": "k(s). But each interactive part of a feature can \ngo several layers deep, creating more of a user journey.\nTo give a more specific example, let’s say a banking product has a feature \nthat enables you to get directions to your local bank branch. A potential user \njourney for this feature might be:",
      "metadata": {
        "startIndex": 90266,
        "endIndex": 91266,
        "chunkIndex": 116,
        "section": "7. Source of truth",
        "globalChunkIndex": 150
      }
    },
    {
      "id": "chunk-151",
      "text": "states, error states, helpful tips to guide the user, micro-interactions, and so \non.\nThe bottom line is: digital products are complicated! It’s vital that your system \ninclude not just all of the elements involved in the example above (e.g. buttons, \nmodals, maps, pins, tooltips, etc.), but that it also maps out how a feature is \nused — showing all of the screens that add up to the user’s journey. (Doing this \n\nDesIGn sYsteM MoDeL  95\nmay also reveal some opportunities to simplify the experience!).\nTo reiterate my earlier point, despite this complexity, you still need a \nsomewhat simple model that people can get on board with. If ‘features’, \n‘screens’, and ‘user journeys’ don’t resonate with you, then re-work the model \nto work for your product and team. The main thing is not to overlook the \nvarious parts of the system that make up your products.\nA case study of a design system at work\nLet’s look at the design system I created for the Adobe Portfolio product (4.1) as \nan example.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 998,
        "chunkIndex": 0,
        "section": "7.   And finally, for each of the previous steps you could have multiple success",
        "globalChunkIndex": 151
      }
    },
    {
      "id": "chunk-152",
      "text": "ok the \nvarious parts of the system that make up your products.\nA case study of a design system at work\nLet’s look at the design system I created for the Adobe Portfolio product (4.1) as \nan example. This product has no pages to navigate. It’s a dynamic JavaScript-\nbased user interface, where the experience is made up of multiple features and \nnumerous potential user journeys.\nTo demonstrate, let’s break down the Adobe Portfolio product into a few \nsystem elements, mapped to our model:\nFoundation\nThe example below (fig 4.11) shows the brand colour palette used in the \nproduct.\nFIG 4.11 Foundation example: colour palette\n4.1 roomfive.net/adobe-portfolio/\n\n96\nComponent\nThe following image shows a few examples of components in the product \n(fig 4.12), including text inputs, checkboxes, toggles, and buttons. This is only \na very limited view of a few components, and not all their states are shown, \nbut notice the components also include things like placeholder states, hover \nstates, and",
      "metadata": {
        "startIndex": 798,
        "endIndex": 1796,
        "chunkIndex": 1,
        "section": "7.   And finally, for each of the previous steps you could have multiple success",
        "globalChunkIndex": 152
      }
    },
    {
      "id": "chunk-153",
      "text": "les, and buttons. This is only \na very limited view of a few components, and not all their states are shown, \nbut notice the components also include things like placeholder states, hover \nstates, and error states. We’ll cover this extensively later in this book. Also, \nnotice the only colours used are the colours we’ve just seen in our foundations \nexample \n(fig 4.11).\nFIG 4.12 Component examples: assorted form components and buttons\nPattern\nSome of the previous component examples can be seen in the following \nexample \n(fig 4.13) in a modal pattern. This example pattern is called a “Panel”, \nwhich is a modal — composed mostly of components like inputs, toggles, \nselects, and buttons — used throughout the product as a consistent vehicle \nfor performing various actions. The example spec shows the makeup of a \nPanel and a couple of variations of this pattern, including the “Basic Panel”, \n“Advanced Panel” (with navigation), and “Manage Panel” (a fixed height panel \nwith scrolling",
      "metadata": {
        "startIndex": 1596,
        "endIndex": 2588,
        "chunkIndex": 2,
        "section": "7.   And finally, for each of the previous steps you could have multiple success",
        "globalChunkIndex": 153
      }
    },
    {
      "id": "chunk-154",
      "text": "pec shows the makeup of a \nPanel and a couple of variations of this pattern, including the “Basic Panel”, \n“Advanced Panel” (with navigation), and “Manage Panel” (a fixed height panel \nwith scrolling content).\n\nDesIGn sYsteM MoDeL  97\nNote: It’s good practice to name your patterns. For example, our Panel \npattern’s technical name is a “modal”, but you may find additional use cases \nfor using a modal throughout a product, such as for warnings or messaging. \nIt’s far more efficient to say “Basic Panel” or “Advanced Panel” in a product \ndiscussion, a GitHub Issue, or a conversation with a developer, than it is to \nattempt to describe it: “The modal”. “Which one?”. “The one with the navigation”. \nInstead, give it a name, document it, and use that name going forward. Over \ntime people on your team will identify patterns by name, and if not, your \ndocumentation is where they look to find their answer.",
      "metadata": {
        "startIndex": 2388,
        "endIndex": 3297,
        "chunkIndex": 3,
        "section": "7.   And finally, for each of the previous steps you could have multiple success",
        "globalChunkIndex": 154
      }
    },
    {
      "id": "chunk-155",
      "text": ", give it a name, document it, and use that name going forward. Over \ntime people on your team will identify patterns by name, and if not, your \ndocumentation is where they look to find their answer. Don’t worry, we’ll cover \ndocumentation later in this book.\nFIG 4.13 Pattern example: a modal pattern called a “Panel”\n\n98\nFeature\nThe big difference between a pattern and a feature is their complexity. A \npattern might perform one or two functions, and can be deployed in a number \nof different ways as a reusable element. A feature can perform many functions \nor one specific function, and may be comprised of multiple patterns.\nThe example below \n(fig 4.14) is a spec for the “Manage Content” feature from \nthe Adobe Portfolio product, which uses the “Manage Panel” pattern \n(fig 4.13) \nfrom our previous example. In this case, the feature is made up of many \nfoundations and components, but is using just one pattern.\nFIG 4.14 Feature example: a spec for a feature called “Manage",
      "metadata": {
        "startIndex": 3097,
        "endIndex": 4081,
        "chunkIndex": 4,
        "section": "7.   And finally, for each of the previous steps you could have multiple success",
        "globalChunkIndex": 155
      }
    },
    {
      "id": "chunk-156",
      "text": ".13) \nfrom our previous example. In this case, the feature is made up of many \nfoundations and components, but is using just one pattern.\nFIG 4.14 Feature example: a spec for a feature called “Manage Content”\nInteraction wise, there are many things that can be done with this “Manage \nContent” feature. Contained within the “Panel” pattern, you can drag and drop \nelements, toggle things off and on, access menus, add content, delete content, \nedit content, and so on. These specifications (or — as I call them — ‘specs’ for \nshort) map out those different interactions and states.\nNote: You’ve seen in the previous three examples — for features, patterns, and \ncomponents — that I’ve designed and created specifications for all the various \nstates and interactions. We will cover this extensively throughout this book, \nbut for now, some friendly words of advice:\nWeb and product designers often fail to mock up different states of \ncomponents and patterns or to fully consider the interactions,",
      "metadata": {
        "startIndex": 3881,
        "endIndex": 4878,
        "chunkIndex": 5,
        "section": "7.   And finally, for each of the previous steps you could have multiple success",
        "globalChunkIndex": 156
      }
    },
    {
      "id": "chunk-157",
      "text": "throughout this book, \nbut for now, some friendly words of advice:\nWeb and product designers often fail to mock up different states of \ncomponents and patterns or to fully consider the interactions, pitfalls, and \npotential user journeys of the products they design. For example, designers \nwill often hand over mockups of a form without showing how an input should \nlook if there’s an error, or what the submit button looks like on-hover, or \nwhat happens once the form has been submitted? I say this as a designer \n\nDesIGn sYsteM MoDeL  99\nwho’s worked with other designers who are guilty of this, and as a frustrated \ndeveloper who has built websites (that someone else designed) where these \nthings haven’t been considered or accounted for.\nDon’t assume the developers will figure it out. It’s not their job, it’s the \ndesigner’s job. And especially don’t leave it to chance, and risk later finding \nout your customers are struggling to use your product.",
      "metadata": {
        "startIndex": 4678,
        "endIndex": 5638,
        "chunkIndex": 6,
        "section": "7.   And finally, for each of the previous steps you could have multiple success",
        "globalChunkIndex": 157
      }
    },
    {
      "id": "chunk-158",
      "text": "he developers will figure it out. It’s not their job, it’s the \ndesigner’s job. And especially don’t leave it to chance, and risk later finding \nout your customers are struggling to use your product. This ambiguity leads to \nfrustration, confusion, and inconsistencies in the build and user experience.\nScreen\nA “screen” really highlights the difference between designing a digital product \nand a website. Websites (often) have a definitive set of pages, and we know \nwhat they will look like as they are either based on a template or are a bespoke \ndesign. Products, on the other hand, can have dynamically created content, \nbuilt up of features that are tailored to the user. \nFIG 4.15 Screen example: a product scenario mockup\nThe Adobe Portfolio product we’ve been reviewing in this case study has no \n“pages”. It’s a product that people use to build personal portfolio websites for \ntheir work. No two “screens” will ever look the same — they are unique to \nthe person using the product.",
      "metadata": {
        "startIndex": 5438,
        "endIndex": 6431,
        "chunkIndex": 7,
        "section": "7.   And finally, for each of the previous steps you could have multiple success",
        "globalChunkIndex": 158
      }
    },
    {
      "id": "chunk-159",
      "text": "tudy has no \n“pages”. It’s a product that people use to build personal portfolio websites for \ntheir work. No two “screens” will ever look the same — they are unique to \nthe person using the product. But from a product design perspective, it’s still \nvaluable to visualise what those screens could look like in order to stress test \nand design for all variables; this also allows us to give the developers a better \n\n100\nidea of what they’re building (in addition to our design system elements and \nspecs).\nA screen is the culmination of all your foundations, components, patterns, \nand features coming together. It’s a snapshot in time of someone using your \nproduct, or a step in their user journey.\nThe image \n(fig 4.15) is a design mockup simulating a feature in use — in this \ncase, a “Colour Picker” pattern is being used to edit a “Masthead” feature of \nthe product. This is different from a traditional mockup or “page” design in \nweb design, as it’s only showing a pattern in the context of",
      "metadata": {
        "startIndex": 6231,
        "endIndex": 7231,
        "chunkIndex": 8,
        "section": "7.   And finally, for each of the previous steps you could have multiple success",
        "globalChunkIndex": 159
      }
    },
    {
      "id": "chunk-160",
      "text": "cker” pattern is being used to edit a “Masthead” feature of \nthe product. This is different from a traditional mockup or “page” design in \nweb design, as it’s only showing a pattern in the context of one part of a user’s \njourney. Still, it’s a useful way of depicting how your system elements will come \ntogether in the product.\nUser journey\nA user journey, strictly speaking, is not part of our design system model. But, \nas stated before, a good product designer should map out how a product — or a \nfeature of the product — could be used. There are many ways you can visually \nconvey user journeys and the specific steps a user can take. You could, for \nexample:\n• Build a basic prototype you can test for real.\n• Simulate interactions in an interactive prototype using design software.\n• Create a still image step-by-step simulation of the product in action.\n• Map out all the potential actions a user could take in a decision tree diagram \nor flow chart.\n• Design a detailed, annotated",
      "metadata": {
        "startIndex": 7031,
        "endIndex": 8023,
        "chunkIndex": 9,
        "section": "7.   And finally, for each of the previous steps you could have multiple success",
        "globalChunkIndex": 160
      }
    },
    {
      "id": "chunk-161",
      "text": "Create a still image step-by-step simulation of the product in action.\n• Map out all the potential actions a user could take in a decision tree diagram \nor flow chart.\n• Design a detailed, annotated specification showing all interactions and \nstates, similar to the examples shown here \n(fig 4.16 - 4.18).\nThe following design mockup \n(fig 4.16) maps out the user journey for the \n“Background Image” feature of the Adobe Portfolio product, which uses the \n“Basic Panel” pattern \n(fig 4.13) we saw in our earlier example.\nSimilarly, \nfig 4.17 maps out the various steps to using the “Add Content” \nfeature, which uses the “Manage Panel” pattern \n(fig 4.13).\nAnd finally, \nfig 4.18 maps out the potential steps a user could take while using \na different feature of the product, this time using the “Advanced Panel” pattern \n(fig 4.13).\nIt’s my hope that seeing how the elements of the Foundations Model came \ntogether in the Adobe Portfolio product design gave you a sense for how you",
      "metadata": {
        "startIndex": 7823,
        "endIndex": 8809,
        "chunkIndex": 10,
        "section": "7.   And finally, for each of the previous steps you could have multiple success",
        "globalChunkIndex": 161
      }
    },
    {
      "id": "chunk-162",
      "text": "using the “Advanced Panel” pattern \n(fig 4.13).\nIt’s my hope that seeing how the elements of the Foundations Model came \ntogether in the Adobe Portfolio product design gave you a sense for how you \n\nDesIGn sYsteM MoDeL  101\nDesIGn sYsteM MoDeL  101\nFIG 4.18 Map out the interactions and steps a user could take\nFIG 4.17 Annotations help to identify what’s what\nFIG 4.16 User journey example: a spec showing potential user steps\n\n102\ncan adapt the model to your project. Keep in mind, you can always adapt the \nmodel to make it yours, this is just a guide to get you started.\nAllow for flexibility\nA really great design system is flexible enough to have room for creativity, and \nbe effectively applied to different scenarios. The more rigid the system, the \nmore likely designers are to introduce rogue elements. This is a slippery slope \ntowards the system failing, and the surest path to designers and developers \nfalling out.\nIt’s also healthy to think of and use terminology like ‘guidelines’,",
      "metadata": {
        "startIndex": 8609,
        "endIndex": 9608,
        "chunkIndex": 11,
        "section": "7.   And finally, for each of the previous steps you could have multiple success",
        "globalChunkIndex": 162
      }
    },
    {
      "id": "chunk-163",
      "text": "ogue elements. This is a slippery slope \ntowards the system failing, and the surest path to designers and developers \nfalling out.\nIt’s also healthy to think of and use terminology like ‘guidelines’, as opposed \nto ‘rules’. Rules feel like laws that can’t be broken. Your average designer \nwon’t like working under these constraints, so it’s important your system is \nadaptable and leaves room for creativity.\nHowever, some system elements do benefit from being more rigid for the sake \nof consistency, ease of navigation, user experience, or to protect the brand. \nFor example, on most websites, patterns like a ‘global navigation’ or ‘footer’ \nwill likely never change as you navigate page-to-page — nor should they, as \nit can be disruptive to the user journey and experience. Similarly, a ‘related \nitems’ pattern in an e-commerce product, or ‘related posts’ in a blog will be \nthe same design on every page (only the content changes).",
      "metadata": {
        "startIndex": 9408,
        "endIndex": 10348,
        "chunkIndex": 12,
        "section": "7.   And finally, for each of the previous steps you could have multiple success",
        "globalChunkIndex": 163
      }
    },
    {
      "id": "chunk-164",
      "text": "ive to the user journey and experience. Similarly, a ‘related \nitems’ pattern in an e-commerce product, or ‘related posts’ in a blog will be \nthe same design on every page (only the content changes). And foundations \nwise, sticking to a set of defined text styles and colours will make for a more \ncoherent end product and experience.\nIt’s also beneficial for some system elements to be adaptable — or to \nhave multiple variations — to cover different scenarios. This flexibility or \nFIG 4.19 Four variants of a button component\n\nDesIGn sYsteM MoDeL  103\nadaptability cuts down on the need to bypass the system or go rogue, adding \nnew elements.\nFor example, a component like a button could come in a small and large size, \nin multiple colours, or have a solid background versus a border outline to \ncommunicate different actions or hierarchy of importance.\nfig 4.19 is an example of different buttons from the same design system.",
      "metadata": {
        "startIndex": 10148,
        "endIndex": 11079,
        "chunkIndex": 13,
        "section": "7.   And finally, for each of the previous steps you could have multiple success",
        "globalChunkIndex": 164
      }
    },
    {
      "id": "chunk-165",
      "text": "iple colours, or have a solid background versus a border outline to \ncommunicate different actions or hierarchy of importance.\nfig 4.19 is an example of different buttons from the same design system. While \ndifferent, they clearly belong to the same (brand) family and share similar \nspecifications and foundational characteristics.\nSimilarly, a component like a select could have a multi-select variant to cover \nscenarios where the user can select one or multiple options, as demonstrated \nin \nfig 4.20.\nFIG 4.20 Two variants of a select component\n\n104\nDocument the why, when, and how\nWe’ll cover documentation more thoroughly later in this book, but for now, it’s \nimportant to state: you should document guidelines, specifications, and use \ncases for all your foundations, components, patterns, templates, and features.\nDesign system documentation acts as a source of truth. By documenting the \ndesign thinking behind each element, you leave nothing to assumption or \nmisinterpretation.",
      "metadata": {
        "startIndex": 10879,
        "endIndex": 11870,
        "chunkIndex": 14,
        "section": "7.   And finally, for each of the previous steps you could have multiple success",
        "globalChunkIndex": 165
      }
    },
    {
      "id": "chunk-166",
      "text": "tterns, templates, and features.\nDesign system documentation acts as a source of truth. By documenting the \ndesign thinking behind each element, you leave nothing to assumption or \nmisinterpretation. Demonstrating use cases is also great for guidance, as well \nas on-boarding new team members. Seeing is believing, so lead by example \nand show your team the thinking that went into your design choices.\nBetter together\nEverything we’ve covered in this chapter highlights the importance of \nteamwork, communication, and not designing or building anything in isolation \n— from the terminology we use, to creating and iterating on the system \nelements, to documenting how, when, and why they’re used.\nMy hope is that with the Foundations Model as a guide, you’ll now have a \nsimple framework to kickstart a great design system with your team.\nNow that we’re all on the same page regarding the model and terminology we’ll \nuse going forward, we’re (almost) ready to start creating a design system.",
      "metadata": {
        "startIndex": 11670,
        "endIndex": 12665,
        "chunkIndex": 15,
        "section": "7.   And finally, for each of the previous steps you could have multiple success",
        "globalChunkIndex": 166
      }
    },
    {
      "id": "chunk-167",
      "text": "kstart a great design system with your team.\nNow that we’re all on the same page regarding the model and terminology we’ll \nuse going forward, we’re (almost) ready to start creating a design system.\n\nDesIGn sYsteM MoDeL  105DesIGn sYsteM MoDeL  105\nThe first app I \nopened when we \nstarted wasn’t \nSketch. It was Google \nDocs. You need to \nclearly articulate \nthe problems you’re \nsolving first.\n\n106\nGetting started\n106\n05\nGett— \ning \nstar— \nted\nLAYInG tHe FounDAtIons\n\nGettInG stArteD  107\nBy now, hopefully, you should understand the importance of getting your \nwhole team excited about the value of a design system, and involving everyone \nin the process.\nWe’re not ready to jump into design just yet. First, you (and your team) need \nto be clear about what your goals for creating a design system are. By doing \nthis, you are further laying the strong foundations needed to build a successful \ndesign system and product(s).\nStart by identifying the problems\nMuch of design is problem-solving.",
      "metadata": {
        "startIndex": 12465,
        "endIndex": 13463,
        "chunkIndex": 16,
        "section": "7.   And finally, for each of the previous steps you could have multiple success",
        "globalChunkIndex": 167
      }
    },
    {
      "id": "chunk-168",
      "text": "tem are. By doing \nthis, you are further laying the strong foundations needed to build a successful \ndesign system and product(s).\nStart by identifying the problems\nMuch of design is problem-solving. So, first things first, you and your team \nneed to investigate: what problems are you solving?\nAs tempting as it is to see design systems as a vanity project, your goal isn’t — \nor shouldn’t be, entirely — to create something beautiful. If you get everything \nelse right, you will probably end up with something beautiful, but don’t race \nto the finish line — it’s more of a marathon than a sprint. Creating a design \nsystem is a large investment of time, by a lot of people, so you need a good set \nof reasons for doing it. And those reasons (or problems) will help you identify a \nway forward, your priorities, and which approach to creating a design system \nis best for your company, product, and team.\nConsider this quote from Nick Stamas \n(5.1), my former colleague I mentioned \nin the “Selling",
      "metadata": {
        "startIndex": 13263,
        "endIndex": 14263,
        "chunkIndex": 17,
        "section": "7.   And finally, for each of the previous steps you could have multiple success",
        "globalChunkIndex": 168
      }
    },
    {
      "id": "chunk-169",
      "text": "priorities, and which approach to creating a design system \nis best for your company, product, and team.\nConsider this quote from Nick Stamas \n(5.1), my former colleague I mentioned \nin the “Selling a Design System” chapter of this book, as he reflected on the \nbeginning of a journey that led to creating a design system:\n“The first app I opened when we started wasn’t Sketch. It was Google \nDocs. You need to clearly articulate the problems first. Be specific. \nWhere are things breaking down? Where are the biggest pain points? \nA design system doesn’t exist in a vacuum, it needs to solve problems \nfor everyone.”\nStart by involving your whole team — designers, developers, and product \nmanagers — in an open and frank discussion about where people feel the \nproduct or the team’s processes are going wrong. Depending on the size of \nyour team, and locations of the people working on your product(s), you could \nget everybody together, or break into smaller groups, and have team leaders \n5.1",
      "metadata": {
        "startIndex": 14063,
        "endIndex": 15061,
        "chunkIndex": 18,
        "section": "7.   And finally, for each of the previous steps you could have multiple success",
        "globalChunkIndex": 169
      }
    },
    {
      "id": "chunk-170",
      "text": "e going wrong. Depending on the size of \nyour team, and locations of the people working on your product(s), you could \nget everybody together, or break into smaller groups, and have team leaders \n5.1 nickstamas.com\n\n108\nmeet to discuss their findings. Document everything you discuss in a Google \nDoc (or something similar), so you can easily share it with the whole group.\nSystem design is a team effort, so work as a team. Make everyone feel like their \nopinion is important, and their voice is heard. The easiest way to get people to \nbelieve in the system is to involve them.\nWhen you discuss your problems as a team, you’ll also have a better \nunderstanding of the extent of the work that needs to be done. You may find \nyou already have the basis of a design system that’s just gone a little astray over \ntime, and it may not require much work to consolidate the design and code, \ndocument it, and grow from there.\nA designer might look at a problem and think: “we’re screwed, let’s just start",
      "metadata": {
        "startIndex": 14861,
        "endIndex": 15861,
        "chunkIndex": 19,
        "section": "7.   And finally, for each of the previous steps you could have multiple success",
        "globalChunkIndex": 170
      }
    },
    {
      "id": "chunk-171",
      "text": "tray over \ntime, and it may not require much work to consolidate the design and code, \ndocument it, and grow from there.\nA designer might look at a problem and think: “we’re screwed, let’s just start \nagain!”, but a developer might look at the same problem and think: “actually, \nif we do X then we’ll be okay”. And vice versa. This is why it’s valuable to get \neveryone’s perspective.\nThe goal here, ultimately, is to find the common pain points in everything from \nthe product, design and build processes, team culture, and user feedback.\nFor example, some broader takeaways from this discussion could be things \nlike:\n• Developers hate it when designers reinvent the wheel.\n• Product managers want to ship updates and new features faster.\n• Designers are sick of the build not looking like their mockups.\n• Our users are frustrated by X, Y, Z.\nYou’re probably familiar with at least one of these frustrations...",
      "metadata": {
        "startIndex": 15661,
        "endIndex": 16576,
        "chunkIndex": 20,
        "section": "7.   And finally, for each of the previous steps you could have multiple success",
        "globalChunkIndex": 171
      }
    },
    {
      "id": "chunk-172",
      "text": "s and new features faster.\n• Designers are sick of the build not looking like their mockups.\n• Our users are frustrated by X, Y, Z.\nYou’re probably familiar with at least one of these frustrations... It’s pretty \ncommon stuff, and all issues that design systems can help fix.\nMore specific takeaways could be things like:\n• Why do we have 13 different colours in the product?\n• We want to explore a better way of doing X.\n• How can we improve conversion on this form?\n• We need a consistent set of buttons.\n• Our icons have no consistent style.\n• We want to clear time to refactor the code.\n• We want to introduce more animation in the product.\n• We need a consistent set of design components to work with.\n\nGettInG stArteD  109\nOnce you know what the problems are, you’re better prepared to come up with \na plan of attack for solving them.\nNote: Much of the above pre-supposes you’re working on an existing product.",
      "metadata": {
        "startIndex": 16376,
        "endIndex": 17293,
        "chunkIndex": 21,
        "section": "7.   And finally, for each of the previous steps you could have multiple success",
        "globalChunkIndex": 172
      }
    },
    {
      "id": "chunk-173",
      "text": "tArteD  109\nOnce you know what the problems are, you’re better prepared to come up with \na plan of attack for solving them.\nNote: Much of the above pre-supposes you’re working on an existing product. \nBut even if you’re launching a brand new company or product, it’s still \nworth identifying what you want to achieve, and the problems your product \nand design system aims to address. Also, identifying within your team the \nproblems that people have faced in the past — and the potential issues that \ncould arise going forward — can provide valuable insights you can use to set \nyour new work up for success.\nWhere do we go from here?\nThe multi-million dollar question! There’s no one-size-fits-all solution. Now \nyou’ve identified the problems, you have to decide what to do about them. \nChances are, if you’re having discussions like this in the first place, you’ve \nmore or less already decided — you’re going to create a design system.",
      "metadata": {
        "startIndex": 17093,
        "endIndex": 18033,
        "chunkIndex": 22,
        "section": "7.   And finally, for each of the previous steps you could have multiple success",
        "globalChunkIndex": 173
      }
    },
    {
      "id": "chunk-174",
      "text": "lems, you have to decide what to do about them. \nChances are, if you’re having discussions like this in the first place, you’ve \nmore or less already decided — you’re going to create a design system. Now, \nthe harder part is deciding how to go about it.\nLooking at this  simplistically ,   there are two approaches you can take:",
      "metadata": {
        "startIndex": 17833,
        "endIndex": 18833,
        "chunkIndex": 23,
        "section": "7.   And finally, for each of the previous steps you could have multiple success",
        "globalChunkIndex": 174
      }
    },
    {
      "id": "chunk-175",
      "text": "The next two chapters are dedicated to these approaches, but before we go into \ndetail about the process for each, I want to explain in brief what they are.\nThe iterative approach\nThe iterative approach is the process of gradually replacing what you have now \nwith a new system. Or, if this is a new product, it’s the process of launching the \nproduct in stages (i.e. more of a soft launch, as opposed to a hard launch). If you \nare working on an existing product, this could mean consolidating what you \nhave currently, then gradually replacing what you have with something new. \nThis process happens iteratively — so foundation by foundation, component \nby component, pattern by pattern, feature by feature, template by template, \nand so on.\nRemember back in the chapter on “Laying the Foundations” when I talked \nabout creating a scaffolding and gradually remodeling, as opposed to \ndemolishing what you have and starting from scratch?",
      "metadata": {
        "startIndex": 0,
        "endIndex": 939,
        "chunkIndex": 0,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 175
      }
    },
    {
      "id": "chunk-176",
      "text": "on.\nRemember back in the chapter on “Laying the Foundations” when I talked \nabout creating a scaffolding and gradually remodeling, as opposed to \ndemolishing what you have and starting from scratch? That’s what you’re doing \nwith an iterative approach.\n\n110110\nAn iterative \napproach might \nonly bring small \nwins at first — but a \nsmall win can make \na huge difference \nto a product’s user \nexperience, and your \nteam culture.\n\nGettInG stArteD  111\nWith this approach, you start by conducting visual and code audits (we’ll cover \nthis in the next chapter) to discover the problem areas, and iteratively fix them. \nYou focus on small areas of the product at a time, gradually working your way \nthrough the whole product — designing, building, and documenting a design \nsystem as you go.\nThis approach can be disruptive to the product’s user experience and \naesthetic, but less disruptive to your business and roadmap.",
      "metadata": {
        "startIndex": 739,
        "endIndex": 1658,
        "chunkIndex": 1,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 176
      }
    },
    {
      "id": "chunk-177",
      "text": "t — designing, building, and documenting a design \nsystem as you go.\nThis approach can be disruptive to the product’s user experience and \naesthetic, but less disruptive to your business and roadmap. It can also be a \nfrustrating process, as progress can be slow.\nThe advantage to the iterative approach is that you’re able to start small and \ntackle your biggest pain points first. This might bring some immediate relief \nto a more immediate problem, such as a user experience problem, a process \nproblem, or a sticking point for designers and developers on your team.\nStarting with the iterative approach might only bring small wins at first — \nbut a small win can make a huge difference to a product’s user experience, \nand your team culture. A positive start can have a profound impact on an \norganisation’s positivity towards — and belief in — a design system as a \nworthwhile investment of their time going forward.",
      "metadata": {
        "startIndex": 1458,
        "endIndex": 2380,
        "chunkIndex": 2,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 177
      }
    },
    {
      "id": "chunk-178",
      "text": "and your team culture. A positive start can have a profound impact on an \norganisation’s positivity towards — and belief in — a design system as a \nworthwhile investment of their time going forward. This proved effective at \nGitHub \n(5.2), who said of their design system process:\n“Tackling our biggest pain points and working on tasks that \nprovided high value to designers and developers, helped us start to \nbuild recognition and show the value of design systems.”\nWe’ll delve more into the iterative approach in the next chapter, but for now it’s \nworth considering if this might be the best way for your team to start creating \na design system. Alternatively, you could try:\nThe wholesale approach\nThe wholesale approach is essentially starting from scratch — either because \nyou’re designing a new product without any existing systems in place, or \nbecause you’ve decided to tear down what you have and start again.\nTaking a wrecking ball to your existing design is arguably a more extreme",
      "metadata": {
        "startIndex": 2180,
        "endIndex": 3177,
        "chunkIndex": 3,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 178
      }
    },
    {
      "id": "chunk-179",
      "text": "g a new product without any existing systems in place, or \nbecause you’ve decided to tear down what you have and start again.\nTaking a wrecking ball to your existing design is arguably a more extreme \noption, but it has its advantages. You avoid the potential ‘Frankenstein \nMonster problem’ of the iterative approach, which could protect your brand \n5.2 medium.com/@broccolini/design-systems-at-github-c8e5378d2542\n\n112\nand user experience. Changes will be widespread and coherent, as opposed \nto the ‘bitty’ experience that can happen when things are tweaked iteratively. \nAlso, you’ll ultimately launch with a beautiful new product, which could be a \ngreat marketing opportunity!\nHowever, a big undertaking like this could be more disruptive to your \nbusiness. It’s likely any roadmap of new feature releases or improvements \nwill more or less be put on hold while you undertake a redesign. This is why \nit’s important to involve product managers and other business stakeholders \nin design system",
      "metadata": {
        "startIndex": 2977,
        "endIndex": 3977,
        "chunkIndex": 4,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 179
      }
    },
    {
      "id": "chunk-180",
      "text": "re releases or improvements \nwill more or less be put on hold while you undertake a redesign. This is why \nit’s important to involve product managers and other business stakeholders \nin design system talks, as well as designers and developers. For example, \nsomeone outside the design and development teams could easily say: “if it \nain’t broke, don’t fix it” — so to sell them on a wholesale redesign, you’ll need to \nconvince them of just how broken things are. \nIf you’re considering condemning your current design and building something \nnew, be prepared to answer the following questions:\n• Will redesigning solve a business problem?\n• Has your research shown that your users are unhappy?\n• Is your product underperforming on certain metrics?\n• Are you rebranding to reach a new audience?\n• Does your brand need to evolve in line with its growth?\n• Or are your designers just bored? (Joking, not joking).\nBe smart about which approach you choose\nA totally new design might look great in your",
      "metadata": {
        "startIndex": 3777,
        "endIndex": 4774,
        "chunkIndex": 5,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 180
      }
    },
    {
      "id": "chunk-181",
      "text": "oes your brand need to evolve in line with its growth?\n• Or are your designers just bored? (Joking, not joking).\nBe smart about which approach you choose\nA totally new design might look great in your portfolio, a Medium article, or a \nDribbble post, but it might also have a negative affect on your business. Your \ncustomers come first, so don’t lose sight of what affect your new design system \nmight have on their behaviour and their retention.\nThink about websites like Amazon, which has largely looked the same for \nyears. Given their enormous wealth, one would think they could easily afford \na huge wholesale redesign. Instead, Amazon employs more of an iterative \napproach. They refine and test different design changes over time. Their \nproduct and design system evolves, but the user doesn’t always notice. \nThere’s a very good reason why companies like Amazon don’t take a wholesale \napproach, as the unknown factor of how their customers will respond to a \nradical redesign is far too",
      "metadata": {
        "startIndex": 4574,
        "endIndex": 5570,
        "chunkIndex": 6,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 181
      }
    },
    {
      "id": "chunk-182",
      "text": "sn’t always notice. \nThere’s a very good reason why companies like Amazon don’t take a wholesale \napproach, as the unknown factor of how their customers will respond to a \nradical redesign is far too great a risk. \n5.3 vanityfair.com/news/2018/05/snapchat-publishers-discover-redesign\n\nGettInG stArteD  113\nA wholesale redesign is a gamble — it could make or break your business. \nTake Snapchat’s 2018 redesign, which Vanity Fair described as “cataclysmic” \n(5.3). More than 1.25 million people signed a petition urging Snap to undo \ntheir update, they lost 2% of their daily active users (some 3 million users), and \ntheir stock price bombed! I can only imagine how bad those days were for their \nproduct teams.\nThe risk of taking the wholesale approach is especially high for e-commerce \nwebsites and digital consumer products that people frequently use; it’s less of \nan issue for marketing based websites or products with lower repeat visitors.",
      "metadata": {
        "startIndex": 5370,
        "endIndex": 6319,
        "chunkIndex": 7,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 182
      }
    },
    {
      "id": "chunk-183",
      "text": "roach is especially high for e-commerce \nwebsites and digital consumer products that people frequently use; it’s less of \nan issue for marketing based websites or products with lower repeat visitors. \nHumans are creatures of habit — we don’t always like change.\nAn iterative approach is less disruptive and therefore can be safer, but \nsometimes a wholesale brand refresh can have a positive effect — look at \nbrands like Airbnb, whose new design system and accompanying redesign \n(circa 2016?) set a new standard for iOS app design, and helped them continue \nto grow as a successful business. You need to weigh up your options, and their \npotential risks and rewards.\nChoices, choices\nIt very much depends on the size and complexity of your product, team, and \naudience — as well as the nature of your brand — as to which approach is \nbetter, more expensive, disruptive, time-consuming, or worthwhile.\nBoth approaches divert from business-as-usual tasks.",
      "metadata": {
        "startIndex": 6119,
        "endIndex": 7075,
        "chunkIndex": 8,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 183
      }
    },
    {
      "id": "chunk-184",
      "text": "and \naudience — as well as the nature of your brand — as to which approach is \nbetter, more expensive, disruptive, time-consuming, or worthwhile.\nBoth approaches divert from business-as-usual tasks. While an iterative \napproach can be undertaken largely under the radar and requires less \nstakeholder support, a wholesale approach will require more serious buy-in \nfrom multiple stakeholders, as it will suck up a lot of resources, and arguably \ncarries greater risk.\nAs you read through the following two chapters — delving more into each of \nthe iterative and wholesale approaches — you’ll no doubt conclude there are \ncommon elements to both, and you’d be correct. The word “holistic” is an \nimportant theme and consideration in both approaches, which we’ll explore. \nThe answer for your company might not be to adopt one approach or the other, \nbut to apply lessons from both approaches. In fact, I would recommend doing \na mix of the two!\nLet’s start by looking at the iterative approach.",
      "metadata": {
        "startIndex": 6875,
        "endIndex": 7871,
        "chunkIndex": 9,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 184
      }
    },
    {
      "id": "chunk-185",
      "text": "any might not be to adopt one approach or the other, \nbut to apply lessons from both approaches. In fact, I would recommend doing \na mix of the two!\nLet’s start by looking at the iterative approach.\n\n114\nAn iterative approach\n114\n06\nAn \niter— \native \napp—\nroach\nLAYInG tHe FounDAtIons\n\nAn IterAtIVe ApproACH  115\nWith this approach, you start by conducting visual and code audits to \ndiscover the problem areas. Next, focus on small areas of the product at a \ntime, gradually working your way through the whole product — re-designing, \nbuilding, and documenting a design system as you go.\nWhile this is more of a piecemeal approach, it is still important to not lose \nsight of the design holistically — to consider how everything will work \ntogether.\nFind your team\nYou’re not going to get far on your own. Find designers who are excited about \nmaking the best product! Find engineers who seem most excited about the \nidea of a system — or the front-end code — and make them your new best",
      "metadata": {
        "startIndex": 7671,
        "endIndex": 8660,
        "chunkIndex": 10,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 185
      }
    },
    {
      "id": "chunk-186",
      "text": "far on your own. Find designers who are excited about \nmaking the best product! Find engineers who seem most excited about the \nidea of a system — or the front-end code — and make them your new best \nfriends!\nIn 2017, at a design system meetup in New York City, I watched as Diana \nMounter \n(6.1) — a design system lead at GitHub — talked about how in the \nearly days of creating the Primer design system  \n(6.2), they formed a small task \nforce who met regularly to discuss, discover, and plan to solve problem areas. \nThey reviewed code. They took action on making incremental improvements, \nconsolidating their system, and making the system more accessible to their \ndesign team.\nDiana’s article, Design Systems at GitHub \n(6.3), is an excellent insight into \ndesign systems:\n“There weren’t obvious underlying systems connecting all the pieces \ntogether. I knew things could be better and I was enthusiastic about \nmaking improvements — I quickly discovered I wasn’t the only one \nthat felt this",
      "metadata": {
        "startIndex": 8460,
        "endIndex": 9460,
        "chunkIndex": 11,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 186
      }
    },
    {
      "id": "chunk-187",
      "text": "us underlying systems connecting all the pieces \ntogether. I knew things could be better and I was enthusiastic about \nmaking improvements — I quickly discovered I wasn’t the only one \nthat felt this way. There were several folks working on efforts to \nimprove things, but weren’t working together. With support from \ndesign leads, a group of us started to meet regularly to discuss \nimprovements and prioritize work — this was the beginning of the \ndesign systems team.”\n6.1 broccolini.net\n6.2 primer.style/css\n6.3 medium.com/@broccolini/design-systems-at-github-c8e5378d2542\n\n116\nOnce you’ve found your team: a good way to get going is to conduct interface \naudits.\nInterface audits\n‘Interface audit’ is a term with potentially different definitions. So for the sake \nof clarity — in this book — consider that:\n• An ‘interface audit’ is a broad term for conducting audits on a digital \nproduct.\n• A ‘visual audit’ is a design-based audit of what you can see in a digital \nproduct, focussed on",
      "metadata": {
        "startIndex": 9260,
        "endIndex": 10255,
        "chunkIndex": 12,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 187
      }
    },
    {
      "id": "chunk-188",
      "text": "— consider that:\n• An ‘interface audit’ is a broad term for conducting audits on a digital \nproduct.\n• A ‘visual audit’ is a design-based audit of what you can see in a digital \nproduct, focussed on foundations, components, and patterns.\n• You could focus the scope of a visual audit, and do only a ‘pattern audit’ or a \n‘component audit’.\n• A ‘code audit’ is an audit of what you can’t see, but what makes everything \nwork behind the scenes: CSS, HTML, JavaScript, and so on.\n• A ‘colour audit’ takes stock of colours used across all digital properties.\n• A ‘content audit’ maps out what you’re communicating and where.\nEssentially, an ‘audit’ is whatever you need it to be. It’s an investigation, and a \ngreat starting point that leads to larger discussions, actions, or projects.\nColour audits\nYou might be surprised by how many rogue colours you have in your product, \nbut the good news is, this is one of the simplest things to action.\nFirst, you need to do a colour audit of all websites and",
      "metadata": {
        "startIndex": 10055,
        "endIndex": 11054,
        "chunkIndex": 13,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 188
      }
    },
    {
      "id": "chunk-189",
      "text": "ou might be surprised by how many rogue colours you have in your product, \nbut the good news is, this is one of the simplest things to action.\nFirst, you need to do a colour audit of all websites and products at your \ncompany. Take note of every unique colour used for text, links, backgrounds, \nform inputs, buttons, error states, borders, and so on. If you have more than \none website, create a different colour palette for each website — it might prove \ninteresting to see the comparison.\nAs an extreme example, a colour audit conducted by Hipmunk \n(6.4) discovered \nan alarming amount of colours used in their product.\n6.4 uxdesign.cc/hipmunk-design-system-part-1-colors-ux-case-study-\n1ac99806aabd\n\nAn IterAtIVe ApproACH  117\nTheir colour audit (fig 6.1) led to them creating a stripped-down, clearer, and \non-brand semantic colour system \n(fig 6.2):\nFIG 6.2 Hipmunk’s new colour palette created post-audit\nNote the use of the number “500” (e.g.",
      "metadata": {
        "startIndex": 10854,
        "endIndex": 11805,
        "chunkIndex": 14,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 189
      }
    },
    {
      "id": "chunk-190",
      "text": "fig 6.1) led to them creating a stripped-down, clearer, and \non-brand semantic colour system \n(fig 6.2):\nFIG 6.2 Hipmunk’s new colour palette created post-audit\nNote the use of the number “500” (e.g. $hipred-500) in Hipmunk’s new colour \npalette (above). We’ll come back to what this means and why it’s important in \nthe “Systematising the Design” chapter, when we cover naming conventions \nand creating colour systems.\nThe following example \n(fig 6.3) is a small sample from a real colour audit I \nconducted at a company. The example colours shown here are to demonstrate \nthe discrepancies, which in this case were very similar variants of the same \ncolours.\nFIG 6.1 Colour audit of Hipmunk’s product\n\n118\nOnce you have your audit results — you need to get to the bottom of:\n• Why are we using each colour?\n• What (if any) function does each colour provide?\n• Do we need multiple variants of the same colour?\n• Which colours can we safely remove, and what do we replace them with?\nIt’s wise to take",
      "metadata": {
        "startIndex": 11605,
        "endIndex": 12606,
        "chunkIndex": 15,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 190
      }
    },
    {
      "id": "chunk-191",
      "text": "colour?\n• What (if any) function does each colour provide?\n• Do we need multiple variants of the same colour?\n• Which colours can we safely remove, and what do we replace them with?\nIt’s wise to take stock of why a colour is used. Consider whether the colours \nyou find in an audit were used intentionally (and serve an important function), \nor whether they were used unintentionally (and can be changed).\nWhen we clean our example up — removing the rogue colours — we end up \nwith a condensed, on-brand colour palette like so \n(fig 6.4):\nFIG 6.4 New on-brand colour palette removing unnecessary colours\nNow you need to work with a front-end developer to make these changes in \nthe code. If you’re working with a website, this is the perfect opportunity to \nintroduce Sass variables for colours (work with a developer for this). Create \nSass variables for all the correct brand colours you’ve defined, paying attention \nto how you name the colours.\nWe’ll cover naming conventions and why replacing",
      "metadata": {
        "startIndex": 12406,
        "endIndex": 13404,
        "chunkIndex": 16,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 191
      }
    },
    {
      "id": "chunk-192",
      "text": "rk with a developer for this). Create \nSass variables for all the correct brand colours you’ve defined, paying attention \nto how you name the colours.\nWe’ll cover naming conventions and why replacing static hex values \n(e.g. #F00658) in your code with Sass variables is a good idea later in the \n“Systematising the Design” chapter.\nFIG 6.3 Colour audit reveals very similar colours used\n\nAn IterAtIVe ApproACH  119\nFinally, pair a designer with a developer and go through the website, replacing \nall hex value colours with the correct Sass variable (colour). You could do a ‘fast \nand dirty’ find and replace, but it’s probably safer to ‘eyeball it’, going page-by-\npage and scenario-by-scenario.\nCode audits\nWe’re not going to go too deep into code audits in this book since we’re \nfocussed more on design, but suffice it to say they are important. The \nefficiency of the code is key to a design system’s success — and to the ease, \nspeed, efficiency, consistency, maintenance, and scalability of a",
      "metadata": {
        "startIndex": 13204,
        "endIndex": 14204,
        "chunkIndex": 17,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 192
      }
    },
    {
      "id": "chunk-193",
      "text": "design, but suffice it to say they are important. The \nefficiency of the code is key to a design system’s success — and to the ease, \nspeed, efficiency, consistency, maintenance, and scalability of a digital \nproduct.\nSometimes, the code harbours many of the problems. If you’ve worked in-\nhouse at a company with any history of digital, you’ve no doubt come across \nthe phrase ‘legacy problems’. This often refers to legacy (old) code that makes \nupdating something problematic (read: painful). The problems may stem from \ndesign — perhaps designers have gone rogue designing several variants of the \nsame thing — but the code holds the key to fixing them. Refactoring the code \n(reducing complexity) makes all the difference, and a code audit is a great way \nto kickstart that refactoring effort.\nAt GitHub, their designers and developers worked together to audit \n(6.5), \nrefactor, and consolidate their design system, focussing on their code:\n“We reduced the need for people to have to write new",
      "metadata": {
        "startIndex": 14004,
        "endIndex": 15004,
        "chunkIndex": 18,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 193
      }
    },
    {
      "id": "chunk-194",
      "text": "t GitHub, their designers and developers worked together to audit \n(6.5), \nrefactor, and consolidate their design system, focussing on their code:\n“We reduced the need for people to have to write new CSS. We made \nour components easier to reuse in multiple locations. We worked on \nconsolidating patterns by reducing code repetition and removing \nunnecessary design variations. We defined global Sass variables \nfor shared system styles. We introduced consistent and easy-to-\ninternalize naming conventions.”\n“Sass” is a key word here. If you’re not already familiar with it, Google it. Speak \nto your developers about it. It’s a way of writing and compiling CSS that will \nmake your code much easier to manage.\nBesides the code, I even introduced Sass naming conventions into the design \nand design documentation at a previous job — bridging the gap between \n6.5 medium.com/@broccolini/design-systems-at-github-c8e5378d2542",
      "metadata": {
        "startIndex": 14804,
        "endIndex": 15730,
        "chunkIndex": 19,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 194
      }
    },
    {
      "id": "chunk-195",
      "text": "de, I even introduced Sass naming conventions into the design \nand design documentation at a previous job — bridging the gap between \n6.5 medium.com/@broccolini/design-systems-at-github-c8e5378d2542\n\n120\ndesign and engineering. Any way you can find to do this is a good idea. We’ll \ncover this later in the “Systematising the Design” chapter.\nExperience has taught me that visual audits and their resulting plans of \naction, often dovetail into or spur subsequent code audits in the execution to \nfix the visual problem. Your teams might divide and conquer — running both \nvisual and code audits simultaneously — or start with one or the other, and \nwork from there. It very much depends on the nature of your teams and the \nproblems you’re solving.\nVisual audits\nA visual audit (aka ‘interface inventory’) is a means of finding inconsistencies \nin a digital product. You scan through a product and create an inventory of all \naspects of the visual interface, identifying where the problems are, and",
      "metadata": {
        "startIndex": 15530,
        "endIndex": 16530,
        "chunkIndex": 20,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 195
      }
    },
    {
      "id": "chunk-196",
      "text": "tory’) is a means of finding inconsistencies \nin a digital product. You scan through a product and create an inventory of all \naspects of the visual interface, identifying where the problems are, and scoping \nout the extent of the problem.\nWith this information, you can plan to fix any smaller issues in the short term, \nand formulate plans for fixing larger issues in the long term.\nThey also provide you with excellent material to sell your design system work \nto stakeholders — referring back to the “Selling a Design System” chapter — \nsince they highlight why you need a design system!\nHow do you conduct a visual audit?\nThis can easily be a one-person job, but I would recommend using this as an \nawareness and ‘togetherness’ exercise by working as a group.\nCreate a small task force of people who care most about the front-end. The \nteam could all be designers, or you could involve developers and product \nmanagers as well (so long as they are more ‘visually oriented’ people — it’s",
      "metadata": {
        "startIndex": 16330,
        "endIndex": 17322,
        "chunkIndex": 21,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 196
      }
    },
    {
      "id": "chunk-197",
      "text": "f people who care most about the front-end. The \nteam could all be designers, or you could involve developers and product \nmanagers as well (so long as they are more ‘visually oriented’ people — it’s \nimportant they take the audit seriously, so nothing slips through the cracks).\nCall a meeting and introduce the audit as an exercise to find inconsistencies \nin your product, which will ultimately help you to design and build a more \nconsistent product.\nStart by creating a list of every feature, page, screen, user journey, and scenario \nin your product. Then divide that list up amongst the group, with each person \ntaking ownership for their part of the product(s)/audit.\nAgree on a place to store your findings. It should be accessible by everyone; I \n\nAn IterAtIVe ApproACH  121\nrecommend a Google Doc or a design tool like Sketch, but there are a number \nof online collaboration tools you could use. You could also use something like \nKeynote.",
      "metadata": {
        "startIndex": 17122,
        "endIndex": 18073,
        "chunkIndex": 22,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 197
      }
    },
    {
      "id": "chunk-198",
      "text": "e; I \n\nAn IterAtIVe ApproACH  121\nrecommend a Google Doc or a design tool like Sketch, but there are a number \nof online collaboration tools you could use. You could also use something like \nKeynote. It will be easier if you agree on a consistent format for cataloguing \nand organising your findings. Ideally, create a template for your team to use.\nThe task of each auditor is to document what they see. So for every page, \nscreen, or user journey: take a screenshot of each button, header style, text \nstyle, link, form input, toggle, pagination, tooltip, quote, product card, table, \nheader, footer, navigation, and so on — and organise them by category (e.g. \nbuttons, text links, header styles, etc.).\nThe goal here is not to capture (screenshot) every instance of an element, but \nto capture each unique variant of it. So, don’t capture 10 instances of the \nexact same header style. Instead, if you find that 4 of those 10 header styles are \na different font family, weight, size, colour,",
      "metadata": {
        "startIndex": 17873,
        "endIndex": 18868,
        "chunkIndex": 23,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 198
      }
    },
    {
      "id": "chunk-199",
      "text": "re each unique variant of it. So, don’t capture 10 instances of the \nexact same header style. Instead, if you find that 4 of those 10 header styles are \na different font family, weight, size, colour, sentence case versus title case, all \ncaps, or underlined — then capture each of those variants. Do the same for \nall foundations, components, and patterns. Pay close attention to things like \nsize, spacing, colour, text styling, border-radius, drop-shadows, and icons. And \ndon’t forget things like hover states and error states.\nOrganisation is key. For example, you want to end up with a view of how many \nbutton styles you have in your product, but it may also help to know where \nin the product you found each button style, so you can go back and address it \nlater.\nYou should end up with a mass inventory of all existing foundations, \ncomponents, and patterns in your product, and all of their variations.\nFinally, schedule a time to meet again at a later date, as a group, to share and",
      "metadata": {
        "startIndex": 18668,
        "endIndex": 19661,
        "chunkIndex": 24,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 199
      }
    },
    {
      "id": "chunk-200",
      "text": "a mass inventory of all existing foundations, \ncomponents, and patterns in your product, and all of their variations.\nFinally, schedule a time to meet again at a later date, as a group, to share and \ndiscuss what the team found.\nThe results may shock you\nIf you’re shocked, this is a good thing. The first step towards solving a problem \nis admitting (or seeing) there is a problem. Chances are you’ve already \ndone that by forming this task force in the first place. You’re aware of the \ninconsistencies in your product, and you want to prove to others that they \nexist. The audit(s) will uncover these inconsistencies — and that’s only the \nsurface layer, what lies beneath (aka the code) may well be a lot worse!\nSeeing the number of variations side-by-side is a powerful realisation of \nthe state of your product, and an indication of how much work lies ahead. A \nvisual audit can help recruit people to your cause, convince stakeholders that",
      "metadata": {
        "startIndex": 19461,
        "endIndex": 20411,
        "chunkIndex": 25,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 200
      }
    },
    {
      "id": "chunk-201",
      "text": "ide-by-side is a powerful realisation of \nthe state of your product, and an indication of how much work lies ahead. A \nvisual audit can help recruit people to your cause, convince stakeholders that \n\n122\nsomething needs to be done, and acts as a blueprint to create a design system.\nWeb developer/designer, Brad Frost \n(6.6) puts it well:\n“It’s not to say that deviating from established patterns is always \na bad idea, but it’s important to recognize the difference between \nintentional and unintentional deviation. An interface inventory helps \nexpose unintentional inconsistencies and encourages consistent, \ndeliberate design decisions.”\nWhat now?\nNow, your team needs to plan what to do about the inconsistencies you’ve \nfound.\nInterface audits are a valuable addition to your pitch to stakeholders for why \nyou need to invest in a design system. As I said before, seeing is believing. \nYou can show your stakeholders the extent of the problem, and explain why \nthese inconsistencies matter, or",
      "metadata": {
        "startIndex": 20211,
        "endIndex": 21211,
        "chunkIndex": 26,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 201
      }
    },
    {
      "id": "chunk-202",
      "text": "ers for why \nyou need to invest in a design system. As I said before, seeing is believing. \nYou can show your stakeholders the extent of the problem, and explain why \nthese inconsistencies matter, or you can take a more direct approach, and take \naction now.\nPrincipally you need to work with your task force to consolidate the variations \nyou found. By task force, I mean: designers and developers working together to \nfix the inconsistencies, and documenting the definitive solutions you decide \nupon.\nThis is where it helps to include front-end developers in your task force, or \nat least bring them into the fold once you’ve completed the visual audit. You \nwon’t get far without developers, or at least not without access to the code to \nmake the changes yourself (yes, I’m suggesting designers could write code).\nResearch, consolidate, and document \nA visual audit I was once a part of uncovered 26 different styles of buttons in a \nsingle product.",
      "metadata": {
        "startIndex": 21011,
        "endIndex": 21966,
        "chunkIndex": 27,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 202
      }
    },
    {
      "id": "chunk-203",
      "text": "nges yourself (yes, I’m suggesting designers could write code).\nResearch, consolidate, and document \nA visual audit I was once a part of uncovered 26 different styles of buttons in a \nsingle product. A subsequent code audit revealed an array of different classes, \ncolour variations, and naming conventions for the same and similar buttons. It \nwas a mess.\n6.6 bradfrost.com\n\nAn IterAtIVe ApproACH  123\nThe goal is not to just eradicate all the variations you find. You need to replace \nthem with something, and the answer might not be to replace 26 with 1. In this \ncase, we dug a little deeper into the audit, analysing the 26 styles of buttons; we \nasked ourselves:\n• Are the variants random, or intentional?\n• Where, when, and how are they used? \n• What are their different functions?\nChances are you’ll find more than one use of the component, but I’ll wager \nyou won’t find more than a few. Trending patterns will emerge.",
      "metadata": {
        "startIndex": 21766,
        "endIndex": 22694,
        "chunkIndex": 28,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 203
      }
    },
    {
      "id": "chunk-204",
      "text": "nd how are they used? \n• What are their different functions?\nChances are you’ll find more than one use of the component, but I’ll wager \nyou won’t find more than a few. Trending patterns will emerge. Actions like: \n‘Save’, ‘Submit’, ‘Get Started’, ‘Sign Up’, ‘Buy Now’, and ‘Subscribe’ may differ in \nfunction, prominence, or importance from actions like: ‘Edit’, ‘Cancel’, ‘Read \nMore’, and ‘Close’. Take stock of these different functions in your audits and \ndecision-making.\nYour visual audit helps you to uncover not only how many variants you have, \nbut potentially why you have those variations. Sometimes it’s just bad design, \nor proof for why you need a design system. Other times you’ll discover a \nlegitimate need for variations — like multiple button styles for different \nactions, or additional text styles to cover specific scenarios.\nPrimary button\nTertiary button\nSecondary button\nFIG 6.5 Different states of button components",
      "metadata": {
        "startIndex": 22494,
        "endIndex": 23438,
        "chunkIndex": 29,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 204
      }
    },
    {
      "id": "chunk-205",
      "text": "ke multiple button styles for different \nactions, or additional text styles to cover specific scenarios.\nPrimary button\nTertiary button\nSecondary button\nFIG 6.5 Different states of button components\n\n124\nNow that you’ve uncovered and debated these findings, you can consolidate \nthose 26 button styles into 1, 2, 3, or more styles that cover all the scenarios \nyou’ve identified. Ending up with something like this \n(fig 6.5).\nNote the naming conventions. Names like “Primary”, “Secondary”, and \n“Tertiary” (for example), make it easier to identify your defined system \ncomponents — keeping everyone on the same page and speaking the same \nlanguage. Your naming conventions should be consistently used in the design, \ncode, documentation, and any product discussions.\nThe documentation should also specify why you have these variations:\nHow, where, when, and why should you use each variant?\nThe code should also be documented:\nHow does one apply each component, and their variants, in the",
      "metadata": {
        "startIndex": 23238,
        "endIndex": 24228,
        "chunkIndex": 30,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 205
      }
    },
    {
      "id": "chunk-206",
      "text": "ld also specify why you have these variations:\nHow, where, when, and why should you use each variant?\nThe code should also be documented:\nHow does one apply each component, and their variants, in the \ncode?\nDocumentation is a source of truth that reduces the chance of these multiple \nrogue variations happening in the first place. We’ll cover design system \ndocumentation in greater detail later in this book, but for now know it’s a key \nstep not to be overlooked.\nOnce you’ve consolidated, designed, and documented your component — work \nwith a developer to build your new component and all its variants. And once \nit’s built you’ll need to work through the product and replace all the rogue \nvariants with your new, consistent component. Your audit might help you to do \nthis if you’ve already identified where they occur in the product.\nManaging the workload\nNow, let’s not kid ourselves... The iterative approach will no doubt be executed \nover a great period of time — working in sprints —",
      "metadata": {
        "startIndex": 24028,
        "endIndex": 25025,
        "chunkIndex": 31,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 206
      }
    },
    {
      "id": "chunk-207",
      "text": "identified where they occur in the product.\nManaging the workload\nNow, let’s not kid ourselves... The iterative approach will no doubt be executed \nover a great period of time — working in sprints — but, ultimately, it will be \nworth the wait.\nIf you’re not familiar with sprints: it’s common practice for in-house design \nand development teams to work in short pre-defined sprints, focussing \non completing a limited (achievable) number of tasks in each sprint. Some \ncompanies even group their sprints by quarter (of the year), aiming to \nachieve specific goals at key stages throughout the year. Sprint and quarterly \n\nAn IterAtIVe ApproACH  125\nachievements can be good for keeping tabs on, encouraging, and reporting the \nprogress of your design system, which helps to keep stakeholders happy.\nOne of the advantages of the iterative approach is that it can be done alongside \nbusiness-as-usual tasks.",
      "metadata": {
        "startIndex": 24825,
        "endIndex": 25732,
        "chunkIndex": 32,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 207
      }
    },
    {
      "id": "chunk-208",
      "text": ", and reporting the \nprogress of your design system, which helps to keep stakeholders happy.\nOne of the advantages of the iterative approach is that it can be done alongside \nbusiness-as-usual tasks. I recommend advocating for allotting a certain \npercentage of time in each sprint to focus on the design system. If you’ve \ndone a good job selling the system, advocating for its importance, and gaining \nsupport from product managers, developers, and designers, then this should \nbe no issue.\nThe order in which you approach the system — iteratively — is unique to your \nsituation.\nYou could focus by order of importance. For example, focus on a problem \narea based on its affect on the user experience, the severity of the problem \nit’s solving, or even its impact on your team’s happiness or productivity! \nTackling the system by order of importance can be smart, as you (or rather, \nyour stakeholders) might see a more immediate impact — gaining your design \nsystem more support and traction.\nOr",
      "metadata": {
        "startIndex": 25532,
        "endIndex": 26531,
        "chunkIndex": 33,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 208
      }
    },
    {
      "id": "chunk-209",
      "text": "ctivity! \nTackling the system by order of importance can be smart, as you (or rather, \nyour stakeholders) might see a more immediate impact — gaining your design \nsystem more support and traction.\nOr you could focus by level of disruption. For example, introducing \nfoundational elements like colours and text styles will likely be less disruptive \nthan, say, introducing a new pattern that’s more noticeably different from its \nsurrounding patterns. I advise starting small with colours and text styles, then \nmove up in scale and disruption (i.e. noticeability by the user) to components \nlike buttons and inputs, and eventually to larger patterns like navigation, cards, \ngalleries, footer, and so on.\nIn time your product will gradually morph into a new look product, powered \nby a design system.\n\n126\nThe Frankenstein monster effect\nWhile designing iteratively has many advantages, it’s easy to lose sight of the \nproduct or brand as a whole.",
      "metadata": {
        "startIndex": 26331,
        "endIndex": 27279,
        "chunkIndex": 34,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 209
      }
    },
    {
      "id": "chunk-210",
      "text": "nto a new look product, powered \nby a design system.\n\n126\nThe Frankenstein monster effect\nWhile designing iteratively has many advantages, it’s easy to lose sight of the \nproduct or brand as a whole. Without careful management, it can lead to an \nunfortunate ‘Frankenstein monster’ effect.\nLet’s step back for a second. It’s not as simple as just taking an ‘iterative’ or \na ‘wholesale’ approach. You must consider the design and brand as a whole, \ncoherent piece. A system without harmony isn’t much of a system.\nA jigsaw puzzle starts as a whole picture before it’s broken down into \npieces. You’d have a terrible puzzle if you designed the pieces first, then \nlater discovered they don’t fit together!\nDon’t create design system elements in isolation, then attempt to fit them \ntogether in a product. Think about the product as a whole — as an experience.\nFIG 6.6 Refinement vs. exploration\n6.7 intercom.com/blog/two-product-principles-often-forgotten/\n\nAn IterAtIVe ApproACH  127\nRefinement vs.",
      "metadata": {
        "startIndex": 27079,
        "endIndex": 28078,
        "chunkIndex": 35,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 210
      }
    },
    {
      "id": "chunk-211",
      "text": "uct. Think about the product as a whole — as an experience.\nFIG 6.6 Refinement vs. exploration\n6.7 intercom.com/blog/two-product-principles-often-forgotten/\n\nAn IterAtIVe ApproACH  127\nRefinement vs. exploration\nBased on a concept from the book, Sketching User Experiences by Bill Buxton \n— the following graphic \n(fig 6.6) beautifully illustrates a good point to keep \nin mind when approaching a design system iteratively. Focussing on refining \nwhat you have now — or changing your current design one piece at a time — \ncan blind you to the best solution.\nWhen we design holistically, exploring many alternative solutions, we’re more \nlikely to discover an optimal solution. Then we can refine from there.\nTo quote from an article \n(6.7) by Des Traynor, co-founder of Intercom:\n“Iterating until something is ‘not obviously broken’ doesn’t guarantee \na good product. You can iterate your way to lots of places, including \nmediocrity.”\nThe iterative approach has many advantages, as we’ve covered in",
      "metadata": {
        "startIndex": 27878,
        "endIndex": 28878,
        "chunkIndex": 36,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 211
      }
    },
    {
      "id": "chunk-212",
      "text": "ething is ‘not obviously broken’ doesn’t guarantee \na good product. You can iterate your way to lots of places, including \nmediocrity.”\nThe iterative approach has many advantages, as we’ve covered in this chapter. \nHowever, if you take the iterative approach, don’t focus only on refinement, \nor work with too narrow a focus. Take time to explore each problem area first, \nthen refine. Don’t bypass the opportunity for design exploration altogether.\nThe wholesale approach centers more on design exploration and holistic \ndesign. Let’s look at this approach next.\n\n128\nA wholesale approach\n128\n07",
      "metadata": {
        "startIndex": 28678,
        "endIndex": 29678,
        "chunkIndex": 37,
        "section": "2. The wholesale approach",
        "globalChunkIndex": 212
      }
    },
    {
      "id": "chunk-213",
      "text": "whole— \nsale \napp—\nroach\nLAYInG tHe FounDAtIons\n\nA WHoLesALe ApproACH  129\nThe wholesale approach ideally should start in a similar way to the iterative \napproach we covered earlier: by identifying the problems you’re trying to solve. \nA little user and product research wouldn’t hurt either, but we can only cover \nso much ground in this book! So, we’re going to assume that you’re clued up, \nyou’ve identified that a redesign would be a good move for your business, and \nyou have a good idea of the problems you’re trying to solve.\nOkay, now you’re ready for design exploration!\nGround your work in reality\nIf you’re creating a design system for an existing product, then use real \nscenarios from that product(s). Don’t design with convenient content — \nfor example, don’t design using uniformly short names, or headlines that \nconveniently only use four words. Use real (or realistic) content, and use unruly \ncontent too!",
      "metadata": {
        "startIndex": 0,
        "endIndex": 926,
        "chunkIndex": 0,
        "section": "A",
        "globalChunkIndex": 213
      }
    },
    {
      "id": "chunk-214",
      "text": "gn with convenient content — \nfor example, don’t design using uniformly short names, or headlines that \nconveniently only use four words. Use real (or realistic) content, and use unruly \ncontent too! Let’s be honest, if you’ve been designing for awhile then you know \nwhat some clients are capable of when it comes to content. Is your beautiful, \nDribbble-shot-perfect layout with a large font size and three-word headline \ngoing to work when the client adds a 10-word headline? Use unreasonably long \n(and short) titles. Use awkwardly lengthy words that break the width of content \nareas. Discover the pitfalls in your design and create something responsive \nthat works in the real world, not just in your idealistic, perfect design mockup.\nDesign for all scenarios, not just the best case scenarios. Don’t try to fit the \ncontent to your design. Design for the content.\nIf you’re creating a design system for a new product with no existing content, \nyou still have to design with content in mind.",
      "metadata": {
        "startIndex": 726,
        "endIndex": 1725,
        "chunkIndex": 1,
        "section": "A",
        "globalChunkIndex": 214
      }
    },
    {
      "id": "chunk-215",
      "text": "s. Don’t try to fit the \ncontent to your design. Design for the content.\nIf you’re creating a design system for a new product with no existing content, \nyou still have to design with content in mind. Use a close approximation, or \nwork with a content strategist, copywriter, or user experience expert to get as \nclose as possible to the final content you’ll be using in the product.\nThe goal here is not to create the prettiest system, it’s to design a system \nthat best meets your product, user, and business needs. We do, of course, \nset out to create delightful products, but only because delight can enhance the \nuser experience.\nHave fun with it\nGet your team together. Let your designers flex their muscles. Collaborate, \nbut let your designers express their individual creativity too — they’re on your \nteam for a reason, right? Go far and wide. Explore every angle, style, layout, and \napproach for potential new design directions for your product. Be creative.",
      "metadata": {
        "startIndex": 1525,
        "endIndex": 2495,
        "chunkIndex": 2,
        "section": "A",
        "globalChunkIndex": 215
      }
    },
    {
      "id": "chunk-216",
      "text": "idual creativity too — they’re on your \nteam for a reason, right? Go far and wide. Explore every angle, style, layout, and \napproach for potential new design directions for your product. Be creative. \nChisel away and simplify until you discover the right style, form, and function.\n\n130\nIf you’ve already established Digital Foundations — as we covered in an earlier \nchapter — or your company has brand guidelines — then use them as a North \nStar, so to speak. If your company has no brand guidelines of any description, \nthen these design explorations will help you discover, flesh out, and document \nyour brand!\nDesign process, systematisation, and documentation\nAs you discover, refine, and arrive at a style and voice that speaks to your \nbrand and solves problems for your product, a design system — or at least a \nconsistent visual language — will start to emerge.\nOnce this consistent visual language emerges, the task now is to document the \ndesign system elements you’ve created, accounting",
      "metadata": {
        "startIndex": 2295,
        "endIndex": 3296,
        "chunkIndex": 3,
        "section": "A",
        "globalChunkIndex": 216
      }
    },
    {
      "id": "chunk-217",
      "text": "em — or at least a \nconsistent visual language — will start to emerge.\nOnce this consistent visual language emerges, the task now is to document the \ndesign system elements you’ve created, accounting for all states and scenarios . \nDocument your design thinking. How, where, when, and why should you apply \nthe foundations, components, and patterns you’ve created?\nEssentially, you’re creating a comprehensive style guide for your team to use. \nThink of it as a blueprint for designing products at your company.\nFor a more detailed look at the design exploration phase of the wholesale \napproach and its progression towards a design system, you can read my case \nstudy \n(7.1), which gives a detailed account of the process described here.\nBuilding a visual language\nI recommend reading an article (7.2) by Karri Saarinen (7.3), a principal \ndesigner on the Airbnb design team, titled, Building a Visual Language.\nThere are three things worth noting about Airbnb’s approach.",
      "metadata": {
        "startIndex": 3096,
        "endIndex": 4070,
        "chunkIndex": 4,
        "section": "A",
        "globalChunkIndex": 217
      }
    },
    {
      "id": "chunk-218",
      "text": "end reading an article (7.2) by Karri Saarinen (7.3), a principal \ndesigner on the Airbnb design team, titled, Building a Visual Language.\nThere are three things worth noting about Airbnb’s approach. Firstly, and \ninterestingly: the Airbnb design team use terms like: “Design Visual Language” \nand “Design Language System,” instead of: “Design System”.\nA language is more than words, it’s about communication. Yes, “system” and \n“language” essentially mean the same thing in this case, but psychologically, \nperhaps the term ‘language’ is less intimidating to a designer than ‘system’? \n7.1 medium.com/@andrewcouldwell/plasma-design-system-4d63fb6c1afc\n7.2 airbnb.design/building-a-visual-language/\n7.3 karrisaarinen.com\n\nA WHoLesALe ApproACH  131\nFor whatever reason, they’ve decided to use terminology that works best for \ntheir team.\nI think Airbnb’s philosophy is a healthy one. Anyone who’s travelled knows \nhow important language is for communicating effectively and clearly, and \nhow wrong it",
      "metadata": {
        "startIndex": 3870,
        "endIndex": 4870,
        "chunkIndex": 5,
        "section": "A",
        "globalChunkIndex": 218
      }
    },
    {
      "id": "chunk-219",
      "text": "ogy that works best for \ntheir team.\nI think Airbnb’s philosophy is a healthy one. Anyone who’s travelled knows \nhow important language is for communicating effectively and clearly, and \nhow wrong it can go when we don’t speak the same language. This is a good \nphilosophy to bring into system design thinking. Whatever terms and naming \nconventions you decide to use — just make sure you’re using a language \nyour team identifies with. The more comfortable they are with it, the more \nsuccessful it will be.\nSecondly, to quote from the Airbnb article \n(7.2):\n“We started by auditing and printing out many of our designs, both \nold and new. Laying the flows side by side on a board, we could see \nwhere and how the experiences were breaking, and where we needed \nto start making changes.”\nAn important thing to note here is that they focussed on product flows and \nthe user experience. They didn’t focus on small, siloed areas of the interface, \nor component parts that make up their products.",
      "metadata": {
        "startIndex": 4670,
        "endIndex": 5664,
        "chunkIndex": 6,
        "section": "A",
        "globalChunkIndex": 219
      }
    },
    {
      "id": "chunk-220",
      "text": "portant thing to note here is that they focussed on product flows and \nthe user experience. They didn’t focus on small, siloed areas of the interface, \nor component parts that make up their products. They contemplated their \nproduct as a whole, as an “experience”.\nAlso, they used real product scenarios. Grounding your work in reality, using \nreal data and scenarios is key. Don’t work with ideals, best case scenarios, and \nconvenient content. Work with what you’ve got — and design a system that \nworks for it — but keep it flexible enough to evolve and account for more than \nyou have now.\nOur goal here is not to create the prettiest system. It’s to create a flexible \nsystem that solves problems, and also delivers a great user experience.\nThirdly: remember when we talked about Digital Foundations earlier in this \nbook? Well, Airbnb thinks about their brand and products in a similar way.\nPrior to their ‘Design Language System’ project, Airbnb’s design team had \nalready defined their",
      "metadata": {
        "startIndex": 5464,
        "endIndex": 6458,
        "chunkIndex": 7,
        "section": "A",
        "globalChunkIndex": 220
      }
    },
    {
      "id": "chunk-221",
      "text": "oundations earlier in this \nbook? Well, Airbnb thinks about their brand and products in a similar way.\nPrior to their ‘Design Language System’ project, Airbnb’s design team had \nalready defined their equivalent of Digital Foundations by establishing colour, \ntypography, and spacing \n(fig 7.1).\n\n132\nThe exercise now was to build a design system upon those foundations:\n“The foundation proved essential for guiding our work in a unified \ndirection while allowing room for us to individually explore creative \ndesign solutions. This way we felt that we were all working together, \ntowards the same idea.”\nThis is great! Their foundations — remember: Digital Foundations are brand \nguidelines, not a design system in itself — helped them work better as a \nteam, and their designers retained their individual creativity, which is very \nimportant to designers!\n“Reviewing our collective work at the end of each day, we began \nto see patterns emerge.",
      "metadata": {
        "startIndex": 6258,
        "endIndex": 7204,
        "chunkIndex": 8,
        "section": "A",
        "globalChunkIndex": 221
      }
    },
    {
      "id": "chunk-222",
      "text": "r as a \nteam, and their designers retained their individual creativity, which is very \nimportant to designers!\n“Reviewing our collective work at the end of each day, we began \nto see patterns emerge. We course-corrected when necessary, and \nstarted defining our standardized components.”\nAirbnb took a holistic approach to create a visual language that worked \nfor their product. They reviewed their work as a team, and their design \nexplorations gradually led to patterns and components emerging throughout \nthe process — ultimately forming their design system.\nFIG 7.1 Airbnb’s foundations\n\nA WHoLesALe ApproACH  133A WHoLesALe ApproACH  133\nThe goal is not to \ncreate the prettiest \nsystem, get more \nlikes on Dribbble, \nor impress your \nfriends — it’s to \ndesign a system that \nbest meets your \nproduct, user, and \nbusiness needs.\n\n134\nBuild and launch plans\nNow, the really tricky part. With your system effectively designed (with the \nwholesale approach), you have a hard decision to make:",
      "metadata": {
        "startIndex": 7004,
        "endIndex": 8004,
        "chunkIndex": 9,
        "section": "A",
        "globalChunkIndex": 222
      }
    },
    {
      "id": "chunk-223",
      "text": "roduct, user, and \nbusiness needs.\n\n134\nBuild and launch plans\nNow, the really tricky part. With your system effectively designed (with the \nwholesale approach), you have a hard decision to make:",
      "metadata": {
        "startIndex": 7804,
        "endIndex": 8804,
        "chunkIndex": 10,
        "section": "A",
        "globalChunkIndex": 223
      }
    },
    {
      "id": "chunk-224",
      "text": "Brands we associate with high standards for how their brand is executed \n—  like Nike or Apple  — are more likely to take the first approach. It would be \ndamaging to their brand perception to release anything too short of the final \nproduct.\nOn the other hand, smaller businesses that aren’t under the microscope \nas much as bigger brands can afford a more iterative approach, since their \nchanges are more likely to go unnoticed, or at least, won’t light up Twitter!\nIt’s important to factor in whether your business can afford to — or if your \ncustomers/target audience are willing to — wait several months or a year (plus) \nfor you to design, build, and launch a perfect end product. Time-sensitive \ncompanies like startups are less likely to have the luxury of doing months of \ndesign and build work followed by a big reveal, due to their limited funds and \nneed to prove themselves a worthwhile and profitable company in a very short \ntimespan.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 951,
        "chunkIndex": 0,
        "section": "2. Or do you build and introduce the system iteratively over time?",
        "globalChunkIndex": 224
      }
    },
    {
      "id": "chunk-225",
      "text": "the luxury of doing months of \ndesign and build work followed by a big reveal, due to their limited funds and \nneed to prove themselves a worthwhile and profitable company in a very short \ntimespan. Often times — dependending on the product and industry — the \nsmart thing to do is to get something out there, test the water, and iterate to \nfind a market fit.\nIt doesn’t have to be perfect\nThere’s no one-size-fits-all approach to how you build and launch a website \nor digital product. You have to do what’s best for your product, team, and \nbusiness. And remember: it doesn’t have to be perfect.\nDesign is a process. It takes time. However, building the system (i.e. \ndevelopment) is the lion’s share of the work! If you spend too long \nperfecting the system  on the design side   you’ll never launch anything!\nYou might not get it right the first time, so consider getting to an MVP \n(minimum viable product) — or a beta launch phase — as fast as possible.",
      "metadata": {
        "startIndex": 751,
        "endIndex": 1713,
        "chunkIndex": 1,
        "section": "2. Or do you build and introduce the system iteratively over time?",
        "globalChunkIndex": 225
      }
    },
    {
      "id": "chunk-226",
      "text": "on the design side   you’ll never launch anything!\nYou might not get it right the first time, so consider getting to an MVP \n(minimum viable product) — or a beta launch phase — as fast as possible. This \nway you can soft launch to a limited subset of people, discover any problems, \niterate, refine, and improve before launching to everybody. Let’s look at an \nexample:\n\nA WHoLesALe ApproACH  135\nWholesale design, and an iterative build and launch\nEarlier I mentioned it isn’t always as simple as taking either the iterative \napproach or the wholesale approach; you can combine the two. For example, \nwhen I worked at Behance \n(7.4) on the Adobe Portfolio (7.5) product (fig 7.2) \n— we took a wholesale approach to the design and (most of the) build of the \nproduct, but the launch (and the remainder of the build) was iterative.\nFIG 7.2 Design mockup from the Adobe Portfolio product\nFor context: the new Adobe Portfolio product was replacing an existing \nproduct (Behance ProSite).",
      "metadata": {
        "startIndex": 1513,
        "endIndex": 2500,
        "chunkIndex": 2,
        "section": "2. Or do you build and introduce the system iteratively over time?",
        "globalChunkIndex": 226
      }
    },
    {
      "id": "chunk-227",
      "text": "nd the remainder of the build) was iterative.\nFIG 7.2 Design mockup from the Adobe Portfolio product\nFor context: the new Adobe Portfolio product was replacing an existing \nproduct (Behance ProSite). A decision had been made not to iteratively evolve \nthe existing product, but to start again with a new product (i.e. a wholesale \napproach). There was nothing iterative about this redesign; it was very much \nan ‘out with the old, in with the new’ wholesale approach. We were creating a \nnew code infrastructure, a new design, and a new brand.\nMonths of design exploration and system design work ensued before anything \nsubstantial was built. Once the design was reasonably progressed, I started \nfeeding the developers things to build as fast as I could — starting small with \n7.4 behance.net\n7.5 roomfive.net/adobe-portfolio/\n\n136\nsystem components, and working up to patterns and product features.\nBuilding and launching a product of this size and scope was never going to \nbe easy.",
      "metadata": {
        "startIndex": 2300,
        "endIndex": 3286,
        "chunkIndex": 3,
        "section": "2. Or do you build and introduce the system iteratively over time?",
        "globalChunkIndex": 227
      }
    },
    {
      "id": "chunk-228",
      "text": "nce.net\n7.5 roomfive.net/adobe-portfolio/\n\n136\nsystem components, and working up to patterns and product features.\nBuilding and launching a product of this size and scope was never going to \nbe easy. We knew what we were creating was ambitious, complicated, and \nmultifaceted. On the one hand, we had a potential target audience (of millions \nof people) to impress and convert to paying customers. And on the other \nhand, we owed it to our existing product users to keep them happy while — as \nseamlessly as possible — transitioning them over to the new product.\nAchieving the above with a ‘hard launch’ would probably have proven futile, \nespecially for a company the size of Adobe. Instead, after months of build work \nwe arrived at an MVP (minimum viable product) version of the product. It was \nbasic, it didn’t include all the features, and it was a little buggy — but it was \nenough to start getting valuable feedback, user testing, and bug reports.\nWe did several phased Beta releases of the",
      "metadata": {
        "startIndex": 3086,
        "endIndex": 4085,
        "chunkIndex": 4,
        "section": "2. Or do you build and introduce the system iteratively over time?",
        "globalChunkIndex": 228
      }
    },
    {
      "id": "chunk-229",
      "text": "basic, it didn’t include all the features, and it was a little buggy — but it was \nenough to start getting valuable feedback, user testing, and bug reports.\nWe did several phased Beta releases of the product over time. Each release \nopened up the product to more people, building towards an ‘official’ launch \nsome months later.\nWe learned a lot from this beta phase. We especially learned that people didn’t \nalways use the product the way we anticipated they would! But that’s okay. It \nwas better to learn these things in a beta phase — with hundreds/thousands \nof users — than later with thousands/millions of users. People were also more \nforgiving about the limited feature set and bugs in the product because in our \nmarketing we set the expectation that they were using a ‘work in progress’ \nversion of the product.\nThe disruption factor\nAn important factor you should consider when deciding whether to go for \nthe ‘big reveal’ approach to launching a new system — versus an iterative",
      "metadata": {
        "startIndex": 3885,
        "endIndex": 4878,
        "chunkIndex": 5,
        "section": "2. Or do you build and introduce the system iteratively over time?",
        "globalChunkIndex": 229
      }
    },
    {
      "id": "chunk-230",
      "text": "ress’ \nversion of the product.\nThe disruption factor\nAn important factor you should consider when deciding whether to go for \nthe ‘big reveal’ approach to launching a new system — versus an iterative \ntransition — is the effect it will have on your users.\nFor example, think about digital productivity products you use on a daily \nbasis... I mean meticulously use — they’re mission-critical to your job. For \nsome professions, CRM (customer relationship management) products are a \ngreat example of this kind of product. An experienced CRM product user could \nbe so familiar with that product’s user interface, they could almost operate \nit in their sleep. Now consider what happens when they log in one morning, \nand — poof! — there’s a totally new-look product. Suddenly their day-to-day \ntasks aren’t so easy, fast, or efficient. You could go from a satisfied user base to \na frustrated one overnight (remember the Snapchat example in the “Getting \nStarted” chapter).",
      "metadata": {
        "startIndex": 4678,
        "endIndex": 5649,
        "chunkIndex": 6,
        "section": "2. Or do you build and introduce the system iteratively over time?",
        "globalChunkIndex": 230
      }
    },
    {
      "id": "chunk-231",
      "text": "y their day-to-day \ntasks aren’t so easy, fast, or efficient. You could go from a satisfied user base to \na frustrated one overnight (remember the Snapchat example in the “Getting \nStarted” chapter). You might even lose those customers — considering your \n\nA WHoLesALe ApproACH  137\nproduct likely isn’t their only option.\nRolling out a design system, responsibly\nBig changes to products that are used daily — or frequently — can be hugely \ndisruptive to your customers’ lives and/or businesses. Not to mention the near \nimpossible task of managing anything that goes wrong with a large launch or \nupdate across so many touchpoints. The support requests alone would cripple \nsome community support and product teams.\nFor these kinds of products (or use cases), it might be better to take it slow.\nMinimise disruption to the user by subtly integrating foundations, \ncomponents, and patterns in sprints.",
      "metadata": {
        "startIndex": 5449,
        "endIndex": 6351,
        "chunkIndex": 7,
        "section": "2. Or do you build and introduce the system iteratively over time?",
        "globalChunkIndex": 231
      }
    },
    {
      "id": "chunk-232",
      "text": "product teams.\nFor these kinds of products (or use cases), it might be better to take it slow.\nMinimise disruption to the user by subtly integrating foundations, \ncomponents, and patterns in sprints. You can scale up, evolve, and improve the \nlook and experience of a product over time — building sustainably towards the \nfull design system integration.\nAnother advantage of this is that you can manage user feedback more \nefficiently. Feedback inline with specific system updates allows you to refine \nand improve on the design system in more targeted and manageable sprints, as \nopposed to being overwhelmed by feedback on the system at large.\nThe disadvantage is it can be frustrating integrating a system in stages. From \na designer/developer perspective, you just want to see ‘your baby’ out in the \nworld. It can feel like an eternity watching your ugly duckling slowly evolve \ninto a swan.\nThe key is not to cause too much frustration at the user’s end.",
      "metadata": {
        "startIndex": 6151,
        "endIndex": 7112,
        "chunkIndex": 8,
        "section": "2. Or do you build and introduce the system iteratively over time?",
        "globalChunkIndex": 232
      }
    },
    {
      "id": "chunk-233",
      "text": "ou just want to see ‘your baby’ out in the \nworld. It can feel like an eternity watching your ugly duckling slowly evolve \ninto a swan.\nThe key is not to cause too much frustration at the user’s end. In any form of \ndesign: meeting people’s basic expectations will keep them satisfied, and \ndelighting them is an experience to strive for. It’s crucial to get the basics \nright. That’s what your users care most about. Keep this in mind when rolling \nout your design system.\n\n138\nNow that you’ve learned the pros and cons of the wholesale and iterative \napproaches, you can make a more informed decision about the most suitable \nplan of attack for creating and deploying a design system at your company. Do \nyou take:\n• A wholesale approach to the design, build, and launch?\n• An iterative approach to the design, build, and launch?\n• A wholesale approach to the design, then iteratively build and launch?\n• A wholesale approach to the design and build, then iteratively launch?\nWhichever path(s) you",
      "metadata": {
        "startIndex": 6912,
        "endIndex": 7912,
        "chunkIndex": 9,
        "section": "2. Or do you build and introduce the system iteratively over time?",
        "globalChunkIndex": 233
      }
    },
    {
      "id": "chunk-234",
      "text": "the design, build, and launch?\n• A wholesale approach to the design, then iteratively build and launch?\n• A wholesale approach to the design and build, then iteratively launch?\nWhichever path(s) you go down for creating your product(s) and brand’s \nvisual language, you don’t want all that hard work to go to waste. You need to \nsafeguard the design decisions you’ve made, and put systems and processes in \nplace to protect the brand and visual language you’ve created. The next couple \nof chapters teach you how to do just that. We’ll also cover how to level up as \ndesigners and design teams by systematising our designs, and creating robust, \nefficient, accessible, and scalable design systems!\n\nA WHoLesALe ApproACH  139A WHoLesALe ApproACH  139\nA jigsaw puzzle \nstarts as a whole \npicture before it’s \nbroken down into \npieces. You’d have a \nterrible puzzle if you \ndesigned the pieces \nfirst, then later \ndiscovered they don’t \nfit together!",
      "metadata": {
        "startIndex": 7712,
        "endIndex": 8662,
        "chunkIndex": 10,
        "section": "2. Or do you build and introduce the system iteratively over time?",
        "globalChunkIndex": 234
      }
    },
    {
      "id": "chunk-235",
      "text": "A jigsaw puzzle \nstarts as a whole \npicture before it’s \nbroken down into \npieces. You’d have a \nterrible puzzle if you \ndesigned the pieces \nfirst, then later \ndiscovered they don’t \nfit together!\n\n140\nSystematising the design\n140\n08\nsys— \ntemat— \nising \nthe \ndesign\nLAYInG tHe FounDAtIons\n\nsYsteMAtIsInG tHe DesIGn  141\nDesigning and building a design system is all very well and good, but your \ndesign team’s continued adoption of the system is the key to its success.\nIt’s important your design team:",
      "metadata": {
        "startIndex": 8462,
        "endIndex": 9462,
        "chunkIndex": 11,
        "section": "2. Or do you build and introduce the system iteratively over time?",
        "globalChunkIndex": 235
      }
    },
    {
      "id": "chunk-236",
      "text": "We’ll look at points 2 and 3 in later chapters. In this chapter, we’ll focus on \npoint 1: Ease of access and use.\nSet the system up for success\nAll the design exploration, pretty style guides, Digital Foundations, \ndocumentation, and goodwill in the world won’t help unless your design team \nactually uses your design system and doesn’t fight it.\nI’ve seen this first-hand: there’s a design system in place, yet individuals on \na design team continue to serve up new text styles, buttons, and inputs in \ntheir mockups. It’s frustrating. It creates unrest in the team. Developers get \nfrustrated that designers still aren’t using consistent components. And the \nsystem gradually falls into decay.\nSometimes, there are legitimate reasons to introduce new styles, or new \nvariants on existing foundations, components, patterns, templates, or features. \nWe call this ‘intentional design’, and it’s fine, as long as you document the \nsystem changes accordingly.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 957,
        "chunkIndex": 0,
        "section": "3. Maintain and iterate on it (i.e. the design and code stay in sync).",
        "globalChunkIndex": 236
      }
    },
    {
      "id": "chunk-237",
      "text": "es, or new \nvariants on existing foundations, components, patterns, templates, or features. \nWe call this ‘intentional design’, and it’s fine, as long as you document the \nsystem changes accordingly. But the problem I’m talking about comes from \n‘unintentional design’.\nLet’s give the designer who introduces new system elements the benefit of the \ndoubt. Perhaps they didn’t mean to create a new image gallery when there’s \nalready a perfectly good image gallery designed, built, and ready to deploy.",
      "metadata": {
        "startIndex": 757,
        "endIndex": 1757,
        "chunkIndex": 1,
        "section": "3. Maintain and iterate on it (i.e. the design and code stay in sync).",
        "globalChunkIndex": 237
      }
    },
    {
      "id": "chunk-238",
      "text": "If it’s the latter (2 or 3), you should discuss the proposed iteration as a team. If \nit’s the former (1), then you have a problem. An avoidable problem.\n\n142\nYou need a design system library\nIf your design system foundations, components, and patterns are easy to \naccess and use, you’ll be less likely to have the problem of unintentional \ndesign. Think of this collection of design system assets as your ‘design library’.\nHere’s a quote from the Airbnb design team \n(8.1) talking about their design \nlibrary:\n“We collected them [design system components] in a master file \ncalled the library, which we referred to throughout the design \nprocess. After a week or two, we began to see huge leaps in \nproductivity by using the library when iterating on designs. One \nday, while putting together a last-minute prototype, our team was \nable to create nearly 50 screens within just a few hours by using the \nframework our library provided.”\nI’ve seen designers create buttons by drawing a rectangle,",
      "metadata": {
        "startIndex": 0,
        "endIndex": 996,
        "chunkIndex": 0,
        "section": "3. Or perhaps they are proposing a new and improved pattern.",
        "globalChunkIndex": 238
      }
    },
    {
      "id": "chunk-239",
      "text": "last-minute prototype, our team was \nable to create nearly 50 screens within just a few hours by using the \nframework our library provided.”\nI’ve seen designers create buttons by drawing a rectangle, changing the colour, \nadding a border-radius, adding some text, and styling the text how they feel \nlike it. They do the same for text input, selects, and so on. The developers build \nthe design mockup they’re given, creating new, one-off components and non-\nreusable CSS each time. Is it any wonder some websites and products have so \nmany different styles when designers work like this? There is a better way.\nIf this were a presentation, I’d now do a live demo. I’d open up a blank \nSketch canvas and create a simple form in a matter of seconds by using an \nexample library of design system components. Anytime I’ve done this it’s \nwowed the audience. But this is no magic trick — it’s just good design system \nmanagement.\nBy creating a library of things like text styles, colours, form inputs,",
      "metadata": {
        "startIndex": 796,
        "endIndex": 1794,
        "chunkIndex": 1,
        "section": "3. Or perhaps they are proposing a new and improved pattern.",
        "globalChunkIndex": 239
      }
    },
    {
      "id": "chunk-240",
      "text": "onents. Anytime I’ve done this it’s \nwowed the audience. But this is no magic trick — it’s just good design system \nmanagement.\nBy creating a library of things like text styles, colours, form inputs, and buttons \n— that anyone on your team can easily access and use in their designs — you \nreduce the likelihood of unintentional design.\nUltimately, your aim is to create a master design system (“library”) file — or \nsource of truth — that your whole team can easily access and sync any updates \nmade to it. This file (or whatever form it takes) becomes your design library.\nThe library should contain reusable elements from your design system that \n8.1 airbnb.design/building-a-visual-language/\n\nsYsteMAtIsInG tHe DesIGn  143sYsteMAtIsInG tHe DesIGn  143\nAfter a week or two \nwe saw huge leaps in \nproductivity by using \nthe library when \niterating on designs. \nOne day our team was \nable to create nearly \n50 screens within \njust a few hours.",
      "metadata": {
        "startIndex": 1594,
        "endIndex": 2540,
        "chunkIndex": 2,
        "section": "3. Or perhaps they are proposing a new and improved pattern.",
        "globalChunkIndex": 240
      }
    },
    {
      "id": "chunk-241",
      "text": "sIGn  143\nAfter a week or two \nwe saw huge leaps in \nproductivity by using \nthe library when \niterating on designs. \nOne day our team was \nable to create nearly \n50 screens within \njust a few hours.\n\n144\nyou commonly use in your design mockups, such as text styles, form inputs, \nand buttons. It should also include all their variations and states (e.g. a text \ninput’s placeholder, value, hover, error, and disabled states).\nIdeally, any changes you make to the master design library file should sync to \nyour design files, keeping your design mockups in sync with the system. It’s \nnot perfect, but you’re essentially trying to simulate a built environment (e.g. \nSass, CSS, HTML, JS, React) in a design tool.\nThe idea is your design team can insert any of these elements into their design \nmockups. Of course these elements need to be editable, but within consistent \nparameters. For example, if you have two buttons in your design system — a \nblue button and a green button — the designer should",
      "metadata": {
        "startIndex": 2340,
        "endIndex": 3340,
        "chunkIndex": 3,
        "section": "3. Or perhaps they are proposing a new and improved pattern.",
        "globalChunkIndex": 241
      }
    },
    {
      "id": "chunk-242",
      "text": ". Of course these elements need to be editable, but within consistent \nparameters. For example, if you have two buttons in your design system — a \nblue button and a green button — the designer should easily be able to choose \nbetween blue and green, but not make it pink. The data/text content/value also \nneeds to be editable, which means your components need to be responsive so \nthey will work with variable amounts of content.\nConstraints are not a bad thing\nWhen we talk about using design libraries, we are essentially talking about \nsetting ‘constraints’ for designers, but this shouldn’t be viewed as a negative.\nPre-made components and pre-defined text styles only help designers do their \njob. It’s important that designers on your team understand this, and don’t view \ndesign systems as taking away — or restricting — their creative freedom.\nFor example, you can design something like a form very quickly — even in \nseconds — using a library of pre-made components like inputs, selects,",
      "metadata": {
        "startIndex": 3140,
        "endIndex": 4138,
        "chunkIndex": 4,
        "section": "3. Or perhaps they are proposing a new and improved pattern.",
        "globalChunkIndex": 242
      }
    },
    {
      "id": "chunk-243",
      "text": "taking away — or restricting — their creative freedom.\nFor example, you can design something like a form very quickly — even in \nseconds — using a library of pre-made components like inputs, selects, radio \nbuttons, and buttons. This is much faster than meticulously creating each \ncomponent from scratch (risking unintentional variations), or copying and \npasting components from one design file to another.\nThe constraints a design library puts in place help maintain consistency, and \nvastly increases speed and efficiency.\nFreeing designers from re-creating the same foundations, components, and \npatterns over and over again allows them to focus on more important things, \nlike creating or iterating on features, flows, and user experiences.\n\nsYsteMAtIsInG tHe DesIGn  145sYsteMAtIsInG tHe DesIGn  145\nFreeing designers \nfrom re-creating the \nsame design elements \nover and over again \nallows them to focus \non more important \nthings, like iteration, \nnew features, and \nuser experience.",
      "metadata": {
        "startIndex": 3938,
        "endIndex": 4932,
        "chunkIndex": 5,
        "section": "3. Or perhaps they are proposing a new and improved pattern.",
        "globalChunkIndex": 243
      }
    },
    {
      "id": "chunk-244",
      "text": "DesIGn  145\nFreeing designers \nfrom re-creating the \nsame design elements \nover and over again \nallows them to focus \non more important \nthings, like iteration, \nnew features, and \nuser experience.\n\n146\nTools for the job\nI stated at the start of this book that it would be futile to dive too much into the \ntechnology side of design systems in print. Design tools evolve so fast that the \nwords I freeze in time in this book may no longer apply by the time you read \nthis. With that said, I don’t want to leave you empty-handed, so I’ll talk a little \nabout design tools to consider.\nWhere Photoshop was once the industry standard for web designers, the \nneed for a vector based, dynamic, and specialist user interface design tool \nbecame clear circa 2015(-ish). There are now a host of options out there! Below \nis a brief introduction to just a few of them, and there are more up-to-date \nresources and links on this book’s website \n(8.2).\nIn the beginning of this revolution of new design tools,",
      "metadata": {
        "startIndex": 4732,
        "endIndex": 5732,
        "chunkIndex": 6,
        "section": "3. Or perhaps they are proposing a new and improved pattern.",
        "globalChunkIndex": 244
      }
    },
    {
      "id": "chunk-245",
      "text": "there! Below \nis a brief introduction to just a few of them, and there are more up-to-date \nresources and links on this book’s website \n(8.2).\nIn the beginning of this revolution of new design tools, Sketch \n(8.3) quickly \nrose to fame as the popular choice for web and product designers. Sketch’s text \nstyles and responsive, nested symbols (for editable, reusable components) — \npaired with Sketch Library \n(8.4) — are superb for working with and managing \na design library. This is the design toolset I’ve used since 2016 for web design \nand to create design systems that power large design teams and entire suites of \nproducts, so I can speak first-hand to its excellent performance.\nI’ve also created a Skillshare class \n(8.5) showing how I currently (at the time of \nthis book’s publication) set up symbols in a design library in Sketch.\nWhile I have no experience using the following design tools, I’ve heard good \nthings:\n• Framer X (8.6) is a design tool doing amazing things to bridge the",
      "metadata": {
        "startIndex": 5532,
        "endIndex": 6531,
        "chunkIndex": 7,
        "section": "3. Or perhaps they are proposing a new and improved pattern.",
        "globalChunkIndex": 245
      }
    },
    {
      "id": "chunk-246",
      "text": "et up symbols in a design library in Sketch.\nWhile I have no experience using the following design tools, I’ve heard good \nthings:\n• Framer X (8.6) is a design tool doing amazing things to bridge the gap \nbetween design and code. You can create interactive, animated, reusable \ncomponents. You can even design with React components from production \n(i.e. your real product).\n• Adobe XD \n(8.7) is a design tool to keep an eye on. It’s been in a work in \nprogress for sometime now, but they have a great team working on it and its \nprogression is encouraging. \n• For something different, Figma \n(8.8) is a browser-based design tool (not \nsoftware) that allows multiple designers (and other stakeholders) to work \nsimultaneously on a design.\nAnd then there are designers who consider any code editor to be a design \n8.2 designsystemfoundations.com/resources/\n\nsYsteMAtIsInG tHe DesIGn  147\ntool — using production code, ‘sandbox’ test environments, designing in the \nbrowser, and prototyping with ‘real’",
      "metadata": {
        "startIndex": 6331,
        "endIndex": 7332,
        "chunkIndex": 8,
        "section": "3. Or perhaps they are proposing a new and improved pattern.",
        "globalChunkIndex": 246
      }
    },
    {
      "id": "chunk-247",
      "text": "e a design \n8.2 designsystemfoundations.com/resources/\n\nsYsteMAtIsInG tHe DesIGn  147\ntool — using production code, ‘sandbox’ test environments, designing in the \nbrowser, and prototyping with ‘real’ (built) components. I count myself among \nthose designers — I love to iterate on responsive designs and animations live \nin the browser, to really hone the design and user experience.\nAt the end of the day, I’m not here to tell you what tools to use. They’re just \ntools. It’s up to you to discover which processes and tools work best for your \nteam’s preferences, comfort, skill sets, and aptitudes. And it’s probably a good \nidea to agree on one tool, which your whole team uses — so you avoid different \nversions of the same design system elements being created and used in \ndifferent software!\nNaming conventions\nAs I’ve mentioned before, naming conventions are important in design \nsystems. Each text style, colour, component, and pattern in your design system \nshould have a unique name, and",
      "metadata": {
        "startIndex": 7132,
        "endIndex": 8130,
        "chunkIndex": 9,
        "section": "3. Or perhaps they are proposing a new and improved pattern.",
        "globalChunkIndex": 247
      }
    },
    {
      "id": "chunk-248",
      "text": "Naming conventions\nAs I’ve mentioned before, naming conventions are important in design \nsystems. Each text style, colour, component, and pattern in your design system \nshould have a unique name, and it’s important that the name you use in your \ndesign library, matches the code and the documentation.\nThe idea is this: if you state the name of a text style, colour, component, or \npattern in a design mockup — or in a product discussion — then the other \npeople on your team (designers, developers, and product managers) should \neither know exactly what you’re referring to, or be able to look it up in your \ndocumentation (aka the source of truth).\nIt helps to be systematic about your naming conventions. It seems boring, but \nfor example, naming text styles “Title 1” through “Title 5” (reducing in size the \nlarger the number) is a lot easier to understand than naming them something \nlike “Daisy” or “Yosemite”.",
      "metadata": {
        "startIndex": 7930,
        "endIndex": 8848,
        "chunkIndex": 10,
        "section": "3. Or perhaps they are proposing a new and improved pattern.",
        "globalChunkIndex": 248
      }
    },
    {
      "id": "chunk-249",
      "text": "oring, but \nfor example, naming text styles “Title 1” through “Title 5” (reducing in size the \nlarger the number) is a lot easier to understand than naming them something \nlike “Daisy” or “Yosemite”. While it might be fun to come up with humorous or \ndescriptive names for system elements — your naming conventions need to \nmake sense to more people than just you and your friends on your team. They \nneed to resonate with the whole team, new people onboarding to the team, and \nsemantically make sense in the code.\n8.3 sketch.com\n8.4 sketch.com/docs/libraries/\n8.5 skl.sh/2xWBObZ\n8.6 framer.com\n8.7 adobe.com/products/xd.html\n8.8 figma.com\n\n148148\nFIG 8.1 Text styles with semantic names from clubofthewaves.com\n\nsYsteMAtIsInG tHe DesIGn  149\nThe example (fig 8.1) from the Club of the Waves website demonstrates simple \nand semantic naming conventions for foundational text styles.\nIt also helps if your naming conventions are scalable.",
      "metadata": {
        "startIndex": 8648,
        "endIndex": 9587,
        "chunkIndex": 11,
        "section": "3. Or perhaps they are proposing a new and improved pattern.",
        "globalChunkIndex": 249
      }
    },
    {
      "id": "chunk-250",
      "text": "149\nThe example (fig 8.1) from the Club of the Waves website demonstrates simple \nand semantic naming conventions for foundational text styles.\nIt also helps if your naming conventions are scalable. As digital products \nevolve, new scenarios call for new foundational elements (like colours and text \nstyles), or new components and patterns. If you have a colour named “Ocean \nBlue”, what happens when you need to add a second blue, or a lighter shade of \nthe same blue? Do you then have “Ocean Blue”, “Lighter Ocean Blue”, “Winter \nBlue”, “Sky Blue”, and so on? You need a more semantic (i.e. logical) approach \nto naming.\nFor example, following a colour audit of their website, Hipmunk \n(8.9) \ndiscovered they were not only using a wide array of colours for warnings and \nerrors, but the names they had given these colours were likely contributing \nto so many new colours being introduced. Below \n(fig 8.2) is a sample of what \ntheir audit discovered:\nFIG 8.2 A colour audit reveals none semantic",
      "metadata": {
        "startIndex": 9387,
        "endIndex": 10387,
        "chunkIndex": 12,
        "section": "3. Or perhaps they are proposing a new and improved pattern.",
        "globalChunkIndex": 250
      }
    },
    {
      "id": "chunk-251",
      "text": "y had given these colours were likely contributing \nto so many new colours being introduced. Below \n(fig 8.2) is a sample of what \ntheir audit discovered:\nFIG 8.2 A colour audit reveals none semantic names and rogue colours\nA name like “Alert Red” works on its own — it’s clear to designers and \ndevelopers what the colour’s intent is. However, if you also have “Warning \nRed”, “Warning Pink”, and “Hip Error” — like Hipmunk do — then you have a \nproblem.\nLater in this chapter, we’ll look at how to create and name a system of colours \nusing a similar approach to Google Material \n(8.10), who created a range of \n8.9 uxdesign.cc/hipmunk-design-system-part-1-colors-ux-case-study-\n1ac99806aabd\n8.10 material.io/design/color/the-color-system.html\n\n150\ncolours based off one brand colour. Something like this (fig 8.3):\nFIG 8.3 Light and dark variants generated from a base colour\nNote their numeric naming conventions.",
      "metadata": {
        "startIndex": 10187,
        "endIndex": 11105,
        "chunkIndex": 13,
        "section": "3. Or perhaps they are proposing a new and improved pattern.",
        "globalChunkIndex": 251
      }
    },
    {
      "id": "chunk-252",
      "text": "color/the-color-system.html\n\n150\ncolours based off one brand colour. Something like this (fig 8.3):\nFIG 8.3 Light and dark variants generated from a base colour\nNote their numeric naming conventions. The higher the number, the darker \nthe colour.\n“The Material Design color system uses an organized approach to \napplying color to your UI. Dark and light variants of each color can \nthen be applied to your UI in different ways. The variants help create \na color theme that is harmonious, ensuring accessible text, and \ndistinguishing UI elements and surfaces from one another.”\n8.11 brand.opentable.com/color/\n\nsYsteMAtIsInG tHe DesIGn  151\nYou don’t have to assign numeric values to make naming conventions work, \nbut you do need some logic in place. In stark contrast to Google Material, \nOpenTable \n(8.11) name their two primary brand colours “Early Girl” and \n“Blueberry” \n(fig 8.4):\nFIG 8.4 OpenTable’s colour system documentation\nOn their own they are arguably confusing, but they make more",
      "metadata": {
        "startIndex": 10905,
        "endIndex": 11902,
        "chunkIndex": 14,
        "section": "3. Or perhaps they are proposing a new and improved pattern.",
        "globalChunkIndex": 252
      }
    },
    {
      "id": "chunk-253",
      "text": "ble \n(8.11) name their two primary brand colours “Early Girl” and \n“Blueberry” \n(fig 8.4):\nFIG 8.4 OpenTable’s colour system documentation\nOn their own they are arguably confusing, but they make more sense when \nyou see them in the context of their secondary brand colours \n(fig 8.5). Their \nprimary brand colour, “Blueberry” is blue, but they also have two colours \nnamed “Blue” and “Teal” in their secondary palette.\nYou can certainly argue OpenTable are walking a fine line, semantically, but in \nthis case, their use of a ‘human’ name for their brand primary colours is fitting \nto their brand ethos. It would get messy if they named all their colours so \nrandomly, but confining the quirky names to the primary brand colours, then \nusing more distinctive naming conventions for their other colours, creates just \nenough distinction for it to work.\nWe’ll cover the logic behind OpenTable’s use of colour more in the next \nchapter.\n\n152\nColour system\nColour is tricky.",
      "metadata": {
        "startIndex": 11702,
        "endIndex": 12674,
        "chunkIndex": 15,
        "section": "3. Or perhaps they are proposing a new and improved pattern.",
        "globalChunkIndex": 253
      }
    },
    {
      "id": "chunk-254",
      "text": "ntions for their other colours, creates just \nenough distinction for it to work.\nWe’ll cover the logic behind OpenTable’s use of colour more in the next \nchapter.\n\n152\nColour system\nColour is tricky. It’s easy to say: “Our brand colours are X, Y, and Z. Only use \nthese colours.” But then, with such a limited colour palette, what do you use for \na hover state? What do you use to communicate an error? If you want to create \na subtle differential in content using a background colour, what do you use?\nA colour audit I conducted at a previous job uncovered several different shades \nof the ‘same’ colour. The actual brand colour had been lost over time.\nWe’ve all done it. You ‘need’ a new colour. You open up your colour picker \nand drag the picker slightly up/down/left/right, picking the colour that feels \nright. This is ‘fine’ for one-off website projects, but not for a team of designers \nworking on the same product(s).",
      "metadata": {
        "startIndex": 12474,
        "endIndex": 13402,
        "chunkIndex": 16,
        "section": "3. Or perhaps they are proposing a new and improved pattern.",
        "globalChunkIndex": 254
      }
    },
    {
      "id": "chunk-255",
      "text": "r \nand drag the picker slightly up/down/left/right, picking the colour that feels \nright. This is ‘fine’ for one-off website projects, but not for a team of designers \nworking on the same product(s). If other designers on your team do the same \n— picking random colours, multiple times, in different scenarios — over time, \nthis results in numerous hex values (e.g. \n#b85c35) in your CSS, used erratically \nand inconsistently throughout your product. Not very systematic, is it?\nI advise you to look at colours as a system within a system. Think about these \nthings, relating to colour:\n• Your brand identity: the core colours of your brand.\n• Headers and copy: typically dark text on a light background.\nFIG 8.5 Primary and secondary colour palettes and their use cases\n\nsYsteMAtIsInG tHe DesIGn  153\n• Scenarios like navigation, links, errors, and success states.\n• Backgrounds and subtle deviations in background colours.\nTo combat designers picking random colours, I advise your design system",
      "metadata": {
        "startIndex": 13202,
        "endIndex": 14199,
        "chunkIndex": 17,
        "section": "3. Or perhaps they are proposing a new and improved pattern.",
        "globalChunkIndex": 255
      }
    },
    {
      "id": "chunk-256",
      "text": "153\n• Scenarios like navigation, links, errors, and success states.\n• Backgrounds and subtle deviations in background colours.\nTo combat designers picking random colours, I advise your design system \ninclude a range of colours to cover these brand and digital content scenarios. \nThis is where Sass — which we discussed briefly in the “Code Audits” section \nof “An Iterative Approach” chapter — can be a game-changer. For the non-\ndevelopers: think of Sass as an advanced form of CSS. It allows us to — among \nother things — systematically create new colours. We can take a base colour \nand darken it by 10%, lighten it by 10%, or adjust it by any percentage we like.\nP.S. Don’t worry if you don’t know Sass. Work with a developer. It won’t be \nhard for a front-end developer to spin this up for you. You can also use an \nonline Sass colour generator \n(8.12) to get the color values you need. And if you \nwant to learn Sass, I recommend the book, Sass for Web Designers \n(8.13) by \nDan Cederholm",
      "metadata": {
        "startIndex": 13999,
        "endIndex": 14996,
        "chunkIndex": 18,
        "section": "3. Or perhaps they are proposing a new and improved pattern.",
        "globalChunkIndex": 256
      }
    },
    {
      "id": "chunk-257",
      "text": "you. You can also use an \nonline Sass colour generator \n(8.12) to get the color values you need. And if you \nwant to learn Sass, I recommend the book, Sass for Web Designers \n(8.13) by \nDan Cederholm \n(8.14). This is the book I bought and worked through when I \nfirst learned Sass.\nDecide on a base colour for each (brand) colour in your system. For example, \nyour base colour for blue could be: \n#62a5d7. From that base colour, use Sass to \ncreate a range of colours based on that value, like so \n(fig 8.6):\nFIG 8.6 Sass generated colour sytsem\n\n154\nIn the example (fig 8.6), note the two base colours in the middle of both \nranges: “\n$blue50” and “$red50”. For each base colour I’ve created three darker \nvariants by darkening the colour in 10% increments, and three lighter variants \nby lightening the colour in 10% increments.\nA colour system like this makes it easy to choose colours for different \nscenarios without the need to introduce new, rogue colours and code.",
      "metadata": {
        "startIndex": 14796,
        "endIndex": 15769,
        "chunkIndex": 19,
        "section": "3. Or perhaps they are proposing a new and improved pattern.",
        "globalChunkIndex": 257
      }
    },
    {
      "id": "chunk-258",
      "text": "ter variants \nby lightening the colour in 10% increments.\nA colour system like this makes it easy to choose colours for different \nscenarios without the need to introduce new, rogue colours and code. For \nexample, from our colour system pictured above, you might choose \n$red50 as \nthe background colour for a button, and choose \n$red60 as the hover state, like \nin the following example \n(fig 8.7).\nThe great thing about this Sass colour system is its scalability. This process \ncan be applied to any brand colour, creating a versatile range of colours \nwith minimal effort. Best of all: if you change a brand colour, you need only \nchange the one base colour and all other colours in that range will update \nautomatically in your Sass!\nFIG 8.7 Colour system at work with different button states\nNaming colours\nAs we discussed at the beginning of this chapter, the naming conventions you \nuse for colours should be the same in the design and code.",
      "metadata": {
        "startIndex": 15569,
        "endIndex": 16518,
        "chunkIndex": 20,
        "section": "3. Or perhaps they are proposing a new and improved pattern.",
        "globalChunkIndex": 258
      }
    },
    {
      "id": "chunk-259",
      "text": "our system at work with different button states\nNaming colours\nAs we discussed at the beginning of this chapter, the naming conventions you \nuse for colours should be the same in the design and code. If a designer says to \nuse the “red30” colour, then the developer should know what they mean and \neasily be able to apply that colour.\nIt might seem extreme, but to avoid any conflict in this area, I like to name \ncolours (exactly) the same as they appear in the code, as Sass variables. \nAnything you can do to bridge the gap between design and engineering is a \npositive.\nLet’s break this naming convention down:\nFirstly: in the code, Sass variables are preceded by a “\n$”.\n\nsYsteMAtIsInG tHe DesIGn  155\nSecondly: assigning a numeric value to each colour in your range — from \nlight to dark — avoids any confusion around vague terminology like “darker” \nor “lighter”. I advise starting at something like 50 (or 100), to avoid negative \nnumbers.",
      "metadata": {
        "startIndex": 16318,
        "endIndex": 17266,
        "chunkIndex": 21,
        "section": "3. Or perhaps they are proposing a new and improved pattern.",
        "globalChunkIndex": 259
      }
    },
    {
      "id": "chunk-260",
      "text": "ch colour in your range — from \nlight to dark — avoids any confusion around vague terminology like “darker” \nor “lighter”. I advise starting at something like 50 (or 100), to avoid negative \nnumbers. In our example:\n• “50” is always the base colour.\n• “60” is darker, “70” is darker still, then “80”.\n• “40” is lighter, “30” is lighter still, then “20”.\nI use two digits, as opposed to one (e.g. 50 instead of 5), so you have the \nflexibility to add as great a range of colours as you need. For example, you could \nlater decide to go in 5% increments — instead of 10% — like in the following \nexample \n(fig 8.8), adding a $blue55 between the $blue50 and $blue60 \ncolours.\nI would recommend not having too great a range (of colour variants) in \nyour colour system. Remember the constraints we talked about earlier — \nconstraints can be a good thing.\nTry it for yourself\nYou can access and edit the Sass colour system used in our example on \nCodePen \n(8.15).",
      "metadata": {
        "startIndex": 17066,
        "endIndex": 18023,
        "chunkIndex": 22,
        "section": "3. Or perhaps they are proposing a new and improved pattern.",
        "globalChunkIndex": 260
      }
    },
    {
      "id": "chunk-261",
      "text": "ystem. Remember the constraints we talked about earlier — \nconstraints can be a good thing.\nTry it for yourself\nYou can access and edit the Sass colour system used in our example on \nCodePen \n(8.15). Access the CodePen link, then go ahead and change the hex \nvalue (e.g. \n#62a5d7) of one of the three Sass variables (e.g. $blue50) and see \nwhat happens. You can also use this code to create your own colour system!\nGuidelines for colour\nAnother good point to consider when defining a colour palette for your brand \nare the use cases and intent of each colour. Rather than having a mass palette \nof colours that can be used in any number of ways, it’s smart to define colour \ngroups, like for example, ‘Primary’, ‘Secondary’, ‘Utility’, ‘Accent’, ‘Tertiary’, and \nso on. Let’s unpack what I mean by this.\n8.12 scg.ar-ch.org\n8.13 abookapart.com/products/sass-for-web-designers\n8.14 simplebits.com\n8.15 codepen.io/roomfive/pen/ybYQZP",
      "metadata": {
        "startIndex": 17823,
        "endIndex": 18755,
        "chunkIndex": 23,
        "section": "3. Or perhaps they are proposing a new and improved pattern.",
        "globalChunkIndex": 261
      }
    },
    {
      "id": "chunk-262",
      "text": "y’, ‘Accent’, ‘Tertiary’, and \nso on. Let’s unpack what I mean by this.\n8.12 scg.ar-ch.org\n8.13 abookapart.com/products/sass-for-web-designers\n8.14 simplebits.com\n8.15 codepen.io/roomfive/pen/ybYQZP\n\n156\nFIG 8.9 Distinctive primary colours of two different brands\nPrimary brand colours\nPrimary brand colours are arguably the most important. They are typically \nthe core colours that make up your brand. For example, EE’s primary brand \ncolours are aqua and yellow, where Coca-Cola’s are red and white \n(fig 8.9). \nPrimary brand colours tend to be used for prominent elements like calls to \naction and backgrounds. They may also be used for large headers, but are \nless likely to be used for copy (if only for their accessibility). For example the \nFIG 8.8 Sass generated colour sytsem\n\nsYsteMAtIsInG tHe DesIGn  157\nyellow in EE’s brand (fig 8.9), used for copy text, wouldn’t be legible on a white \nbackground.\nFIG 8.9 Distinctive primary colours of two different brands\nUtility colours\nUtility",
      "metadata": {
        "startIndex": 18555,
        "endIndex": 19551,
        "chunkIndex": 24,
        "section": "3. Or perhaps they are proposing a new and improved pattern.",
        "globalChunkIndex": 262
      }
    },
    {
      "id": "chunk-263",
      "text": "InG tHe DesIGn  157\nyellow in EE’s brand (fig 8.9), used for copy text, wouldn’t be legible on a white \nbackground.\nFIG 8.9 Distinctive primary colours of two different brands\nUtility colours\nUtility colours tend to be colours like black and shades of gray. They are used \nfor copy and headers. They pair well and contrast with the primary colours, \nto create distinction and hierarchy. Keep accessibility in mind when defining \nutility colours, making sure any grayscale colours you use for copy are legible \non a light background colour.\nSecondary, tertiary, or accent colours\nAny other colours in your palette — in addition to primary and utility — are \nmore of a ‘supporting cast’. Secondary, tertiary, accent — or whatever you call \nthem — colours should be used less frequently than your core primary and \nutility colours. These colours can be functional, like red for warnings or green \nfor success.",
      "metadata": {
        "startIndex": 19351,
        "endIndex": 20258,
        "chunkIndex": 25,
        "section": "3. Or perhaps they are proposing a new and improved pattern.",
        "globalChunkIndex": 263
      }
    },
    {
      "id": "chunk-264",
      "text": "accent — or whatever you call \nthem — colours should be used less frequently than your core primary and \nutility colours. These colours can be functional, like red for warnings or green \nfor success. Or they can be complementary, giving you greater flexibility in \nyour designs for things like background colours, for example.\nLimited text styles\nMoving on from colour. You should explore a wide variety of scenarios to \ndiscover the different text styles needed in your product. Aim to consistently \nuse a limited number of text styles, and only create new text styles when you \nneed them. You probably don’t need that many.\nI would aim for only a few header styles, and a few copy styles.\n\n158\nDepending on your brand and use cases of your design system, you may want \nto keep the application of these text styles flexible, or document specific use \ncases for each style. For example, a specific header style might be so large and \nimposing that the documentation instructs limited and specific use",
      "metadata": {
        "startIndex": 20058,
        "endIndex": 21059,
        "chunkIndex": 26,
        "section": "3. Or perhaps they are proposing a new and improved pattern.",
        "globalChunkIndex": 264
      }
    },
    {
      "id": "chunk-265",
      "text": "se text styles flexible, or document specific use \ncases for each style. For example, a specific header style might be so large and \nimposing that the documentation instructs limited and specific use cases \nfor it. Take the example below, from the Plasma design system \n(8.16). This \nFIG 8.10 Two patterns using the same text style\n\nsYsteMAtIsInG tHe DesIGn  159\nparticular text style is so large, it’s only intended (and documented) use cases \nare in the two patterns \n(fig 8.10):\nSimilarly, a larger copy style might be intended only for opening paragraphs \nof copy or used to distinguish quotes. You might have a text style intended to \nbe the default text style for all body copy in articles, blog posts, web pages, and \nso on. And a particularly small copy style might be limited to use cases like \ncaptions, footnotes, and warnings.\nImportantly, you should document any formatting guidelines for each text \nstyle.",
      "metadata": {
        "startIndex": 20859,
        "endIndex": 21779,
        "chunkIndex": 27,
        "section": "3. Or perhaps they are proposing a new and improved pattern.",
        "globalChunkIndex": 265
      }
    },
    {
      "id": "chunk-266",
      "text": "and \nso on. And a particularly small copy style might be limited to use cases like \ncaptions, footnotes, and warnings.\nImportantly, you should document any formatting guidelines for each text \nstyle. If your team doesn’t understand the significance of, or logic behind each \ntext style, then how do you expect them to apply them correctly?\nFIG 8.11 Text styles from clubofthewaves.com\n8.16 roomfive.net/plasma-design-system/\n\n160\nTake the example (fig 8.11). Looking only at three text styles from this design \nsystem, the following guidelines apply:\n• Headers should never end with a period (“.”).\n• All header styles except ‘Title 1’ should be sentence case (with the exception \nof names of places and people).\n• ‘Title 1’ should always be lowercase.\nEditable components\nEstablishing a shared library of editable components is key to unlocking the \nspeed, ease, and efficiency design systems can bring to the design process. I’m \ntalking about designers being able to:",
      "metadata": {
        "startIndex": 21579,
        "endIndex": 22579,
        "chunkIndex": 28,
        "section": "3. Or perhaps they are proposing a new and improved pattern.",
        "globalChunkIndex": 266
      }
    },
    {
      "id": "chunk-267",
      "text": "ry of editable components is key to unlocking the \nspeed, ease, and efficiency design systems can bring to the design process. I’m \ntalking about designers being able to:",
      "metadata": {
        "startIndex": 22379,
        "endIndex": 23379,
        "chunkIndex": 29,
        "section": "3. Or perhaps they are proposing a new and improved pattern.",
        "globalChunkIndex": 267
      }
    },
    {
      "id": "chunk-268",
      "text": "“Maintaining a Design System” chapter).\nPerhaps most importantly, a library of editable components practically \nremoves any chance of designers deviating from the established system \ncomponents, as you can control what is and isn’t editable about each \ncomponent. So for a button: you want designers on your team to be able to edit \nthe text on the button, but you don’t want them to edit the font family, font \nweight, font size, font colour, background colour, border-radius, height, and so \non.\nIt’s important to lock down the design of components in a shared library, \nhowever, if you do want to edit one instance of a component, some design \ntools make it easy to do so. For example, Sketch symbols \n(8.17) allow you to set \noverrides for specific parts of a component (e.g. you can edit just the text, or \nthe icon and the text).\nContinuing with our Sketch symbols example: as well as being editable, \nsymbols are also responsive, and are intended to be reused multiple times in \nyour design",
      "metadata": {
        "startIndex": 0,
        "endIndex": 998,
        "chunkIndex": 0,
        "section": "4. Sync any updates made to the component (we’ll cover this in the",
        "globalChunkIndex": 268
      }
    },
    {
      "id": "chunk-269",
      "text": "the text, or \nthe icon and the text).\nContinuing with our Sketch symbols example: as well as being editable, \nsymbols are also responsive, and are intended to be reused multiple times in \nyour design mockups. The idea is that you edit the master symbol in one place, \nand your change is applied in every instance the symbol is used! This can \nbe really powerful in designs where a component is used dozens of times in \ndifferent mockups, artboards, and scenarios.\nThe following screenshot \n(fig 8.12) shows a symbol with the Overrides panel \nopen to the right of the screen. The example shows that I can only edit the \n\nsYsteMAtIsInG tHe DesIGn  161\ntext (“View photographer”) and nothing else about this particular button \ncomponent.\nFIG 8.12 Editable symbol with overrides in Sketch\nI would love to show you how powerful a design library of system components \ncan be, but it’s hard to do so in print.",
      "metadata": {
        "startIndex": 798,
        "endIndex": 1701,
        "chunkIndex": 1,
        "section": "4. Sync any updates made to the component (we’ll cover this in the",
        "globalChunkIndex": 269
      }
    },
    {
      "id": "chunk-270",
      "text": "s particular button \ncomponent.\nFIG 8.12 Editable symbol with overrides in Sketch\nI would love to show you how powerful a design library of system components \ncan be, but it’s hard to do so in print. So I’ve created a Skillshare class \n(8.18) \nshowing how I currently (at the time of this book’s publication) set up editable, \nresponsive, and syncable symbols in Sketch.\nFIG 8.13 Colour system at work with different button states\nCover all states of components\nYour design system and library should include all possible states for each \ncomponent. For example, a button might have a normal, hover, and disabled \nstate. The image above \n(fig 8.13) shows three states for the same button \ncomponent — its normal, hover, and disabled states.\n\n162\nAside from obvious states like a button’s hover state, or a text input’s \nplaceholder and value states — remember that all or most of your system \ncomponents will likely have different states to cover a wide variety of product \ninteractions and scenarios.",
      "metadata": {
        "startIndex": 1501,
        "endIndex": 2502,
        "chunkIndex": 2,
        "section": "4. Sync any updates made to the component (we’ll cover this in the",
        "globalChunkIndex": 270
      }
    },
    {
      "id": "chunk-271",
      "text": "r a text input’s \nplaceholder and value states — remember that all or most of your system \ncomponents will likely have different states to cover a wide variety of product \ninteractions and scenarios. For example, components like radio buttons \nand checkboxes come in ‘checked’ and ‘unchecked’ states. They can also be \ngrouped by ‘fieldset’, requiring a ‘legend’ to make sense of what the options are \n(for accessibility and a good user experience).\nBelow \n(fig 8.14) is an example of design system documentation for radio \nbuttons, with a visual demonstrating the different states, and text explaining \nthe what, why, where, and when of using this component. The components \nseen in this visual \n(fig 8.14) are all easily accessible by the team working with \nthis design system — which the Skillshare class \n(8.18) mentioned earlier \ncovers how to create and setup.\nFIG 8.14 plasma.guide/form-specs/\nProviding your designers with easy access to these different states, types, \nand groupings of",
      "metadata": {
        "startIndex": 2302,
        "endIndex": 3297,
        "chunkIndex": 3,
        "section": "4. Sync any updates made to the component (we’ll cover this in the",
        "globalChunkIndex": 271
      }
    },
    {
      "id": "chunk-272",
      "text": "lshare class \n(8.18) mentioned earlier \ncovers how to create and setup.\nFIG 8.14 plasma.guide/form-specs/\nProviding your designers with easy access to these different states, types, \nand groupings of components (plus documentation) is a real timesaver, and \nensures consistent systematic design. It also removes the guesswork for \ndevelopers; if you fail to define the styles for these alternate states, they may go \n8.17 sketch.com/docs/symbols/\n8.18 skl.sh/2xWBObZ\n\nsYsteMAtIsInG tHe DesIGn  163\nrogue and invent their own, sometimes with less than desirable results.\nPattern library\nCreating a library of established patterns can be as valuable as a component \nlibrary. For example, if you’re creating a new template (or page) for a website, \nchances are that web page will use the same global footer (pattern) as the rest \nof your website. Creating an easily accessible (and insertable) footer pattern \nwill save your design team a lot of time, and avoid any confusion on the \ndevelopment",
      "metadata": {
        "startIndex": 3097,
        "endIndex": 4090,
        "chunkIndex": 4,
        "section": "4. Sync any updates made to the component (we’ll cover this in the",
        "globalChunkIndex": 272
      }
    },
    {
      "id": "chunk-273",
      "text": "bal footer (pattern) as the rest \nof your website. Creating an easily accessible (and insertable) footer pattern \nwill save your design team a lot of time, and avoid any confusion on the \ndevelopment side.\nThe image below \n(fig 8.15) is an example of a responsive footer pattern — \nready and easily accessible to drop into any design mockups.\nFIG 8.15 A responsive pattern ready to insert into design mockups\n\n164\nResponsive design\nI’ve always tried to encourage responsive design with visual design teams I’ve \nworked with. Your design library can help with this. At the time of writing this, \ndesign tools like Sketch are brilliant for creating responsive components, but \nFIG 8.16 A responsive pattern from clubofthewaves.com\n\nsYsteMAtIsInG tHe DesIGn  165\nnot so great for (some) responsive patterns. Patterns are more susceptible to \nthings like content wrapping, variable heights, and stacking of content (e.g.",
      "metadata": {
        "startIndex": 3890,
        "endIndex": 4807,
        "chunkIndex": 5,
        "section": "4. Sync any updates made to the component (we’ll cover this in the",
        "globalChunkIndex": 273
      }
    },
    {
      "id": "chunk-274",
      "text": "hewaves.com\n\nsYsteMAtIsInG tHe DesIGn  165\nnot so great for (some) responsive patterns. Patterns are more susceptible to \nthings like content wrapping, variable heights, and stacking of content (e.g. 3 \ncolumns on desktop become 1 column on mobile).\nIf the design tool you use can’t effectively achieve a responsive pattern, then \nyour design library should at least cover how the pattern appears at different \nbrowser widths or device sizes. For example, see how the footer pattern \n(fig 8.15) and the following example pattern (fig 8.16) respond at three \ndifferent browser widths.\nHaving responsive, established design system patterns like the example above, \ndesigned and ready to easily drop into future design mockups is a valuable \ntimesaver, and ensures your design team don’t recreate them — slightly \ndifferent each time — introducing unintentional amendments to the code, or \nrogue elements being introduced.\nDesign tokens and Sass variables\nThis is one of the rare points in this book",
      "metadata": {
        "startIndex": 4607,
        "endIndex": 5604,
        "chunkIndex": 6,
        "section": "4. Sync any updates made to the component (we’ll cover this in the",
        "globalChunkIndex": 274
      }
    },
    {
      "id": "chunk-275",
      "text": "m — slightly \ndifferent each time — introducing unintentional amendments to the code, or \nrogue elements being introduced.\nDesign tokens and Sass variables\nThis is one of the rare points in this book where we’ll cover a more code-\nfocussed topic. While the execution of design tokens and Sass variables is \na task for a developer, and very much a code-based thing, they are based on \nsystematic design decisions (made by designers). So let’s cover it — that way \nyou can sound super smart when you ask developers about it! ;)\nAs this is a project that requires designers and developers working together, \nmy advice is to strike up a conversation with the developer(s) on your team that \ncares most about the front-end, and ask them about creating Sass variables \nand design tokens.\nWe talked about Sass variables relating to colour earlier in this chapter. Sass \nvariables are a valuable asset in design systems.",
      "metadata": {
        "startIndex": 5404,
        "endIndex": 6317,
        "chunkIndex": 7,
        "section": "4. Sync any updates made to the component (we’ll cover this in the",
        "globalChunkIndex": 275
      }
    },
    {
      "id": "chunk-276",
      "text": "-end, and ask them about creating Sass variables \nand design tokens.\nWe talked about Sass variables relating to colour earlier in this chapter. Sass \nvariables are a valuable asset in design systems. They are snippets of code used \nrepeatedly throughout a code base, but controlled from one central source. \nIf you change a Sass variable or design token at the source, it will change \neverywhere it is used!\nIn the words of Salesforce’s Lightning design system:\n“Design tokens are the visual design atoms of the design system \n— specifically, they are named entities that store visual design \nattributes. We use them in place of hard-coded values (such as hex \nvalues for color or pixel values for spacing) in order to maintain a \nscalable and consistent visual system for UI development.”\n\n166\nThe Lightning design system’s documentation has an entire page dedicated \nto its design tokens, categorised by their function.",
      "metadata": {
        "startIndex": 6117,
        "endIndex": 7039,
        "chunkIndex": 8,
        "section": "4. Sync any updates made to the component (we’ll cover this in the",
        "globalChunkIndex": 276
      }
    },
    {
      "id": "chunk-277",
      "text": "ntain a \nscalable and consistent visual system for UI development.”\n\n166\nThe Lightning design system’s documentation has an entire page dedicated \nto its design tokens, categorised by their function. The screenshot \n(fig 8.17) \nshows their design tokens relating to colour.\nDesign tokens are very similar to Sass variables, in that they are (ultimately) \nsnippets of code used repeatedly throughout a product, controlled from one \ncentral source. Sass variables and design tokens can work harmoniously \ntogether to give you a great deal of control over the system at large.\nFIG 8.17 lightningdesignsystem.com/design-tokens/\n\nsYsteMAtIsInG tHe DesIGn  167sYsteMAtIsInG tHe DesIGn  167\nStrike up a \nconversation with \nthe developer on \nyour team that \ncares most about the \nfront-end, and ask \nthem about creating \nSass variables and \ndesign tokens.\n\n168\nThe difference between a Sass variable and a design token\nA Sass variable is a generic, reusable value — it can be applied in a great \nnumber of",
      "metadata": {
        "startIndex": 6839,
        "endIndex": 7837,
        "chunkIndex": 9,
        "section": "4. Sync any updates made to the component (we’ll cover this in the",
        "globalChunkIndex": 277
      }
    },
    {
      "id": "chunk-278",
      "text": "bout creating \nSass variables and \ndesign tokens.\n\n168\nThe difference between a Sass variable and a design token\nA Sass variable is a generic, reusable value — it can be applied in a great \nnumber of different scenarios. For example, it could be a brand colour, which \ncan be applied to anything from headers to copy, backgrounds, links, buttons, \nicons, and so on.\nA design token is a more specific value, but it’s also reusable. A design token \ncan serve specific purposes, like specifying:\n• Section colours\n• Background colours for use in specific scenarios or patterns\n• Small spacing, versus large spacing\n• Font sizes\n• 5% opacity, versus 50% opacity\n• Global states for ‘disabled’ and ‘active’\nDesign tokens essentially store design decisions — like colour, size, and \nspace — which can be systematically applied throughout a product.\nUse cases\nIf you only introduce Sass variables in your CSS, you’ll have made a big \nimprovement.",
      "metadata": {
        "startIndex": 7637,
        "endIndex": 8577,
        "chunkIndex": 10,
        "section": "4. Sync any updates made to the component (we’ll cover this in the",
        "globalChunkIndex": 278
      }
    },
    {
      "id": "chunk-279",
      "text": "decisions — like colour, size, and \nspace — which can be systematically applied throughout a product.\nUse cases\nIf you only introduce Sass variables in your CSS, you’ll have made a big \nimprovement. But even Sass variables have their drawbacks, systematically \nspeaking. For example, take these two scenarios: Option 1 and Option 2. In \nboth cases we want to apply a background colour to a website (applying CSS to \nthe \nbody tag).\nDesign token\n$color-background-light: #ffffff;\nThe design token can be applied in the CSS like so:\nbody {\n  background-color: $color-background-light;\n}\nFIG 8.18 Option 1: design token\n\nsYsteMAtIsInG tHe DesIGn  169\nOption 1 (design token)\nThe first option uses a design token. We’ll use a real design token from the \nLightning design system, called: \n$color-background-light. This design \ntoken is simply the colour white (\n#ffffff). Our design token and CSS look like \nthis \n(fig 8.18).\nOption 2 (Sass variable)\nThe second option instead uses a Sass variable to",
      "metadata": {
        "startIndex": 8377,
        "endIndex": 9374,
        "chunkIndex": 11,
        "section": "4. Sync any updates made to the component (we’ll cover this in the",
        "globalChunkIndex": 279
      }
    },
    {
      "id": "chunk-280",
      "text": "round-light. This design \ntoken is simply the colour white (\n#ffffff). Our design token and CSS look like \nthis \n(fig 8.18).\nOption 2 (Sass variable)\nThe second option instead uses a Sass variable to apply the background colour. \nOur Sass variable and CSS look like the following \n(fig 8.19):\nSass variable:\n$white: #ffffff;\nThe Sass variable can be applied in the CSS like so:\nbody { \n  background-color: $white; \n}\nFIG 8.19 Option 2: Sass variable\nSo far so good. Both options look very similar, and both work fine!\nNow, consider this:\n• The Sass variable we used (\n$white) is incredibly generic, and is used in \ndozens of places throughout our website. It could be used for text colours, \nsvg colours, or any other object that is white.\n• In contrast, the design token we used (\n$color-background-light) is \nspecifically used as a background colour.\nScenario: we want to change our website’s background colour to be a slightly \noff-white colour (or any light colour).",
      "metadata": {
        "startIndex": 9174,
        "endIndex": 10174,
        "chunkIndex": 12,
        "section": "4. Sync any updates made to the component (we’ll cover this in the",
        "globalChunkIndex": 280
      }
    },
    {
      "id": "chunk-281",
      "text": "light) is \nspecifically used as a background colour.\nScenario: we want to change our website’s background colour to be a slightly \noff-white colour (or any light colour).",
      "metadata": {
        "startIndex": 9974,
        "endIndex": 10974,
        "chunkIndex": 13,
        "section": "4. Sync any updates made to the component (we’ll cover this in the",
        "globalChunkIndex": 281
      }
    },
    {
      "id": "chunk-282",
      "text": "to a design token intended only for scenarios just like or similar to this one. \nChanging from white to a new colour will likely be fine.\n\n170",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "1. In Option 1 (design token) we’d be okay, as we’d be making a global change",
        "globalChunkIndex": 282
      }
    },
    {
      "id": "chunk-283",
      "text": "several places — changing the colour of the Sass variable to a new colour \ncould cause problems elsewhere in our website.\nIt’s complicated, I know. But you should consider these caveats when deciding \non design tokens and their use cases in your system.\nBuzzFeed’s Solid design system uses design tokens for specific use cases of \nFIG 8.20 solid.buzzfeed.com/colors.html\n\nsYsteMAtIsInG tHe DesIGn  171\ncolour in text (fig 8.20), links, and even SVG fill colours.\nNotice: Solid’s design token \n$text-green is intended to be used to make text \ngreen (obviously), but it’s not saying specifically what green colour. Designating \na token for a specific scenario is good, since you may use a darker shade of \ngreen for text (for legibility purposes), and a lighter shade of green for icons or \nbackground colours — in which case you could also have tokens like: \n$icon-\ngreen\n and $background-green.\nLonely Planet’s design system, Rizzo \n(fig 8.21), includes design token \ndocumentation for colour that",
      "metadata": {
        "startIndex": 0,
        "endIndex": 998,
        "chunkIndex": 0,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 283
      }
    },
    {
      "id": "chunk-284",
      "text": "d colours — in which case you could also have tokens like: \n$icon-\ngreen\n and $background-green.\nLonely Planet’s design system, Rizzo \n(fig 8.21), includes design token \ndocumentation for colour that are clearly and effectively presented and \norganised by function (e.g. “UI background and borders”, or “section colours”). \nA really neat feature on this page is the ability to copy the hex value to your \nclipboard simply by clicking on the colour.\nFIG 8.21 rizzo.lonelyplanet.com/styleguide/design-elements/ui-colours\n\n172\nCombining Sass variables and design tokens, for the win\nIf you want to get really smart, you can combine the two together to form the \nmost efficient, scalable, and easily updatable system \n(fig 8.23):\nDesign token and Sass variable combined:\n$white: #ffffff;\n$color-background-light: $white;\nOur Option 1 and 2 scenario (from earlier) is now a little \neasier to solve:\n$white: #ffffff;\n$off-white: #f9f9f9;\n$color-background-light: $white;\n$color-background-light:",
      "metadata": {
        "startIndex": 798,
        "endIndex": 1788,
        "chunkIndex": 1,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 284
      }
    },
    {
      "id": "chunk-285",
      "text": "-background-light: $white;\nOur Option 1 and 2 scenario (from earlier) is now a little \neasier to solve:\n$white: #ffffff;\n$off-white: #f9f9f9;\n$color-background-light: $white;\n$color-background-light: $off-white;\nFIG 8.23 Combining Sass variables with design tokens\nFIG 8.22 vueds.com/example/#/Design Tokens\n\nsYsteMAtIsInG tHe DesIGn  173\nNow for a full example! Don’t worry if you don’t know code, I’ve attempted to \nbreak down what’s happening to show Sass variables, design tokens, CSS, and \nHTML at work \n(fig 8.24):\nSass variable:\n$blue50: #62A5D7;\nDesign token, using the Sass variable:\n$brand-color-primary: $blue50;\nDesign token applied to a text style in the CSS:\n.primary-header {\n  color: $brand-color-primary;\n}\nCSS applied to a header in the HTML:\n<h1 class=”primary-header”>Hello</h1>\nFIG 8.24 Sass variables, design tokens, CSS, and HTML\nThe above code gives us this in the browser:\n\n174\nNow, to use our same example again.",
      "metadata": {
        "startIndex": 1588,
        "endIndex": 2527,
        "chunkIndex": 2,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 285
      }
    },
    {
      "id": "chunk-286",
      "text": "a header in the HTML:\n<h1 class=”primary-header”>Hello</h1>\nFIG 8.24 Sass variables, design tokens, CSS, and HTML\nThe above code gives us this in the browser:\n\n174\nNow, to use our same example again. If we add a new Sass variable ($red50), \nthen change our \n$brand-primary design token to use $red50 instead of \n$blue50, the change will ‘auto-magically’ take effect in the front-end (website). \nLike so \n(fig 8.25):\nSass variable:\n$blue50: #62A5D7;\n$red50: #b85c35;\nDesign token, using the Sass variable:\n$brand-color-primary: $blue50;\n$brand-color-primary: $red50;\nFIG 8.25 Combining Sass variables with design tokens\nThe above code gives us this in the browser:\nThis might seem like a simple change (in our example), but imagine these \ndesign tokens used in dozens or hundreds of places throughout a product! You \ncan see how powerful design tokens can be.\nNot just for colour!\nWe’ve only looked at colour so far, but Sass variables and design tokens can \nbe used for anything from font families to",
      "metadata": {
        "startIndex": 2327,
        "endIndex": 3328,
        "chunkIndex": 3,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 286
      }
    },
    {
      "id": "chunk-287",
      "text": "product! You \ncan see how powerful design tokens can be.\nNot just for colour!\nWe’ve only looked at colour so far, but Sass variables and design tokens can \nbe used for anything from font families to font sizes, line heights, spacing \n(margins and padding), radius, shadow, and so on. They can be used for \nanything that’s reused consistently throughout a product. For example, the \nVue design system documentation \n(fig 8.22) also includes design tokens for \nspacing.\n\nsYsteMAtIsInG tHe DesIGn  175\nIt’s good practice to use consistent spacing in digital design, and chances are \nyou’ve defined some logic for that spacing. If you’re obsessive like me, you \nmight like working with simple numbers that are divisible by 5 — something \nlike: 5px, 10px, 15px, 20px, 30px, 60px, 90px, 120px. Or if you’re using a grid \nsystem — like the ‘8-point grid system’ — you would use: 8px, 16px, 24px, 32px, \n40px, 48px, 56px, and so on.\nFIG 8.26 primer.style/css/support/spacing\nGitHub’s Primer design system",
      "metadata": {
        "startIndex": 3128,
        "endIndex": 4126,
        "chunkIndex": 4,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 287
      }
    },
    {
      "id": "chunk-288",
      "text": "’re using a grid \nsystem — like the ‘8-point grid system’ — you would use: 8px, 16px, 24px, 32px, \n40px, 48px, 56px, and so on.\nFIG 8.26 primer.style/css/support/spacing\nGitHub’s Primer design system uses the 8-point grid system, and they’ve \nincluded a page \n(fig 8.26) in their documentation relating to their variables \nused for consistent spacing. Notice in their system: it’s smart that they’ve \nadditionally added a variable for 4px. A minimum spacing of 8px is a little \nlimiting.\nDesigner access to code\nI’d like to make an argument for granting designers (not just developers) access \nto the code. This will scare some, and excite others. Developers can be very \nprotective of their code bases, with good reason. However, they also don’t \nlove getting ‘bugged’ by designers to make (seemingly) small updates to the \ncode. The easiest way to avoid this is for designers to gain access to the code \n\n176\nthemselves.",
      "metadata": {
        "startIndex": 3926,
        "endIndex": 4849,
        "chunkIndex": 5,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 288
      }
    },
    {
      "id": "chunk-289",
      "text": "owever, they also don’t \nlove getting ‘bugged’ by designers to make (seemingly) small updates to the \ncode. The easiest way to avoid this is for designers to gain access to the code \n\n176\nthemselves. Design tokens make this process so much easier.\nEven if a designer only has access to the design tokens and Sass variables, they \ncan achieve a lot — quickly — without disturbing developers. If they want to \nchange the colour blue used in X scenarios, they can. If they want to increase \nthe space between X and Y elements throughout the product, they can.\nDesigners that code\nWeb designers having even a little knowledge of code will go a long way. I can’t \nrecommend enough that designers get comfortable with — at least — CSS \nand HTML. It simply will make you a better web designer if you gain a deeper \nunderstanding of your craft. You may be surprised by how much you enjoy it. \nIt’s fun and very satisfying to bring your own creations to life, and iterate on \nthem in the browser!\nThat said,",
      "metadata": {
        "startIndex": 4649,
        "endIndex": 5648,
        "chunkIndex": 6,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 289
      }
    },
    {
      "id": "chunk-290",
      "text": "deeper \nunderstanding of your craft. You may be surprised by how much you enjoy it. \nIt’s fun and very satisfying to bring your own creations to life, and iterate on \nthem in the browser!\nThat said, even if you’re not planning to build websites yourself, a little \nknowledge of code is all you need to update things like design tokens. I really \nbelieve that anything that brings designers and developers closer together is a \ngood thing. Speak to the developers on your team about gaining access to the \ncode.\nIf you want to go deeper into the realms of ‘the role of development in design’, \ncheck out this article \n(8.19) I wrote on responsive design.\nTracking and organising system tasks\nAs you may be realising, creating a design library is a lot of work! You’re \ngoing to need to get organised, keep track of ‘to-dos’, and know who’s doing \nwhat (on your team and/or across your different teams). Everyone has their \npreferences for tracking tasks and delegating.",
      "metadata": {
        "startIndex": 5448,
        "endIndex": 6418,
        "chunkIndex": 7,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 290
      }
    },
    {
      "id": "chunk-291",
      "text": "oing to need to get organised, keep track of ‘to-dos’, and know who’s doing \nwhat (on your team and/or across your different teams). Everyone has their \npreferences for tracking tasks and delegating. Some use tools like GitHub \nIssues, Basecamp, Dropbox Paper, Asana, or Jira. My tool of choice for tracking \nmassive projects like product and system design is Trello \n(8.20).\nI love the simplicity of Trello. It allows you to create boards to track projects, \nmilestones, or sprints. Within each board, you can create cards to represent \ntasks. Within each card, you can describe the task, and create checklists \n8.19 medium.com/@andrewcouldwell/responsive-design-af7a1f14b991\n8.20 trello.com\n8.21 roomfive.net/adobe-portfolio/\n\nsYsteMAtIsInG tHe DesIGn  177\nfor everything that needs to happen to complete the task. You can sort the \nchecklists by sub-headers, drag and drop everything to re-order and prioritise, \nset a due date, add attachments, assign cards to different team members, and \nyour",
      "metadata": {
        "startIndex": 6218,
        "endIndex": 7217,
        "chunkIndex": 8,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 291
      }
    },
    {
      "id": "chunk-292",
      "text": "omplete the task. You can sort the \nchecklists by sub-headers, drag and drop everything to re-order and prioritise, \nset a due date, add attachments, assign cards to different team members, and \nyour team can comment on tasks.\nThe example screenshot \n(fig 8.27) is of my Trello board from 2015/16, which I \nused while designing Adobe Portfolio \n(8.21):\nFIG 8.27 My Trello borad from 2015 while designing Adobe Portfolio\nThe columns (fig 8.27) are different boards I created to mark milestones and \ntrack tasks (cards) that needed to be completed. For context, all the green \nmarkers signify that I’d completed those tasks (bearing in mind this is an old \nTrello board!) — back in 2015/16, there would have been a sea of red markers \non this board, which I gradually turned to green over time!\nThis was a massive project spanning system design, product design, web \ndesign, marketing, and brand. Organisation for so many tasks and deadlines \nwas crucial.",
      "metadata": {
        "startIndex": 7017,
        "endIndex": 7971,
        "chunkIndex": 9,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 292
      }
    },
    {
      "id": "chunk-293",
      "text": "I gradually turned to green over time!\nThis was a massive project spanning system design, product design, web \ndesign, marketing, and brand. Organisation for so many tasks and deadlines \nwas crucial. This was my first real test of Trello, and it served me well! The text \nis small, but perhaps you can make out \n(fig 8.27) that some of the tasks only \nhad one checklist item to complete the task, where others had 20+ checklist \nitems.\n\n178\nOne of my favourite features is when you ‘tick’ tasks off a checklist — or \nadd more tasks — a percentage complete bar dynamically fills to show your \nprogress. It’s painfully nerdy, I know, but there’s something very satisfying \nabout checking tasks off and seeing your progress. You can see in the \nscreenshot below \n(fig 8.28) that the first checklist is 100% complete, but the \nsecond checklist is only 82% complete.\nFIG 8.28 Checklists to track to-dos and progress of tasks",
      "metadata": {
        "startIndex": 7771,
        "endIndex": 8692,
        "chunkIndex": 10,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 293
      }
    },
    {
      "id": "chunk-294",
      "text": "You can see in the \nscreenshot below \n(fig 8.28) that the first checklist is 100% complete, but the \nsecond checklist is only 82% complete.\nFIG 8.28 Checklists to track to-dos and progress of tasks\n\nsYsteMAtIsInG tHe DesIGn  179\nLook how far we’ve come!\nWe’ve covered a lot in this chapter, from creating a shared design system \nlibrary of editable components, to pattern libraries, responsive design, naming \nconventions, working with colours, text styles, spacing, designers writing code, \nand creating design tokens. My hope is that you now have a good idea of how to \ngo about systematising your designs and working more efficiently as a team.\nNext we’re going to talk about a very important part of creating a design \nsystem: the documentation.\n\n180\nDocument everything!\n180\n09\nDoc— \nument \nevery— \nthing!\nLAYInG tHe FounDAtIons\n\nDoCuMent eVerYtHInG!  181\nDocumentation is fundamentally important for design systems.",
      "metadata": {
        "startIndex": 8492,
        "endIndex": 9415,
        "chunkIndex": 11,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 294
      }
    },
    {
      "id": "chunk-295",
      "text": "system: the documentation.\n\n180\nDocument everything!\n180\n09\nDoc— \nument \nevery— \nthing!\nLAYInG tHe FounDAtIons\n\nDoCuMent eVerYtHInG!  181\nDocumentation is fundamentally important for design systems. Don’t be \nfooled by this chapter appearing so late in this book — this isn’t an indication \nthat you should leave documentation until last. You shouldn’t. You should \ndocument design and code as you progress, as part of your process.\nMore than a style guide\nA system wouldn’t be a system without rules and guidelines, which is why \ndocumentation is one of the main things that distinguishes a design system \nfrom a simple style guide or a UI kit.\nA ‘UI kit’ needs less introduction than a style guide — you’ve probably seen \nUI kits on Dribbble and Behance, or as free downloads promoting a service or \nvendor. They look cool, but that’s all they are: just a random assortment of cool-\nlooking design elements.",
      "metadata": {
        "startIndex": 9215,
        "endIndex": 10126,
        "chunkIndex": 12,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 295
      }
    },
    {
      "id": "chunk-296",
      "text": "robably seen \nUI kits on Dribbble and Behance, or as free downloads promoting a service or \nvendor. They look cool, but that’s all they are: just a random assortment of cool-\nlooking design elements. They often deal with ideals, and can be put to use any \nway you wish — because they didn’t (really) have a specific use case in the first \nplace, as they’re often not based in reality, with real content, problems, users, \nor businesses.\nWhere a UI kit could be applied to anything, a style guide is usually more \ncomprehensive and focussed on a real product. ‘Style guide’ might be one of \nthe most confusing terms in digital design. You might even disagree with my \ndefinition of it, but as we’ve covered in this book: speaking the same language, \nor at least having a shared understanding is important. So, let’s define what \nstyle guides are...\nStyle guides are a valuable addition to web design projects; they’re something \nI almost always deliver to a client alongside responsive web page",
      "metadata": {
        "startIndex": 9926,
        "endIndex": 10920,
        "chunkIndex": 13,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 296
      }
    },
    {
      "id": "chunk-297",
      "text": "important. So, let’s define what \nstyle guides are...\nStyle guides are a valuable addition to web design projects; they’re something \nI almost always deliver to a client alongside responsive web page designs. \nThey single out foundations (e.g. text styles and colours) and components (e.g. \nbuttons and inputs) from a design — identifying them as deliberate design \ndecisions that are used consistently throughout a product. A style guide also \ncovers things that aren’t obvious in design mockups — things like hover states, \nerror states, and so on.\nA style guide is a form of documentation, but not necessarily a design system \n(in its simplest of forms). They are valuable for developers to build from, and \nthey keep designers in-check, but they lack depth. They showcase design \nsystem elements, but they generally don’t explain why, where, when, and how \nto use any of those elements.\nA simple style guide is like a diagram of all the elements that make up a piece \nof IKEA furniture without",
      "metadata": {
        "startIndex": 10720,
        "endIndex": 11718,
        "chunkIndex": 14,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 297
      }
    },
    {
      "id": "chunk-298",
      "text": "s, but they generally don’t explain why, where, when, and how \nto use any of those elements.\nA simple style guide is like a diagram of all the elements that make up a piece \nof IKEA furniture without the instructions telling you how to assemble them. \nYou might build something that resembles the picture on the box, or you might \n\n182\ncreate something entirely different.\nThe Disqus style guide \n(fig 9.1) is a good example of a simple style guide, which \ndocuments the basics like colour, typography, and brand, but doesn’t go into \ndetail of how to use them. This can be useful, and it serves a purpose, but it \nleaves a lot to interpretation.\nFIG 9.1 disqus.com/pages/style-guide/\nAll this isn’t to say that if you don’t have documentation, you don’t have a \ndesign system. That’s not true, so long as you’ve been designing systematically. \nIt’s more to say that if you’re going to all the effort of designing and building a \ndesign system, then you should do everything possible to ensure people",
      "metadata": {
        "startIndex": 11518,
        "endIndex": 12519,
        "chunkIndex": 15,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 298
      }
    },
    {
      "id": "chunk-299",
      "text": "g as you’ve been designing systematically. \nIt’s more to say that if you’re going to all the effort of designing and building a \ndesign system, then you should do everything possible to ensure people use it \n\nDoCuMent eVerYtHInG!  183\n‘properly’ and sustainably.\nThe basics\nDocumentation acts as a source of truth  —  a reference point. If you’re \nunsure how to approach, do, write, format, design, or build something ,   the \ndocumentation is where you’ll find the answer! It benefits everyone, from the \nmost junior to the most senior members of your team, and it’s great for on-\nboarding new team members.\nDocumentation:\n• Demystifies our design and code decisions.\n• Helps to keep all people working with the system on the same page.\n• Helps to onboard new team members.\n• Tracks revisions to the system, to keep everyone in the loop.\n• It makes your company look really smart!\n Helps recruit new talent.\nBetter together\nAs I’ve emphasised throughout this book, when creating a design system it’s",
      "metadata": {
        "startIndex": 12319,
        "endIndex": 13320,
        "chunkIndex": 16,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 299
      }
    },
    {
      "id": "chunk-300",
      "text": "system, to keep everyone in the loop.\n• It makes your company look really smart!\n Helps recruit new talent.\nBetter together\nAs I’ve emphasised throughout this book, when creating a design system it’s \nimportant to be mindful that you won’t be the only person who works with \nit. We make very deliberate design decisions when we design systematically, \nmeaning the decisions we make about font size, text styles, spacing, colour, \nand animation are made for a reason. These decisions are then applied \nrepetitively and consistently across multiple elements in the system.\nThe guidelines and decisions you make when designing a system are no \ngood just in your head. They shouldn’t be communicated on a ‘need to \nknow’ basis. Everybody needs to know.\nThe key is to make documentation part of your (design and build) process. \nDon’t leave documentation until the end, or as an afterthought. If you do, it \nmight never get done, or you’ll forget what you’re actually documenting.\nDon’t get caught up in",
      "metadata": {
        "startIndex": 13120,
        "endIndex": 14119,
        "chunkIndex": 17,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 300
      }
    },
    {
      "id": "chunk-301",
      "text": "ign and build) process. \nDon’t leave documentation until the end, or as an afterthought. If you do, it \nmight never get done, or you’ll forget what you’re actually documenting.\nDon’t get caught up in how your documentation looks. Just get the reasoning \nbehind your design decisions out of your head and into some form of \ndocumentation. You can make it look pretty later. We’ll talk more about how to \nformat and present the documentation later in this chapter. First, a few further \npoints to demonstrate why documenting design systems is important.\n\n184184\nA simple style guide \nis like a diagram of \nall the elements \nthat make up a \npiece of IKEA \nfurniture without \nthe instructions \ntelling you how to \nassemble them.\n\nDoCuMent eVerYtHInG!  185DoCuMent eVerYtHInG!  185\nYou might build \nsomething that \nresembles the \npicture on the box,\nor you might create \nsomething entirely \ndifferent. This \nis why you need \ndocumentation.",
      "metadata": {
        "startIndex": 13919,
        "endIndex": 14855,
        "chunkIndex": 18,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 301
      }
    },
    {
      "id": "chunk-302",
      "text": "VerYtHInG!  185DoCuMent eVerYtHInG!  185\nYou might build \nsomething that \nresembles the \npicture on the box,\nor you might create \nsomething entirely \ndifferent. This \nis why you need \ndocumentation.\n\n186\nDon’t leave documentation until last\nDocumentation should never be left to the end of a project. Don’t just take it \nfrom me — Airbnb \n(9.1) regretted not documenting sooner:\n“...This project required us to operate within a tight timeline, which \ncaused us to overlook some of the documentation process. Lacking \nthorough documentation created some confusion that could have \nbeen avoided. Just like with coding, documenting systems as they \nare created is paramount to the process. It has to be done sooner or \nlater, and documenting throughout the creation process allows for \nsmoother decision-making.”\nTo put some of what we’ve covered thus far in this chapter into perspective, \nI’ll reflect on my experience back in 2014-16 when I was designing the Adobe \nPortfolio product \n(9.2) at",
      "metadata": {
        "startIndex": 14655,
        "endIndex": 15649,
        "chunkIndex": 19,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 302
      }
    },
    {
      "id": "chunk-303",
      "text": "cision-making.”\nTo put some of what we’ve covered thus far in this chapter into perspective, \nI’ll reflect on my experience back in 2014-16 when I was designing the Adobe \nPortfolio product \n(9.2) at Behance. I’ll be honest, I didn’t progress the design \nsystem as far as I would have liked or should have. I defined the brand \nfoundations, designed every component and pattern, and created product \nflows and prototypes for every feature. It was more than enough to get the \nproduct built and launched, but I didn’t write any documentation. I should \nhave.\nNot to beat myself up too much; the annotated designs and style guides I \nFIG 9.2 Design spec from the Adobe Portfolio product\n\nDoCuMent eVerYtHInG!  187\ncreated were very detailed. I even defined the CSS on them! But ‘red-line’ \ndesign specs aren’t good enough. They’re a form of documentation — sure — \nbut they don’t go into enough detail. These specs were more than enough to \nget the product into development, but they left a lot to",
      "metadata": {
        "startIndex": 15449,
        "endIndex": 16445,
        "chunkIndex": 20,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 303
      }
    },
    {
      "id": "chunk-304",
      "text": "pecs aren’t good enough. They’re a form of documentation — sure — \nbut they don’t go into enough detail. These specs were more than enough to \nget the product into development, but they left a lot to interpretation on the \ndesign side — which wasn’t enough for designers to work with in the future.\nTo demonstrate what I mean by ‘red-line’ design specs, \nfig 9.2 is a spec I \ncreated for a “Remote” (in the Adobe Portfolio product).\nI would describe \nfig 9.2 — at best — as a style guide or spec for a design system \npattern. It details every state and scenario. The text is tiny in the picture (as \nit’s presented in this book), but take it from me: the annotations clearly define \nthe sizes, spacing, and specifications. However, it leaves many unanswered \nquestions:\n• Why does it look like it does?\n• Why a draggable remote versus a fixed menu item?\n• What exactly does this pattern do?\n• How does it respond to X scenario in the live product?\n• What happens when I click the links versus the",
      "metadata": {
        "startIndex": 16245,
        "endIndex": 17242,
        "chunkIndex": 21,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 304
      }
    },
    {
      "id": "chunk-305",
      "text": "does?\n• Why a draggable remote versus a fixed menu item?\n• What exactly does this pattern do?\n• How does it respond to X scenario in the live product?\n• What happens when I click the links versus the toggles?\n• What happens if the remote is dragged off-screen?\nNone of the answers are obvious from the design alone. The above questions \nabout logic, systematic design, and functionality don’t just help designers \nunderstand how to work with the system, they also help developers build it! \nIn fact, some of the bullet points above were real questions I was asked by \ndevelopers working on this product with me.\nWithout documentation, we leave patterns like this open to interpretation. \nThe next designer (or team of designers) who iterates on this pattern are going \nto have questions. With no answers to those questions, they will do their own \nthing, and the system that governed the original design will take a different \npath.\nSimilarly, the following image \n(fig 9.3) shows button components",
      "metadata": {
        "startIndex": 17042,
        "endIndex": 18041,
        "chunkIndex": 22,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 305
      }
    },
    {
      "id": "chunk-306",
      "text": "wers to those questions, they will do their own \nthing, and the system that governed the original design will take a different \npath.\nSimilarly, the following image \n(fig 9.3) shows button components from the \nsame product.\n9.1 airbnb.design/building-a-visual-language/\n9.2 roomfive.net/adobe-portfolio/\n\n188\nThis style guide specifies everything needed to build the component, but no \ninformation as to:\n• Why are there different types of buttons?\n• When and why should I use a blue button, versus a green button?\n• When and why should I use a text link, versus a button?\n• Can I pair the different colours and types of buttons together?\n• Can we, and do we have guidelines for including icons in buttons?\nFIG 9.3 A style guide for button components\n\nDoCuMent eVerYtHInG!  189\nI can tell you that — in this design system — the meaning behind the colours \nis important, and there very definitely are guidelines for when to use each type \nof button, and how they pair together.",
      "metadata": {
        "startIndex": 17841,
        "endIndex": 18818,
        "chunkIndex": 23,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 306
      }
    },
    {
      "id": "chunk-307",
      "text": "I can tell you that — in this design system — the meaning behind the colours \nis important, and there very definitely are guidelines for when to use each type \nof button, and how they pair together. The logic for all of this should have been \ndocumented, or the original intent could be lost.\nWe are talking somewhat in ideals here. In reality, things don’t always unfold \nas optimally as they should. For this particular project, time was very much \na factor. I make my excuses, but this experience taught me a valuable lesson. \nWhat I should have done was to document the design system as it was \nbeing designed — as part of the design process, rather than waiting until a \nconvenient time... Later... Or in this case never (I moved on from Adobe a \ncouple months after this product’s launch). This issue is, I’m sure, something \nmost of you can relate to. Failing to document your design decisions is \nsometimes genuinely unavoidable.",
      "metadata": {
        "startIndex": 18618,
        "endIndex": 19557,
        "chunkIndex": 24,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 307
      }
    },
    {
      "id": "chunk-308",
      "text": "from Adobe a \ncouple months after this product’s launch). This issue is, I’m sure, something \nmost of you can relate to. Failing to document your design decisions is \nsometimes genuinely unavoidable. But often times we’re just making excuses, \nand it costs our teams, products, and users down the road. \nDocument as you go\nA good way to approach documentation is to think about what questions \nsomeone might have about what you (or your team) designed. There are no \nstupid questions, really. What’s obvious to you might not be obvious to others. \nGet it all out of your head, and documented.\n• Write guidelines that act as a source of truth, or reference material.\n• Explain what ‘it’ is.\n• When, where, why, and how do you use it?\n• Document and/or demonstrate any functionality, animation, or conditional \nlogic.\n• Lead by example and show example use cases.\n• Include as much detail as is appropriate.",
      "metadata": {
        "startIndex": 19357,
        "endIndex": 20263,
        "chunkIndex": 25,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 308
      }
    },
    {
      "id": "chunk-309",
      "text": "hy, and how do you use it?\n• Document and/or demonstrate any functionality, animation, or conditional \nlogic.\n• Lead by example and show example use cases.\n• Include as much detail as is appropriate. You can even include the code!\nWhat should you document?\nThis is not a comprehensive list of everything you should document, but here \nare some basics to get you started:\nDo’s and don’ts\nThroughout your documentation, it can be useful to give example use \ncases of how to do (or not do) something. As they say: ‘a picture is worth a \nthousand words’. Seeing is believing. Showing an example scenario where \nyour guidelines apply can be key to helping people understand context and \napplication.\n\n190190\nFIG 9.5 material.io/design/components/tooltips.html\nFIG 9.4 bbc.co.uk/gel/guidelines/accordion\n\nDoCuMent eVerYtHInG!  191\nThe BBC example (fig 9.4) simply uses a wireframe to demonstrate the \ncorrect and incorrect way of designing an accordion.",
      "metadata": {
        "startIndex": 20063,
        "endIndex": 21011,
        "chunkIndex": 26,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 309
      }
    },
    {
      "id": "chunk-310",
      "text": "s.html\nFIG 9.4 bbc.co.uk/gel/guidelines/accordion\n\nDoCuMent eVerYtHInG!  191\nThe BBC example (fig 9.4) simply uses a wireframe to demonstrate the \ncorrect and incorrect way of designing an accordion. The Google Material \nexample \n(fig 9.5) goes into more detail, using real scenarios from a product to \ndemonstrate how tooltips should look and function.\nImportantly: in both cases, the example use case imagery is accompanied by \ntext explaining what’s wrong or right about each approach. Don’t assume your \naudience can identify right or wrong themselves — this is about education, it’s \nnot a test.\nColour\nDon’t just output a colour palette and hope people use it correctly. A swatch of \ncolours (alone) can be used in a limitless number of ways. Write guidelines for:\n• Why did you choose these brand colours?\n• What is their intent? When and why would you use X colour over Y colour?\n• Include useful information like its hex value (e.g.",
      "metadata": {
        "startIndex": 20811,
        "endIndex": 21753,
        "chunkIndex": 27,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 310
      }
    },
    {
      "id": "chunk-311",
      "text": "ways. Write guidelines for:\n• Why did you choose these brand colours?\n• What is their intent? When and why would you use X colour over Y colour?\n• Include useful information like its hex value (e.g. \n#b85c35) and its name.\n• How do you reference a colour in the code?\n• Show example use cases.\nOpenTable specify each colour’s name, hex value, a list of acceptable use cases \nfor each colour, and even give insight into their thinking behind the colour. \nThe more insight into the design decisions you give, the better the system’s \nadopters will understand and apply the system. Referencing the OpenTable \nexample \n(fig 9.6):\n“Early Girl is our star for experiences targeting our diners: the \nprimary color in our corporate identity. Early girl conveys the \nenergy and passion we invest in connecting our diners to new \nexperiences and the warmth of great hospitality.”\n“Blueberry is primarily used as a secondary action color.",
      "metadata": {
        "startIndex": 21553,
        "endIndex": 22482,
        "chunkIndex": 28,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 311
      }
    },
    {
      "id": "chunk-312",
      "text": "tity. Early girl conveys the \nenergy and passion we invest in connecting our diners to new \nexperiences and the warmth of great hospitality.”\n“Blueberry is primarily used as a secondary action color. In our \nrestaurant-focused marketing efforts, we focus on efficient service \nand streamlined reservation tools, and our blue is a calming \nassurance of our loyalty to business support.”\n\n192\nIn contrast to OpenTable’s primary brand colours (fig 9.6) — and a more \nextensive secondary palette of equally bright colours — they also have a simple \n“Neutrals” palette \n(fig 9.7), intended mainly for headers and copy.\nHere’s how they describe this ‘neutrals’ palette:\n“There are colors used for action and attention, while others are \nused for utility. These neutral colors are meant to pair well with the \nprimary and secondary action colors and provide balance within the \nlarger palette.”\nConsistent and intentional use of colour is not only good for reinforcing a \nbrand’s identity and message – it",
      "metadata": {
        "startIndex": 22282,
        "endIndex": 23281,
        "chunkIndex": 29,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 312
      }
    },
    {
      "id": "chunk-313",
      "text": "he \nprimary and secondary action colors and provide balance within the \nlarger palette.”\nConsistent and intentional use of colour is not only good for reinforcing a \nbrand’s identity and message – it also aids the user experience. For example, \nit’s good practice to use prominent and consistent colours for calls to action \nin order to draw attention to them. If you use too many different colours for \nthings like buttons and links, it becomes unclear what is actionable, and what \nisn’t. \nFIG 9.6 Primary brand colour palette\n\nDoCuMent eVerYtHInG!  193\nOpenTable’s colour documentation defines acceptable use cases for each \ncolour:\n• Their secondary colour palette is only for use in background colours. Not \ncalls to action, headers, or copy.\n• The only colours used for calls to action (e.g. buttons and links) are their two \nprimary colours.\n• Their neutrals palette is used primarily for headers and copy — clearly \ndistinguishing copy from calls to action.\nFIG 9.7",
      "metadata": {
        "startIndex": 23081,
        "endIndex": 24055,
        "chunkIndex": 30,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 313
      }
    },
    {
      "id": "chunk-314",
      "text": "r calls to action (e.g. buttons and links) are their two \nprimary colours.\n• Their neutrals palette is used primarily for headers and copy — clearly \ndistinguishing copy from calls to action.\nFIG 9.7 brand.opentable.com/color/\nBrand identity\nBranding and logos can be a big investment of time and money, so protect your \nbrand by documenting how it should be used. Some things to consider:\n• Are there any guidelines for logo size?\n• Can the logo overlay an image, or should it only be used on a plain \nbackground?\n• Can the colours be changed? Can the logo be all white to use on a dark \nbackground, or all black to use on a light background?\n\n194194\nThe guidelines and \ndecisions you make \nwhen designing a \nsystem are no good \njust in your head. \nThey’re not ‘need to \nknow’. Everyone \non your team \nneeds to know.\n\nDoCuMent eVerYtHInG!  195\n• What should we use for a Twitter avatar?\n• Where do I find a vector download for this asset?\nFIG 9.8 brand.opentable.com/logo/\nTo use another example",
      "metadata": {
        "startIndex": 23855,
        "endIndex": 24852,
        "chunkIndex": 31,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 314
      }
    },
    {
      "id": "chunk-315",
      "text": "team \nneeds to know.\n\nDoCuMent eVerYtHInG!  195\n• What should we use for a Twitter avatar?\n• Where do I find a vector download for this asset?\nFIG 9.8 brand.opentable.com/logo/\nTo use another example (fig 9.8) from OpenTable’s digital brand guidelines: a \nnice touch here is that they include a rationale for why the logo looks the way it \ndoes. This may seem trivial to some, but the ethos behind their brand identity \nis core to the design of their companies services and products. Understanding \nthis is key to working with their design system:\n“With just a few shapes, our logo says a lot. It symbolizes the \nconnection we forge between restaurants and diners, the way we \nhelp diners find the perfect fit, and the fact that our customers are \nalways our focus.”\nOpenTable’s documentation for their logo is comprehensive. In addition to \ntheir rationalisation of the logos’ design, they cover:\n• Guidelines for the different ways it can be presented (“Lockups”).\n• The minimum size the various",
      "metadata": {
        "startIndex": 24652,
        "endIndex": 25650,
        "chunkIndex": 32,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 315
      }
    },
    {
      "id": "chunk-316",
      "text": "heir logo is comprehensive. In addition to \ntheir rationalisation of the logos’ design, they cover:\n• Guidelines for the different ways it can be presented (“Lockups”).\n• The minimum size the various versions should be used.\n• Guidelines on spacing.\n\n196\n• Do’s and don’ts.\n• A download of the digital assets.\n• And as seen below \n(fig 9.9): the “preferred treatment” of the logo, including \nwhat to do when that’s not an option.\nFIG 9.9 Preferred treatments of logo (example use cases)\nTypography\nUsing a consistent and limited set of text styles, font-families, and font-weights \nsimplifies the complexity of a user interface and lowers the cognitive load for \nthe user. It also reduces the page load time, makes the text more legible, and \nreduces the amount of code required. As someone who’s built many websites \ndesigned by other designers, I can tell you with confidence: sticking to a \nconsistent range of text styles is something many designers fail to do.\nFor typefaces and font-weights:\n•",
      "metadata": {
        "startIndex": 25450,
        "endIndex": 26450,
        "chunkIndex": 33,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 316
      }
    },
    {
      "id": "chunk-317",
      "text": "lt many websites \ndesigned by other designers, I can tell you with confidence: sticking to a \nconsistent range of text styles is something many designers fail to do.\nFor typefaces and font-weights:\n• Limit the number of typefaces and font-weights you use.\n• Note that the more typefaces (and different weights of fonts) you use, the \nslower your page will load, particularly for users on mobile phone/cellular \nnetworks. So consider this: do you need to use semi-bold and bold font-\nweights? Pick one.\n\nDoCuMent eVerYtHInG!  197DoCuMent eVerYtHInG!  197\nUsing a consistent \nand limited set of \ntext styles, font \nfamilies, and font \nweights simplifies \nthe complexity of \na user interface and \nlowers the cognitive \nload for the user.\n\n198\n• Define intent for each typeface. Why and when should you use typeface X \nover Y? For example, do you use a serif to distinguish headers and a sans-\nserif for copy?\nFor text styles:\n• Aim to create a broad range of text styles that cover different scenarios.",
      "metadata": {
        "startIndex": 26250,
        "endIndex": 27250,
        "chunkIndex": 34,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 317
      }
    },
    {
      "id": "chunk-318",
      "text": "se typeface X \nover Y? For example, do you use a serif to distinguish headers and a sans-\nserif for copy?\nFor text styles:\n• Aim to create a broad range of text styles that cover different scenarios. \nDon’t just suggest a body text style and a headline text style, consider cases \nlike subheaders, leading paragraphs, blockquotes, bulleted lists, image \ncaptions, and so on.\n• You probably don’t need a header text style in 19px and 20px font-size. Pick \none.\n• What does each text style look like?\n• Document, at a minimum, each style’s font-size, line-height, and letter-\nspacing.\n• Do different header and copy styles have specific margins or padding?\n• If appropriate, provide some context as to when to use each text style. Do \nyou have a default size for copy? A particularly large or small text-size was \nlikely created for a specific use case. If so, document that intent.\nI like how Marvel’s typography documentation \n(fig 9.10) includes a little write-\nup on why they chose the typeface",
      "metadata": {
        "startIndex": 27050,
        "endIndex": 28047,
        "chunkIndex": 35,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 318
      }
    },
    {
      "id": "chunk-319",
      "text": "text-size was \nlikely created for a specific use case. If so, document that intent.\nI like how Marvel’s typography documentation \n(fig 9.10) includes a little write-\nup on why they chose the typeface they did.\n“Marvel’s primary typeface is Fakt Soft Pro — a robust typeface with \nlegible numbers that renders well at all sizes. It is soft and friendly, \nyet plain enough to get out of the way and let the user’s designs \nshine.”\nI like how BBC GEL document “Type in action” (fig 9.11) — showing how \nand where to use different typefaces and text styles with simple wireframe \nexamples.\nCopywriting\nYour brand likely has a tone of voice and a style to adhere to for copywriting; \nthese guidelines will apply for all copy across your digital brand, whether \nit’s marketing copy, headers, labels, or error messages. If everyone on your \nteam writes their own copy ‘as they speak’, your brand won’t have a unified \nvoice, and won’t communicate as effectively as it could.",
      "metadata": {
        "startIndex": 27847,
        "endIndex": 28815,
        "chunkIndex": 36,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 319
      }
    },
    {
      "id": "chunk-320",
      "text": "ng copy, headers, labels, or error messages. If everyone on your \nteam writes their own copy ‘as they speak’, your brand won’t have a unified \nvoice, and won’t communicate as effectively as it could. So be sure your \ndocumentation includes answers to questions such as:\n• What is our brand’s tone of voice? Is it assertive, friendly, bold, etc.?\n\nDoCuMent eVerYtHInG!  199DoCuMent eVerYtHInG!  199\nFIG 9.11 bbc.co.uk/gel/guidelines/typography\nFIG 9.10 marvelapp.com/styleguide/design/typography\n\n200\n• What words do we use? Do we say “Hey!” or “Hello”? Do we say “employee” \nor “team member”?\n• Do we use sentence case, or title case for headers?\n• Do we include a period at the end of headers?\n• How do we format date, time, and currency? Do we write “June 24, 1982” or \n“24th June, 1982”?\n• Are we concerned about localisation/internationalisation?\nFor more tips on documenting copywriting, take a look back at the “Brand \nTone of Voice and Copywriting” section in the “Laying the Foundations”",
      "metadata": {
        "startIndex": 28615,
        "endIndex": 29611,
        "chunkIndex": 37,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 320
      }
    },
    {
      "id": "chunk-321",
      "text": "we concerned about localisation/internationalisation?\nFor more tips on documenting copywriting, take a look back at the “Brand \nTone of Voice and Copywriting” section in the “Laying the Foundations” \nchapter in this book.\nComponents\nComponents come in many sizes, shapes, colours, and types. Make sure you \ncapture them all, plus all their variations and states. Some basic considerations \nfor your documentation to get you started: \n• Demonstrate what the component looks like, including all its different states \n(e.g. placeholder, value, hover, error, disabled).\nFIG 9.12 primer.style/css/components/buttons\n\nDoCuMent eVerYtHInG!  201\n• Provide context as to why and when you would use the component.\n• When should we use one type of button over another?\n• Do form inputs need a placeholder?\n• Do we hide or show labels above — or inline with — form inputs?\nThe Primer design system by GitHub has great documentation for their button \ncomponents \n(fig 9.12).",
      "metadata": {
        "startIndex": 29411,
        "endIndex": 30374,
        "chunkIndex": 38,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 321
      }
    },
    {
      "id": "chunk-322",
      "text": "form inputs need a placeholder?\n• Do we hide or show labels above — or inline with — form inputs?\nThe Primer design system by GitHub has great documentation for their button \ncomponents \n(fig 9.12). They have example live components you can interact \nwith to really get a feel for how they work. They also show how to apply them \nin the code, and include a little write-up as to their use cases. This write-up is \nimportant, especially in cases like Primer where there are multiple types of \nbuttons — as it provides context as to when to use each variant.\nFIG 9.13 Clear breakdowns of components\nThe following two images are examples of text input (fig 9.14) and button \n(fig 9.15) component documentation I’ve created. Where the Primer \ndocumentation \n(fig 9.12) is a living style guide — using dynamic, interactive \ncomponents from production — I like to use (static) visuals to demonstrate all \nthe different states of each component.",
      "metadata": {
        "startIndex": 30174,
        "endIndex": 31114,
        "chunkIndex": 39,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 322
      }
    },
    {
      "id": "chunk-323",
      "text": "documentation \n(fig 9.12) is a living style guide — using dynamic, interactive \ncomponents from production — I like to use (static) visuals to demonstrate all \nthe different states of each component. This allows me to be more explicit as to \ntheir different states.\nWhile live, interactive components are great, they do leave a lot to \ninterpretation. With this in mind, perhaps it’s worth doing both (include a \nlive interactive component and a static mockup of all its states). Where static \nvisuals require more work to maintain, they can be really valuable to foster \n\n202\nunderstanding of how the component works, as they allow you to clearly \ndemonstrate all the different states of the component (I’ll discuss the pros and \ncons of using dynamic examples in your documentation later in this chapter.)\nFIG 9.15 plasma.guide/buttons/\nFIG 9.14 plasma.guide/form-specs/\nWhen documenting components, I also like to include the basic CSS; this \nallows me to be even more explicit about the",
      "metadata": {
        "startIndex": 30914,
        "endIndex": 31905,
        "chunkIndex": 40,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 323
      }
    },
    {
      "id": "chunk-324",
      "text": "n this chapter.)\nFIG 9.15 plasma.guide/buttons/\nFIG 9.14 plasma.guide/form-specs/\nWhen documenting components, I also like to include the basic CSS; this \nallows me to be even more explicit about the component’s makeup — plus \nI believe it’s healthy for designers to be exposed to CSS and get a sense for \nhow things are made \n(fig 9.14). I also include annotated breakdowns of the \n\nDoCuMent eVerYtHInG!  203\ncomponent (fig 9.13 + 9.15), and written guidelines of their makeup (e.g. \nspacing, sizes, and other specifications), and example use cases.\nAtlassian do a nice job of annotating the makeup of their components (fig 9.16) \nand patterns \n(fig 9.17):\nFIG 9.17 atlassian.design/guidelines/product/patterns/forms\nFIG 9.16 atlassian.design/guidelines/product/components/text-field\n\n204204\nFailing to document \nour design decisions \nis sometimes \nunavoidable. But \noften times we’re just \nmaking excuses, and \nit costs our teams, \nproducts, and users \ndown the road.\n\nDoCuMent eVerYtHInG!",
      "metadata": {
        "startIndex": 31705,
        "endIndex": 32697,
        "chunkIndex": 41,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 324
      }
    },
    {
      "id": "chunk-325",
      "text": "Failing to document \nour design decisions \nis sometimes \nunavoidable. But \noften times we’re just \nmaking excuses, and \nit costs our teams, \nproducts, and users \ndown the road.\n\nDoCuMent eVerYtHInG!  205\nPatterns\nPatterns are the larger building blocks of a user interface that are used \nrepeatedly throughout a design. You should capture each of these patterns, and \nanswer questions such as: \n• Are our patterns modular? How do they work together?\n• What is the purpose of each pattern?\n• What are some example use cases?\n• How does a pattern respond at different browser widths, and on different \ndevices?\n• Is there any conditional logic, or variants to suit different content scenarios?\nBBC GEL does a really nice and very thorough job of documenting their design \npatterns \n(fig 9.18); they explain the makeup of the pattern (fig 9.19), what it is, \nwhen you could use it, any differences between iOS and Android \n(fig 9.20), and \ninclude any rules and variations.\nFIG 9.18",
      "metadata": {
        "startIndex": 32497,
        "endIndex": 33478,
        "chunkIndex": 42,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 325
      }
    },
    {
      "id": "chunk-326",
      "text": "(fig 9.18); they explain the makeup of the pattern (fig 9.19), what it is, \nwhen you could use it, any differences between iOS and Android \n(fig 9.20), and \ninclude any rules and variations.\nFIG 9.18 bbc.co.uk/gel/guidelines/category/design-patterns\n\n206\nThey even include guidelines and designs for edge cases, such as:\n• What happens if JavaScript is turned off? \n(fig 9.21)\n• How do patterns respond to long words in tight spaces? (fig 9.22) They use \nthe Welsh language as an example, but you could use German, or any long \nwords in any language! Remember: use realistic (and unruly) content when \nyou design.\nFIG 9.19 Breaking down the makeup and terminology of a pattern\nBootstrap also does a nice job of documenting patterns (fig 9.23); they lead \nwith a description of the pattern (not seen in the screenshot, but visit the \nlink), several interactive example variants of the pattern, and great CSS and \nJavaScript documentation.",
      "metadata": {
        "startIndex": 33278,
        "endIndex": 34216,
        "chunkIndex": 43,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 326
      }
    },
    {
      "id": "chunk-327",
      "text": ".23); they lead \nwith a description of the pattern (not seen in the screenshot, but visit the \nlink), several interactive example variants of the pattern, and great CSS and \nJavaScript documentation. Documenting the code and use cases makes it easy \nto integrate the pattern into a project. Design system documentation is for \nyour whole team: designers and developers.\nDon’t forget the small things\nThe obvious things to document are text styles, colours, buttons, and inputs \n— but don’t forget components and patterns like avatars, pagination, tooltips, \npills, toggles, loading spinners, breadcrumbs, and so on.\nMarvel (not that Marvel) have a neat little section on how they present avatars \n(fig 9.24). It’s smart that they have a fallback to the user’s initials in the absence \nof an image. Empty states are an important thing to design for and document.\n\nDoCuMent eVerYtHInG!  207DoCuMent eVerYtHInG!",
      "metadata": {
        "startIndex": 34016,
        "endIndex": 34925,
        "chunkIndex": 44,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 327
      }
    },
    {
      "id": "chunk-328",
      "text": "It’s smart that they have a fallback to the user’s initials in the absence \nof an image. Empty states are an important thing to design for and document.\n\nDoCuMent eVerYtHInG!  207DoCuMent eVerYtHInG!  207\nFIG 9.21 What happens when JavaScript is turned off?\nFIG 9.22 Do’s and don’ts for dealing with long words\nFIG 9.20 Pattern variants for iOS and Android\n\n208\nDo you have a system philosophy covering how component and patterns are \nanimated and loaded, what border radius or drop-shadows to use, and so on? \nIf you do, document it. The Carbon design system by IBM has a section in \ntheir documentation on “Loading” \n(fig 9.25), including ‘skeleton states’ (load \nstates used to illustrate the overall architecture of the page while it’s loading), \nprogressive loading, loading spinners, and so on.\nGrid, layout, and spacing\nIt’s all very well and good to design and document a mass of components and \npatterns, but they’re effectively a UI kit without some logic for how they work \ntogether.",
      "metadata": {
        "startIndex": 34725,
        "endIndex": 35720,
        "chunkIndex": 45,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 328
      }
    },
    {
      "id": "chunk-329",
      "text": "o on.\nGrid, layout, and spacing\nIt’s all very well and good to design and document a mass of components and \npatterns, but they’re effectively a UI kit without some logic for how they work \ntogether. Document the system accounting for things like:\n• Is there consistent spacing in and around components and patterns?\n• Are patterns designed to be modular?\n• Is the design system responsive, or designed to a grid?\n• How does the layout respond at different browser widths?\n• Are there any considerations for designing for different devices?\nBBC GEL do a great job of documenting their rationale and system thinking for \ngrid, spacing, and layout \n(fig 9.26 + 9.27).\nFIG 9.23 getbootstrap.com/docs/4.2/components/carousel/\n\nDoCuMent eVerYtHInG!  209DoCuMent eVerYtHInG!  209\nFIG 9.25 carbondesignsystem.com/patterns/loading\nFIG 9.24 marvelapp.com/styleguide/components/avatars\n\n210210\nFIG 9.27 bbc.co.uk/gel/guidelines/grid\nFIG 9.26 bbc.co.uk/gel/guidelines/grid\n\nDoCuMent eVerYtHInG!",
      "metadata": {
        "startIndex": 35520,
        "endIndex": 36504,
        "chunkIndex": 46,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 329
      }
    },
    {
      "id": "chunk-330",
      "text": "arbondesignsystem.com/patterns/loading\nFIG 9.24 marvelapp.com/styleguide/components/avatars\n\n210210\nFIG 9.27 bbc.co.uk/gel/guidelines/grid\nFIG 9.26 bbc.co.uk/gel/guidelines/grid\n\nDoCuMent eVerYtHInG!  211\nLook back at the “Responsive Design” section of the “Laying the Foundations” \nchapter in this book for more on responsive design.\nDesign tokens\nWe covered what design tokens are in the previous chapter. Suffice to say, \nif you have design tokens, your documentation definitely needs to include a \nsource of truth for what they are and how to use them!\nThe Lightning design system documentation \n(fig 9.28) does a good job of \nexplaining what each design token is for. Without this context, the design \ntokens could be misused, and you could lose the advantages that come with \ncreating them in the first place.\nFIG 9.28 lightningdesignsystem.com/design-tokens/\n\n212\nHow do you document a design system?\nThis is probably the most contentious part of this chapter.",
      "metadata": {
        "startIndex": 36304,
        "endIndex": 37272,
        "chunkIndex": 47,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 330
      }
    },
    {
      "id": "chunk-331",
      "text": "at come with \ncreating them in the first place.\nFIG 9.28 lightningdesignsystem.com/design-tokens/\n\n212\nHow do you document a design system?\nThis is probably the most contentious part of this chapter. There are a \nmultitude of ways you can do this, and there are dozens of tools and resources \ncreated specifically for this task! I won’t get too into the technological depths \nof how to document a design system in this book, but you can find a list of \ngreat tools and resources on the website \n(9.3).\nSince there are so many options available to you, you should discuss amongst \nyour team what approach would be most effective for everyone. Developers are \nlikely going to be key to these discussions, as they are better placed to set up an \nenvironment to write, edit, share, maintain, and publish the documentation.\nThe basic factors you need to address are:\n• It needs to be accessible and editable by your team.\n• It needs to be easily shareable and visible to all stakeholders.\n• It can include",
      "metadata": {
        "startIndex": 37072,
        "endIndex": 38073,
        "chunkIndex": 48,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 331
      }
    },
    {
      "id": "chunk-332",
      "text": "he documentation.\nThe basic factors you need to address are:\n• It needs to be accessible and editable by your team.\n• It needs to be easily shareable and visible to all stakeholders.\n• It can include text and images (visuals are important to aid understanding).\n• It’s likely going to be large, so it needs to be easy to navigate. And the \nnavigation needs to be scalable, to grow as you add more to the system.\nAnd the nice-to-haves are:\n• Ability to include (or embed) live, interactive examples.\n• Ability to include code snippets/examples.\n• A changelog so you can track iterations to the system over time.\n• Ability to search for content.\nGetting started, the easy way\nThere’s only one rule for how to document your design systems: don’t let \ntechnology or design bias stand in the way of progress.\nIt’s easy for a designer to get swept away in the presentation and styling of \nsomething, or get intimidated by technological barriers.",
      "metadata": {
        "startIndex": 37873,
        "endIndex": 38813,
        "chunkIndex": 49,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 332
      }
    },
    {
      "id": "chunk-333",
      "text": "’t let \ntechnology or design bias stand in the way of progress.\nIt’s easy for a designer to get swept away in the presentation and styling of \nsomething, or get intimidated by technological barriers. Similarly, it’s easy for \na developer to get caught up in the most efficient or securest means of content \nmanaging, maintaining, and hosting the documentation. Both parties can be \nhighly opinionated. Don’t allow this friction to cause delay.\nI felt this friction the first time I approached design system documentation. \n9.3 designsystemfoundations.com/resources/\n\nDoCuMent eVerYtHInG!  213DoCuMent eVerYtHInG!  213\nDon’t leave \ndocumentation \nuntil the end, or as \nan afterthought. \nIf you do, it might \nnever get done. Make \ndocumentation part \nof your design and \nbuild process.\n\n214\nAs a designer and a developer, I felt almost imprisoned by the multitude of \noptions available! My initial goal — having seen so many stellar examples \nonline — was to create a custom branded website to document",
      "metadata": {
        "startIndex": 38613,
        "endIndex": 39614,
        "chunkIndex": 50,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 333
      }
    },
    {
      "id": "chunk-334",
      "text": "r and a developer, I felt almost imprisoned by the multitude of \noptions available! My initial goal — having seen so many stellar examples \nonline — was to create a custom branded website to document the system. \nThankfully, after a little research I quickly realised that the time spent thinking \nabout, researching, designing, and building this website was only delaying me \nactually creating the documentation!\nSo to get started I simply created a new Google Doc \n(9.4) and started typing.\nFIG 9.29 A screenshot from documentation I’ve created in Google Docs\nAs the document grew, I realised Google Docs covered all the basics (from the \nlist earlier) of what we needed it to do.\n• It’s simple and fast to set up and write.\n• It’s easily accessible by your team.\n• You can control privacy by setting who does and doesn’t have access to it, \nand assign levels of access — such as read or comment only.\n• Your team can comment inline, which is great for feedback and iteration.\n• You can insert",
      "metadata": {
        "startIndex": 39414,
        "endIndex": 40410,
        "chunkIndex": 51,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 334
      }
    },
    {
      "id": "chunk-335",
      "text": "etting who does and doesn’t have access to it, \nand assign levels of access — such as read or comment only.\n• Your team can comment inline, which is great for feedback and iteration.\n• You can insert images and tables for visuals and example use cases.\n9.4 google.com/docs/about/\n\nDoCuMent eVerYtHInG!  215\n• The ‘Document Outline’ feature — plus the ability to link/anchor to \nbookmarks and headings within the document — provides (good enough) \nnavigation.\nA Google Doc might not be the most exciting means of documentation, \nbut it does provide an effective and fast means of documenting everything \nfrom foundations, such as copywriting, brand tone of voice, and formatting \n(fig 9.30):\nFIG 9.30 You can use tables to format content (e.g. do’s and don’ts)\nTo documenting components (fig 9.31) and patterns (fig 9.32).\nNote: These Google Doc example screenshots are from the Plasma design \nsystem. If you’re interested, I wrote a case study (9.5) about the design and \ndocumentation of this",
      "metadata": {
        "startIndex": 40210,
        "endIndex": 41204,
        "chunkIndex": 52,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 335
      }
    },
    {
      "id": "chunk-336",
      "text": "1) and patterns (fig 9.32).\nNote: These Google Doc example screenshots are from the Plasma design \nsystem. If you’re interested, I wrote a case study (9.5) about the design and \ndocumentation of this system. \n9.5 medium.com/owl-studios/plasma-design-system-4d63fb6c1afc\n\n216216\nFIG 9.32 Documenting patterns\nFIG 9.31 Documenting components\n\nDoCuMent eVerYtHInG!  217\nGoogle Docs is a genuinely good tool for documentation, but it only takes you \nso far. Where the Plasma design system was concerned, we did experience \ngrowing pains:\n• It’s inefficient to quickly link to specific content within the document (e.g. \nfrom Slack or an email).\n• Searching for content could be easier.\n• You can’t embed live, interactive examples of components and patterns.\n• And despite your best efforts to format the content ‘nicely’, a Google \nDoc isn’t the most engaging way to present content (depending on your \naudience).\nFor what it’s worth, this particular Google Doc did its job for nearly a year while \nwe",
      "metadata": {
        "startIndex": 41004,
        "endIndex": 42003,
        "chunkIndex": 53,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 336
      }
    },
    {
      "id": "chunk-337",
      "text": "e content ‘nicely’, a Google \nDoc isn’t the most engaging way to present content (depending on your \naudience).\nFor what it’s worth, this particular Google Doc did its job for nearly a year while \nwe focussed on more pressing tasks, like actually building and implementing \nthe system! Don’t lose sight of your priorities.\nIn time, opportunities arose to evolve the documentation into more of a \n‘living style guide’, which aimed to include live examples from production and \ncode snippets, along with a more accessible, user-friendly, and branded user \nexperience.\nLiving style guides\nOne of the bigger challenges of design systems is keeping the design, code, and \ndocumentation in sync. Consider these scenarios:\n• A designer iterates on a button, the code and design library are updated, but \nthe designer forgets to update the image mockup of the button in the static \ndocumentation.\n• Similarly, if any code snippets (in the static documentation) are written \nas non-dynamic text entries, then",
      "metadata": {
        "startIndex": 41803,
        "endIndex": 42803,
        "chunkIndex": 54,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 337
      }
    },
    {
      "id": "chunk-338",
      "text": "designer forgets to update the image mockup of the button in the static \ndocumentation.\n• Similarly, if any code snippets (in the static documentation) are written \nas non-dynamic text entries, then they won’t reflect any updates made to \nthe production code, unless someone remembers to manually make the \nupdates.\nIt’s an easy mistake to make, but the documentation isn’t of much use when it’s \ndifferent to the actual design system.\nThe key difference between a living style guide and static documentation is \nthat a living style guide contains live design elements pulled directly from — \nor embedded from — the live source code. They are real and dynamic — not \n(only) an image or a mockup of a component. You can hover over a component \nand interact with it. And perhaps most importantly, they (somewhat \nautomatically) evolve as your system evolves. \n\n218\nWith a living style guide, any changes you make to production will be \nreflected in the documentation, at least where the live examples",
      "metadata": {
        "startIndex": 42603,
        "endIndex": 43603,
        "chunkIndex": 55,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 338
      }
    },
    {
      "id": "chunk-339",
      "text": "(somewhat \nautomatically) evolve as your system evolves. \n\n218\nWith a living style guide, any changes you make to production will be \nreflected in the documentation, at least where the live examples and code are \nconcerned. Any write-up concerning the foundation, component, or pattern \nwill still need to be updated.\nRegardless of whether you choose to use static or dynamic documentation, the \nmost important takeaway is this: it should be part of your process to update \nanything in your documentation that’s not automated whenever you make \nchanges to a design system.\nIf not a Google Doc, then what?\nIf you want to create more dynamic design system documentation — \nsomething more than a Google Doc — then there are a multitude of ways you \ncan do it. There are also ways to generate living style guides directly from your \ncode!\nMore and more tools and resources are being created all the time.",
      "metadata": {
        "startIndex": 43403,
        "endIndex": 44305,
        "chunkIndex": 56,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 339
      }
    },
    {
      "id": "chunk-340",
      "text": "oc — then there are a multitude of ways you \ncan do it. There are also ways to generate living style guides directly from your \ncode!\nMore and more tools and resources are being created all the time. As stated \nbefore; technology moves too fast for print, so rather than writing about them \nin this book — and risking tools becoming obsolete, or missing new tools post-\npublishing — I’ve linked to various tools and resources on this book’s website \n(9.6).\nSpinning up editable documentation and living style guides enters developer \nterritory — or at least an area where designers and developers should \nconverge. Since this is a design-focussed book, my advice is to speak to the \ndevelopers on your team and tell them you want to create design system \ndocumentation (or the Digital Foundations we spoke about earlier in this \nbook). Don’t be afraid to ask. My experience has often been that experts will \nappreciate you seeking their help.\nTell the developers you need:\n• A platform the whole team",
      "metadata": {
        "startIndex": 44105,
        "endIndex": 45106,
        "chunkIndex": 57,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 340
      }
    },
    {
      "id": "chunk-341",
      "text": "poke about earlier in this \nbook). Don’t be afraid to ask. My experience has often been that experts will \nappreciate you seeking their help.\nTell the developers you need:\n• A platform the whole team can contribute to and update on a regular basis.\n• The ability to write and format text and upload images.\n9.6 designsystemfoundations.com/resources/\n9.7 gitbook.com\n9.8 wikipedia.org/wiki/Markdown\n9.9 github.com\n\nDoCuMent eVerYtHInG!  219\n• The ability to add new pages and organise content by sections and \nsubsections.\n• A simple navigation which scales when you add new content.\n• The ability to pull in or embed real components and patterns from \nproduction (code) to demonstrate design system elements.\n• To publish the documentation online (publicly), or — if you prefer it be \nprivate — to make it password protected.\nNote: The above list isn’t comprehensive, it’s just to get you started. I advise \nthat you get together with your team to discuss the best solutions to benefit all",
      "metadata": {
        "startIndex": 44906,
        "endIndex": 45896,
        "chunkIndex": 58,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 341
      }
    },
    {
      "id": "chunk-342",
      "text": "te — to make it password protected.\nNote: The above list isn’t comprehensive, it’s just to get you started. I advise \nthat you get together with your team to discuss the best solutions to benefit all \nparties.\nFor what it’s worth, in the Plasma design system example earlier — where we \nmoved from static documentation in Google Docs to a more dynamic solution \n— we used a tool called GitBook \n(9.7).\nThe basic premise of GitBook is this: you write your documentation in \nmarkdown (9.8) (a simple formatting language) in GitHub (9.9), then GitBook \nweaves its magic to convert it into a website. Full disclosure: I’m a front-end \ndeveloper and I still struggled to get this set up on my own, so I worked with \ndevelopers on our team to get it all running — I advise you to do the same. \nOnce it was set up, it was easy to write the documentation in markdown (once \nyou get used to it), and you need only a basic understanding of HTML and CSS \nto customise the style of the site and tailor the",
      "metadata": {
        "startIndex": 45696,
        "endIndex": 46690,
        "chunkIndex": 59,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 342
      }
    },
    {
      "id": "chunk-343",
      "text": "t was set up, it was easy to write the documentation in markdown (once \nyou get used to it), and you need only a basic understanding of HTML and CSS \nto customise the style of the site and tailor the documentation to your brand. \nDon’t worry if creating a dynamic documentation website sounds too \nchallenging for now! As I said, using a simple tool like Google Docs for your \ndesign system documentation will take you far, and is much better than not \ndocumenting at all.\nWe’ve covered a lot in this chapter! Let’s take the foot off the pedal and look at \nsome inspiration for documenting design systems in the next chapter.\n\n220\nGallery\n220\n10\nGall— \nery\nLAYInG tHe FounDAtIons\n\nGALLerY  221\nIn the “Laying the Foundations” chapter of this book, we talked about \ncompanies building public websites to show off their digital brand guidelines. \nMore and more, it’s becoming common practice for companies to make their \nbrand guidelines and design system documentation public.",
      "metadata": {
        "startIndex": 46490,
        "endIndex": 47466,
        "chunkIndex": 60,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 343
      }
    },
    {
      "id": "chunk-344",
      "text": "uilding public websites to show off their digital brand guidelines. \nMore and more, it’s becoming common practice for companies to make their \nbrand guidelines and design system documentation public. Designers and \ndevelopers are publicly opening up about their code, processes, and design \nthinking.\nThe great thing about these companies sharing their documentation publicly \nis that we can learn from them! Building on the examples I’ve included \nthroughout this book, this chapter is a curation of great examples for you \nto explore, and includes a little insight into what makes them such good \nexamples.\nFIG 10.1 culture.basicagency.com\nHow a company presents its Digital Foundations and/or design system \ndocumentation in public — and the insights they provide into their design and \nengineering practices — says a lot about their culture. This in itself is a big \npart of the reason why presenting your work in the open is good — if nothing \nelse, it helps you recruit the best talent.",
      "metadata": {
        "startIndex": 47266,
        "endIndex": 48259,
        "chunkIndex": 61,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 344
      }
    },
    {
      "id": "chunk-345",
      "text": "ineering practices — says a lot about their culture. This in itself is a big \npart of the reason why presenting your work in the open is good — if nothing \nelse, it helps you recruit the best talent. \nBasic Culture\nThe Basic Culture Manual website (fig 10.1) is a first-class example of a \n\n222\ncompany flexing its muscles, giving an insight into their culture (quite literally \nin this case), and sending a firm message that: ‘We make cool shit! Hire us. \nWork with us.’\nWe looked at Basic’s website earlier in this book as a great example of \ndocumenting mission, values, and principles in the “Laying the Foundations” \nchapter. Their website is well worth a visit — if only to admire the design \nand animation — and be inspired by their values and design philosophies \n(fig 10.2). There’s something in here for everybody. \nFIG 10.2 culture.basicagency.com/our-way\nBBC GEL (Global Experience Language)\nIf you only look at one website for inspiration, look at the BBC GEL website \n(10.1).",
      "metadata": {
        "startIndex": 48059,
        "endIndex": 49049,
        "chunkIndex": 62,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 345
      }
    },
    {
      "id": "chunk-346",
      "text": "s something in here for everybody. \nFIG 10.2 culture.basicagency.com/our-way\nBBC GEL (Global Experience Language)\nIf you only look at one website for inspiration, look at the BBC GEL website \n(10.1). It includes more or less everything we covered in the “Document \nEverything” and “Laying the Foundations” chapters. GEL is a collection \nof digital brand guidelines, design system documentation, and articles on \neverything from “How to design for the (responsive) web”, to interviews with \ntheir creative teams. It’s even built into the chrome of the core BBC website; it’s \nnot a standalone website, so it all feels very inclusive and well-thought out.\nTheir “Foundations” section covers things like typography, grid, layout, \nspacing, and iconography. Their “Design Patterns” section \n(fig 10.3) has \n\nGALLerY  223\ndetailed breakdowns of established patterns (like accordions, cards, and \ncarousels) used throughout their digital properties, filtered by ‘Web’ and ‘App’.",
      "metadata": {
        "startIndex": 48849,
        "endIndex": 49822,
        "chunkIndex": 63,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 346
      }
    },
    {
      "id": "chunk-347",
      "text": "rns” section \n(fig 10.3) has \n\nGALLerY  223\ndetailed breakdowns of established patterns (like accordions, cards, and \ncarousels) used throughout their digital properties, filtered by ‘Web’ and ‘App’. \nNote: notice how each pattern shows whether there’s a recent update to a \npattern, and the date it was last updated:\nFIG 10.3 bbc.co.uk/gel/guidelines/category/design-patterns\nOne of the things I love most about GEL is how all of their documentation \nreads more like an article than documentation \n(fig 10.4). It’s well laid out and \npresented, and the content is inviting, easy to navigate and consume. Each \npage — whether it’s a “how-to” article, or documentation governing typography \nor patterns — is clearly introduced with an easy to digest overview, the latest \nupdate, and the team that contributed to the system element or editorial. Any \nrelevant downloads or links to the code are clearly visible, and each page has \na sub-navigation, which is fixed on-scroll allowing you to skip-to",
      "metadata": {
        "startIndex": 49622,
        "endIndex": 50619,
        "chunkIndex": 64,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 347
      }
    },
    {
      "id": "chunk-348",
      "text": "contributed to the system element or editorial. Any \nrelevant downloads or links to the code are clearly visible, and each page has \na sub-navigation, which is fixed on-scroll allowing you to skip-to important \n\n224224\nFIG 10.4 bbc.co.uk/gel/guidelines/category/foundations\n\nGALLerY  225\ncontent, so you can find what you’re looking for quickly.\nWhat I find particularly great is their section of “How-to” articles \n(fig 10.5). \nThis clearly demonstrates a level of care and responsibility that all designers \nand engineers should aspire to. To quote from their “How to Design for \nAccessibility” article \n(10.2):\n“We want the things we make to work for the whole audience, \nbecause the BBC believes everyone deserves the best. Our audience \nis diverse, not only in gender, age, and culture, but also in the ways \nthey interact with us and the abilities they have to do so. To deliver \nan inclusive experience, accessibility must be an integral part of the \nuser experience design.",
      "metadata": {
        "startIndex": 50419,
        "endIndex": 51401,
        "chunkIndex": 65,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 348
      }
    },
    {
      "id": "chunk-349",
      "text": "culture, but also in the ways \nthey interact with us and the abilities they have to do so. To deliver \nan inclusive experience, accessibility must be an integral part of the \nuser experience design. It must also be integral to development and \ntesting.”\nThe BBC’s design system documentation and digital brand guidelines are not \njust a technical blueprint, they are also thoughtful and inspirational, and give \ntheir teams a mission.\nFIG 10.5 bbc.co.uk/gel/guidelines/category/how-to\nIt’s interesting to note that the entire BBC GEL website is black and white. \nColour is seldom used. Even the visuals focus heavily on wireframes to \n\n226\ndemonstrate their design system patterns — like the following example \nscreenshot \n(fig 10.6) showing a variant on their “Cards” pattern.\nThis is worth noting because by focusing more on structure than style, they are \nhighlighting that their system foundations and patterns are really just a vehicle \nfor their content.",
      "metadata": {
        "startIndex": 51201,
        "endIndex": 52163,
        "chunkIndex": 66,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 349
      }
    },
    {
      "id": "chunk-350",
      "text": "“Cards” pattern.\nThis is worth noting because by focusing more on structure than style, they are \nhighlighting that their system foundations and patterns are really just a vehicle \nfor their content. As we covered earlier in this book: design for the content, \ndon’t fit the content to the design.\nFIG 10.6 Visuals focus on the pattern’s makeup, not visual design\nThe BBC’s patterns make no assumptions about the content. Given the \nabundance and wide range of content the BBC’s various digital properties \ncover, it’s imperative that their patterns are designed to work with any \ncontent, not just best case scenarios. And their documentation is a testament \nto that. They don’t rely on ‘pretty’ visuals for them to work. They include long \nheadlines, as opposed to convenient character counts. Patterns have variants \nto cover different scenarios, media, and content \n(fig 10.7). And they are all \ndesigned with accessibility in mind.",
      "metadata": {
        "startIndex": 51963,
        "endIndex": 52900,
        "chunkIndex": 67,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 350
      }
    },
    {
      "id": "chunk-351",
      "text": "ong \nheadlines, as opposed to convenient character counts. Patterns have variants \nto cover different scenarios, media, and content \n(fig 10.7). And they are all \ndesigned with accessibility in mind. \n10.1 bbc.co.uk/gel/\n10.2 bbc.co.uk/gel/guidelines/how-to-design-for-accessibility\n\nGALLerY  227\nThe BBC’s documentation shares more or less everything related to the design \nof their systems, even including some code. In contrast, Airbnb takes a very \ndifferent approach.\nAirbnb Design\nAirbnb’s public design system content shows that you can create buzz around \nyour design system without actually making your system or its documentation \npublic. Their “Airbnb Design” website \n(fig 10.8) clearly demonstrates their \nstrong design and engineering cultures, and the work that goes into creating \ntheir design systems. Their website features designers and engineers giving \ninsight into their design process via articles, events, and case studies.",
      "metadata": {
        "startIndex": 52700,
        "endIndex": 53648,
        "chunkIndex": 68,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 351
      }
    },
    {
      "id": "chunk-352",
      "text": "cultures, and the work that goes into creating \ntheir design systems. Their website features designers and engineers giving \ninsight into their design process via articles, events, and case studies. It \ndoesn’t give much away in terms of the system or documentation itself, but \nit’s an interesting insight into how they think about and design products and \nsystems.\nFIG 10.7 Documenting example use cases for pattern variants\n\n228228\nFIG 10.9 lightningdesignsystem.com\nFIG 10.8 airbnb.design\n\nGALLerY  229\nLightning design system (Salesforce)\nThe Lightning design system documentation (fig 10.9) is a treasure trove of \nknowledge. They even have a download section where you can download a \ncomprehensive Sketch file of all the components and icons they use, and they \neven offer their pre-built CSS framework!\nThe Lightning documentation is very much a ‘living style guide’; much of what \nyou see is pulled directly from source, so you can interact with the system \ncomponents and patterns.\nTheir",
      "metadata": {
        "startIndex": 53448,
        "endIndex": 54448,
        "chunkIndex": 69,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 352
      }
    },
    {
      "id": "chunk-353",
      "text": "S framework!\nThe Lightning documentation is very much a ‘living style guide’; much of what \nyou see is pulled directly from source, so you can interact with the system \ncomponents and patterns.\nTheir system relies heavily on design tokens, which is reinforced throughout \ntheir documentation. They also include notes on the accessibility features \nof certain components, which is a nice touch — both because it educates us, \nand shows they care about all their users! Code is also featured throughout, \nincluding release notes, giving you in-depth insight into how to design and \nbuild with the system.\nWhere some documentation is aimed solely at designers, Lightning is very \nmuch aimed at designers and developers, or designer-developer hybrids.\nFIG 10.10 Technical, code-focussed documentation\n\n230230\nIt’s all very well and \ngood to design and \ndocument a mass \nof components and \npatterns, but \nthey’re effectively \na UI kit without some \nlogic for how they \nwork together.",
      "metadata": {
        "startIndex": 54248,
        "endIndex": 55228,
        "chunkIndex": 70,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 353
      }
    },
    {
      "id": "chunk-354",
      "text": "ed documentation\n\n230230\nIt’s all very well and \ngood to design and \ndocument a mass \nof components and \npatterns, but \nthey’re effectively \na UI kit without some \nlogic for how they \nwork together.\n\nGALLerY  231\nWhere Salesforce’s Lightning documentation is very much a living style guide, \nin contrast, the Nachos design system is more of a static style guide.\nNachos design system (Trello)\nI like how simple and on-point the Nachos documentation website is. Trello’s \ndesign documentation uses static images to showcase components, and that’s \nfine, so long as the team responsible for maintaining the documentation \nupdates those images when any changes are made to their appearance. \nDocumenting systems in this way also requires less development support, so is \narguably a more designer-friendly approach.\nI love how detailed Trello gets with their image specs; this (for me) is \nsomething that makes (some) static documentation websites better than \n(some) living style guides.",
      "metadata": {
        "startIndex": 55028,
        "endIndex": 56013,
        "chunkIndex": 71,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 354
      }
    },
    {
      "id": "chunk-355",
      "text": "esigner-friendly approach.\nI love how detailed Trello gets with their image specs; this (for me) is \nsomething that makes (some) static documentation websites better than \n(some) living style guides. Interactive components are great, but I would still \nadvise including some kind of specs to really highlight what goes into the \ncreation of components and patterns. This way, designers learn how it’s \nmade, and don’t just see the end result.\nFIG 10.11 RIP Nachos website (formerly at: design.trello.com)\n\n232232\nFIG 10.13 Design principles and design systems go hand-in-hand\nFIG 10.12 Documenting the anatomy of design elements\n\nGALLerY  233\nBreaking down the anatomy of how a button is designed (fig 10.11) — or how \nicons are created and what size they should be \n(fig 10.12) — is both interesting \nand insightful, whether you’re a member of the team using the design system, \nor an outsider admiring their work. Remember the note earlier on insight into \nculture...",
      "metadata": {
        "startIndex": 55813,
        "endIndex": 56783,
        "chunkIndex": 72,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 355
      }
    },
    {
      "id": "chunk-356",
      "text": "g 10.12) — is both interesting \nand insightful, whether you’re a member of the team using the design system, \nor an outsider admiring their work. Remember the note earlier on insight into \nculture... Well, the attention to detail Trello’s documentation demonstrates is \ninspiring.\nI also like that Trello have included their design principles \n(fig 10.13) in with \ntheir documentation. In an ideal world, these things are inseparable. It’s \narguably ‘odd’ that so many design system documentation websites leave \nprinciples out (or don’t have any).\nMarvel design system\nDare I say it... Some design system documentation is plain ugly! Marvel’s \ndocumentation \n(fig 10.14) is a breath of fresh air with its clean and simple \ninterface and presentation.\nFIG 10.14 marvelapp.com/styleguide/\nTheir documentation home page is inviting and clear as to what you’re looking \nat; it also includes its purpose and mission:",
      "metadata": {
        "startIndex": 56583,
        "endIndex": 57497,
        "chunkIndex": 73,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 356
      }
    },
    {
      "id": "chunk-357",
      "text": "d simple \ninterface and presentation.\nFIG 10.14 marvelapp.com/styleguide/\nTheir documentation home page is inviting and clear as to what you’re looking \nat; it also includes its purpose and mission:\n\n234\n“We created this style guide to act as a central location where we \nhouse a live inventory of UI components, brand guidelines, brand \nassets, code snippets, developer guidelines, and more. Anyone \nworking on the Marvel product is encouraged to stay familiar with \nthis style guide and help ensure that it is kept up-to-date.”\nNotice the orange “We’re hiring” prompt above their logo (fig 10.14)... \nRecruitment is a key motivation for publicising a good deal of documentation \nwebsites — so why not make it obvious? If I was looking for a job with a \ncompany that cared about system design, I’d click that link.\nTalking of ‘pretty websites’ (and flagging that we’re hiring)... Damn, Primer, \nlook at you \n(fig 10.15):\nFIG 10.15 primer.style",
      "metadata": {
        "startIndex": 57297,
        "endIndex": 58243,
        "chunkIndex": 74,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 357
      }
    },
    {
      "id": "chunk-358",
      "text": "with a \ncompany that cared about system design, I’d click that link.\nTalking of ‘pretty websites’ (and flagging that we’re hiring)... Damn, Primer, \nlook at you \n(fig 10.15):\nFIG 10.15 primer.style\n\nGALLerY  235GALLerY  235\nThe better your \ndocumentation is \ndesigned and the \neasier the content is \nto navigate, the more \nlikely your team is \nto engage with it! \nEspecially designers.\n\n236\nPrimer design system (GitHub)\nSimilar to Marvel — only more pronounced this time — is GitHub’s reference \nto recruitment, proudly and prominently presented in this beautifully \ndesigned gateway page to their design system documentation. Sexy design is \ncertainly not the objective of design system documentation — don’t get me \nwrong — but if you’re going to all the trouble of creating this documentation, \nwhy not also make it look great. The better it’s designed and the easier the \ncontent is to navigate, the more likely your team is to engage with it!\nCarbon design system (IBM)\nI like how Carbon",
      "metadata": {
        "startIndex": 58043,
        "endIndex": 59038,
        "chunkIndex": 75,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 358
      }
    },
    {
      "id": "chunk-359",
      "text": "on, \nwhy not also make it look great. The better it’s designed and the easier the \ncontent is to navigate, the more likely your team is to engage with it!\nCarbon design system (IBM)\nI like how Carbon splits its documentation of components into “Usage” \n(fig 10.16) and “Code” (fig 10.17). It’s interesting to note their specificity over \nhow and when to use a link or a button, and the limit for how many times a \nFIG 10.16 carbondesignsystem.com/components/button/usage\n\nGALLerY  237\nprimary button should be used on a page. I particularly like their breakdown of \neach button types’ purpose:\n“Buttons are used primarily on action items. Some examples include \nAdd, Save, Delete, Sign up. Do not use Buttons as navigational \nelements. Instead, use Links because it takes the user to a new page \nand is not associated with an action. Each page may have one to two \nprimary buttons. Any remaining calls-to-action are represented as \nsecondary buttons.”\nIt’s also helpful that, alongside their code",
      "metadata": {
        "startIndex": 58838,
        "endIndex": 59835,
        "chunkIndex": 76,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 359
      }
    },
    {
      "id": "chunk-360",
      "text": "nd is not associated with an action. Each page may have one to two \nprimary buttons. Any remaining calls-to-action are represented as \nsecondary buttons.”\nIt’s also helpful that, alongside their code documentation for each component, \nthey include a link out to CodePen where you can view and edit the code \n(10.3). \nI think this is a great idea, as it gives you the opportunity to play with the code \nso you can really understand how it works. This also helps to bridge the gap \nbetween design and development.\nFIG 10.17 carbondesignsystem.com/components/button/code\n10.3 codepen.io/team/carbon/pen/xeZxLe\n\n238\nSeeds (Sprout Social)\nI really like how Sprout Social presents their brand guidelines and design \nsystem documentation in one central hub \n(fig 10.18). I’ve stressed the \nimportance of having a source of truth, and utilising digital brand guidelines as \nthe foundations of products and design systems. Keeping everything together \nmakes perfect sense.",
      "metadata": {
        "startIndex": 59635,
        "endIndex": 60599,
        "chunkIndex": 77,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 360
      }
    },
    {
      "id": "chunk-361",
      "text": "I’ve stressed the \nimportance of having a source of truth, and utilising digital brand guidelines as \nthe foundations of products and design systems. Keeping everything together \nmakes perfect sense. They should work together, so why separate them?\nSeed’s home page introduces what their “Creative Hub” is and why it’s \nFIG 10.18 sproutsocial.com/seeds/\n\nGALLerY  239\nimportant, and a simple navigation at the top breaks the content into “Brand”, \n“Product”, “Visual”, and “Writing”. Love it. It also has a page with downloads, so \ntheir brand assets are easily accessible.\n“A distinct and consistent brand presence sets us apart from \ncompetitors, builds trust and familiarity with our customers, and \neventually leads to long-term brand value.”\nI’m glad I found an example of a company who has chosen to protect some \nof it’s design system content \n(fig 10.19). Not everything needs to be for the \npublic’s eyes — some content is sensitive, or you may just prefer not to share \nit so openly.",
      "metadata": {
        "startIndex": 60399,
        "endIndex": 61393,
        "chunkIndex": 78,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 361
      }
    },
    {
      "id": "chunk-362",
      "text": "s chosen to protect some \nof it’s design system content \n(fig 10.19). Not everything needs to be for the \npublic’s eyes — some content is sensitive, or you may just prefer not to share \nit so openly. That’s totally fine, but you want to be sure you’re maintaining \nyour single source of truth, rather than have public content ‘here’ and private \ncontent ‘there’. Password protecting content that’s for personnel eyes only is a \nsimple solution.\nFIG 10.19 Password protecting content not for public eyes\nSolid design system (BuzzFeed)\nIt’s a good idea to keep your team informed about any changes being made \nto the design system they’re working with. This is often referred to as a \n“Changelog”, but in our example \n(fig 10.20), BuzzFeed has a page called \n“Release Notes”. This is where they document any updates: from changes to \ncolour hex codes to pixel value changes to a border-radius, the addition of a \nnew design token, or an update to a CSS class name or Sass variable, and so on.",
      "metadata": {
        "startIndex": 61193,
        "endIndex": 62185,
        "chunkIndex": 79,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 362
      }
    },
    {
      "id": "chunk-363",
      "text": "document any updates: from changes to \ncolour hex codes to pixel value changes to a border-radius, the addition of a \nnew design token, or an update to a CSS class name or Sass variable, and so on.\n\n240\nFIG 10.21 thumbprint.design/guide/product/color/\nFIG 10.20 solid.buzzfeed.com/release-notes.html\n10.4 designsystemfoundations.com/resources/\n10.5 @andrewcouldwell\n\nGALLerY  241\nThumbprint design system (Thumbtack)\nThumbprint has a great “Guidelines” section in their documentation; it makes \neverything a little clearer for the system’s adopters. Within ‘Guidelines’ there is \na section on colour \n(fig 10.21), which has nice do’s and don’ts for each colour.\nMoving on\nIt’s my hope that the examples in this chapter have given you a sense of the \nrange of possibilities and best practices for presenting Digital Foundations \nand design system documentation, or even giving insight into your company’s \ndesign and engineering cultures.\nI’ve done my best to curate the finest examples being shared",
      "metadata": {
        "startIndex": 61985,
        "endIndex": 62985,
        "chunkIndex": 80,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 363
      }
    },
    {
      "id": "chunk-364",
      "text": "senting Digital Foundations \nand design system documentation, or even giving insight into your company’s \ndesign and engineering cultures.\nI’ve done my best to curate the finest examples being shared today. However, \nthere are so many more great examples out there, and new design system and \ndocumentation websites are popping up all the time — so be sure to check out \nthis book’s website \n(10.4) to get even more inspiration! And please share (10.5) \nany great examples you find.\nNext up, we’ll talk about one of the most difficult — but arguably most vital — \nparts of design system work: maintaining a design system.\n\n242\nMaintaining a design system\n242\n11\nMain— \ntain— \ning a \ndesign \nsystem\nLAYInG tHe FounDAtIons\n\nMAIntAInInG A DesIGn sYsteM  243\nCongratulations, you’ve designed, documented, built, and integrated a design \nsystem! (Or let’s assume you have). Now for the bad news: that was the easy \npart!",
      "metadata": {
        "startIndex": 62785,
        "endIndex": 63701,
        "chunkIndex": 81,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 364
      }
    },
    {
      "id": "chunk-365",
      "text": "Ions\n\nMAIntAInInG A DesIGn sYsteM  243\nCongratulations, you’ve designed, documented, built, and integrated a design \nsystem! (Or let’s assume you have). Now for the bad news: that was the easy \npart! Keeping the design, code, and documentation in sync is arguably the \nmost challenging part of working with design systems.\nThe following scenarios all lead to a design system’s demise:\n• Designers update their mockups, style guides, library, etc., but for whatever \nreason, the developers miss the changes — or they never get around to \nthem — and the design changes don’t get implemented in the code.\n• Team members save work on their desktop or personal computers, as \nopposed to a shared team drive/location.\n• Designers use their own personal set of foundations, components, and \npatterns, as opposed to a shared team library.\n• The design and code is updated, but the documentation isn’t.\n• Team members use different (incompatible) tools and/or software.\n• Teams aren’t kept in the loop about",
      "metadata": {
        "startIndex": 63501,
        "endIndex": 64500,
        "chunkIndex": 82,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 365
      }
    },
    {
      "id": "chunk-366",
      "text": "posed to a shared team library.\n• The design and code is updated, but the documentation isn’t.\n• Team members use different (incompatible) tools and/or software.\n• Teams aren’t kept in the loop about changes to the design system.\n• Team members feel excluded when they don’t feel involved in — or have any \nopportunities to influence — the design or evolution of the system.\nAll of the above scenarios lead to the same outcome: designers work with one \nor more alternate versions of the design system, while developers work with \nthe actual live version of the design system. This is frustrating for all parties — \nit’s also completely avoidable.\nMaintaining a design system requires communication, process, teamwork, \ndiscipline, and stewardship. In the sections to follow, we’re going to look at \nhow to achieve this, and solutions to all of the problem scenarios listed above.\nWork with shared design assets\nWe covered the importance of setting up editable and responsive components, \npatterns,",
      "metadata": {
        "startIndex": 64300,
        "endIndex": 65298,
        "chunkIndex": 83,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 366
      }
    },
    {
      "id": "chunk-367",
      "text": "how to achieve this, and solutions to all of the problem scenarios listed above.\nWork with shared design assets\nWe covered the importance of setting up editable and responsive components, \npatterns, and foundations in the “Systematising the Design” chapter. We talked \nbriefly about having them be easily accessible by your whole team. In this \nsection I want to build on this and stress the importance of having a shared \nlibrary of assets that your design team can simply insert into their designs. \nThey should also be made aware of — and able to sync — any changes made to \nthose assets.\nWhen design teams work with shared assets, it ensures consistency and cuts \ndown on unintentional design discrepancies. I think a shared library of design \nassets is the real game changer part of design systems — it’s where much of the \nspeed, ease, and efficiency comes in (at least on the design side of things).",
      "metadata": {
        "startIndex": 65098,
        "endIndex": 66007,
        "chunkIndex": 84,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 367
      }
    },
    {
      "id": "chunk-368",
      "text": "es. I think a shared library of design \nassets is the real game changer part of design systems — it’s where much of the \nspeed, ease, and efficiency comes in (at least on the design side of things).\n\n244\nI’m going to break my own rule concerning talking about tools in this book and \nrecommend Sketch \n(11.1) for web and product designers working with teams \nof other designers. This is only going on my experience. I also recommend you \ntry other tools and see what works best for your team. I’ve linked to some of \nthese tools on this book’s website \n(11.2). But as a working example in this book, \nI’ll use Sketch for demonstration purposes.\nUsing Sketch Library \n(11.3), you can create a master design system file \ncontaining all design system foundations, components \n(fig 11.1 + 11.2), and \npatterns and save it somewhere accessible by all your team. It needs to be \nsomewhere that will automatically sync any changes (e.g.",
      "metadata": {
        "startIndex": 65807,
        "endIndex": 66737,
        "chunkIndex": 85,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 368
      }
    },
    {
      "id": "chunk-369",
      "text": "all design system foundations, components \n(fig 11.1 + 11.2), and \npatterns and save it somewhere accessible by all your team. It needs to be \nsomewhere that will automatically sync any changes (e.g. Dropbox \n11.4).\nFIG 11.1 A Sketch file containing all system components\nWith your master design system file in a shared location, designers on your \nteam can very simply and quickly insert assets from the master file into their \n11.1 sketch.com\n11.2 designsystemfoundations.com/resources/\n11.3 sketch.com/docs/libraries/\n11.4 dropbox.com\n11.5 skl.sh/2xWBObZ\n\nMAIntAInInG A DesIGn sYsteM  245\nown design files. Then, any updates made to the master file will sync to any \ndesign files using its assets.\nDon’t worry if this sounds difficult — it’s not — it’s actually really fast and easy \nto set up! I’ve created a Skillshare class \n(11.5) demonstrating how to set up \neditable design system components and a Sketch Library.\nFIG 11.2 Zoomed in on the same Sketch file as fig 11.1\nFIG 11.3 A prompt",
      "metadata": {
        "startIndex": 66537,
        "endIndex": 67533,
        "chunkIndex": 86,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 369
      }
    },
    {
      "id": "chunk-370",
      "text": "! I’ve created a Skillshare class \n(11.5) demonstrating how to set up \neditable design system components and a Sketch Library.\nFIG 11.2 Zoomed in on the same Sketch file as fig 11.1\nFIG 11.3 A prompt (top-right) informs you of a library update\n\n246\nIf your team decides to change the colour of a button, it would be as simple as \nupdating the button symbol in the master design system library file. In Sketch, \nthe next time a member of your team is working on a design mockup, which \nuses this button they will see a “Library Updates Available” prompt to the top-\nright of their screen \n(fig 11.3) letting them know there’s been an update to a \ndesign asset they are using.\nClicking the “Library Updates Available” prompt opens up a convenient before \nand after (“Old” and “New”) view of everything that has an update \n(fig 11.4). It \nmight not always be appropriate to update, so it’s good you get the choice so \nyou can visually compare the change to measure what impact it will have on \nyour",
      "metadata": {
        "startIndex": 67333,
        "endIndex": 68329,
        "chunkIndex": 87,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 370
      }
    },
    {
      "id": "chunk-371",
      "text": "ing that has an update \n(fig 11.4). It \nmight not always be appropriate to update, so it’s good you get the choice so \nyou can visually compare the change to measure what impact it will have on \nyour design.\nFIG 11.4 Before and after view to compare what the updates are\nWorking with patterns\nWhile Sketch symbols and Sketch Library work very well for things like \ncomponents, they don’t (always) work so well for more complex elements like \npatterns. (At least, not yet — I’m sure as design tools continue to evolve, they \nwill handle more complex patterns and responsive design better).\nFor patterns which are too complex to work as editable (Sketch) symbols \naccessed via Sketch Library, I recommend creating individual design files \nfor each pattern and saving them somewhere easily accessible by your team. \nAgain, this needs to be somewhere your team can easily sync updates or access \n\nMAIntAInInG A DesIGn sYsteM  247\nthe latest version of the file.",
      "metadata": {
        "startIndex": 68129,
        "endIndex": 69087,
        "chunkIndex": 88,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 371
      }
    },
    {
      "id": "chunk-372",
      "text": "saving them somewhere easily accessible by your team. \nAgain, this needs to be somewhere your team can easily sync updates or access \n\nMAIntAInInG A DesIGn sYsteM  247\nthe latest version of the file. In the below example’s case (fig 11.5), I stored \npattern files in a folder on Dropbox:\nFIG 11,5 A folder of design files, accessible by the whole team\nEach pattern’s design file contains an up-to-date version of the pattern. If \nyou’re designing for the web, it helps to include responsive ‘versions’ of the \npattern showing how it appears at different breakpoints. Setting up your \npatterns like this — ready to copy and paste into your designs — allows for \nrapid prototyping, and acts as a good source of truth for working with design \nsystem patterns.\nThe following screenshot \n(fig 11.6) shows a responsive pattern in Sketch. \nYou can see the desktop version of the pattern to the left, and to the right you \nsee a hint of how the pattern appears at different breakpoints (e.g.",
      "metadata": {
        "startIndex": 68887,
        "endIndex": 69871,
        "chunkIndex": 89,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 372
      }
    },
    {
      "id": "chunk-373",
      "text": "fig 11.6) shows a responsive pattern in Sketch. \nYou can see the desktop version of the pattern to the left, and to the right you \nsee a hint of how the pattern appears at different breakpoints (e.g. tablet and \nmobile).\nDesigners can also refer to the documentation for the pattern to see visuals, \na write-up, guidelines, and use cases \n(fig 11.7). Documentation can play a key \nrole in maintaining a design system, as it provides a ‘system of record’ for how \nsystem elements are intended to be used.\n\n248\nKeep documentation up to date\nWe’ve covered documenting design systems extensively in this book, but \nfor the sake of this chapter it’s worth reiterating the importance of keeping \nyour documentation up to date. Your documentation isn’t of much use if it’s \nrecording a previous state or version of the design and/or code.\nYour documentation should be a source of truth. When your team debates how \nFIG 11.7 Documentation for each pattern in the design system\nFIG 11.6 A pattern in Sketch,",
      "metadata": {
        "startIndex": 69671,
        "endIndex": 70670,
        "chunkIndex": 90,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 373
      }
    },
    {
      "id": "chunk-374",
      "text": "rsion of the design and/or code.\nYour documentation should be a source of truth. When your team debates how \nFIG 11.7 Documentation for each pattern in the design system\nFIG 11.6 A pattern in Sketch, designed for each breakpoint’s grid\n\nMAIntAInInG A DesIGn sYsteM  249\nsomething should look or work, the documentation is the place they will look \nfor the answer — assuming you did due diligence and documented your design \nthinking when you designed the foundation, component, or pattern in question.\nMake it a part of your process to update design and code documentation \nwhen you create new — or update existing — system elements.\nWhile design documentation updates are more of a manual process, it is \npossible to (at least somewhat) automate the process of code documentation. \nYou can use dynamic documentation or living style guides that pull-in code \nfrom production, or documentation that’s generated directly from the code \n(with varying degrees of success).\nAs this is a design-focussed",
      "metadata": {
        "startIndex": 70470,
        "endIndex": 71468,
        "chunkIndex": 91,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 374
      }
    },
    {
      "id": "chunk-375",
      "text": "amic documentation or living style guides that pull-in code \nfrom production, or documentation that’s generated directly from the code \n(with varying degrees of success).\nAs this is a design-focussed book — and code documentation is outside my \narea of expertise — I’ll leave the documentation of code to the experts (i.e. your \nengineering team). There are also links to some design system documentation \ntools and resources on this book’s website \n(11.6).\nKeeping the design and code in sync\nA problem every team faces with design systems is keeping the design and \ncode in sync. It’s difficult! When your team is designing with components that \ndon’t exist in your live product, it’s easy for design systems to split into two \nversions:",
      "metadata": {
        "startIndex": 71268,
        "endIndex": 72268,
        "chunkIndex": 92,
        "section": "2. In Option 2 (Sass variable) we have a problem. Our Sass variable is used in",
        "globalChunkIndex": 375
      }
    },
    {
      "id": "chunk-376",
      "text": "Frustrated by having to keep Sketch files up to date and in-sync with the live \nversion of their design system components, Airbnb sought to bridge the gap \nbetween design and code. They did this by experimenting with — and creating \n— an open-source library that allows you to write React \n(11.7) components that \nrender to Sketch documents. This effectively allows designers and engineers \nto ‘design in the browser’, working with real data, APIs, and Flexbox \n(11.8).\n“In Sketch, we use symbols and overrides. In React, we use \ncomponents and properties. The concepts are so similar that it \nseemed silly not to unify them.”\n11.6 designsystemfoundations.com/resources/\n11.7 reactjs.org\n11.8 css-tricks.com/snippets/css/a-guide-to-flexbox/\n\n250250\nMake it part of your \nprocess to update \ndesign libraries and \nany documentation \nwhen you create new, \nor update existing \ndesign system \nelements.\n\nMAIntAInInG A DesIGn sYsteM  251\nSee Airbnb’s Painting with Code article (11.9) by Design",
      "metadata": {
        "startIndex": 0,
        "endIndex": 989,
        "chunkIndex": 0,
        "section": "2. The (real) version that the public sees, and that the developers work with.",
        "globalChunkIndex": 376
      }
    },
    {
      "id": "chunk-377",
      "text": "design libraries and \nany documentation \nwhen you create new, \nor update existing \ndesign system \nelements.\n\nMAIntAInInG A DesIGn sYsteM  251\nSee Airbnb’s Painting with Code article (11.9) by Design Technologist, Jon Gold \n(11.10) for more about this experiment.\nOf course, methods like Airbnb’s require designers on your team to have at \nleast a basic understanding of coding languages like React and CSS, which is \nunderstandably a barrier to entry for most design teams.\nMore realistically speaking: keeping the design and code in sync comes down \nto process and discipline.\nHere’s the process — if you update the design of an existing system element, or \nadd a new one, you should:",
      "metadata": {
        "startIndex": 789,
        "endIndex": 1789,
        "chunkIndex": 1,
        "section": "2. The (real) version that the public sees, and that the developers work with.",
        "globalChunkIndex": 377
      }
    },
    {
      "id": "chunk-378",
      "text": "to share design assets.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "1. Update the library, style guide(s), or whatever design file(s) your team uses",
        "globalChunkIndex": 378
      }
    },
    {
      "id": "chunk-379",
      "text": "update the code, (for example, by creating a Github Issue).",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "2. Make sure the update is effectively tracked and queued for a developer to",
        "globalChunkIndex": 379
      }
    },
    {
      "id": "chunk-380",
      "text": "change before it’s been made. If you include them in the process of figuring \nout why the change is needed and what the change should be, you will avoid \nany conflicts or repetition of work. \nIt’s advisable to assign responsibilities within your team to make sure the \nabove process is adhered to. We’ll talk about design system guardians, \nambassadors, teams, and leaders later in this chapter.\nCode as a design tool\nThe line between traditional design tools and code is becoming blurred. A \ngood number of design tools output CSS code of variable quality, and some \ndesign tools even allow you to insert React components from production into \nyour designs. I’m sure this line will continue to blur as design tools become \nmore advanced.\n11.9 airbnb.design/painting-with-code/\n11.10 jon.gold\n\n252\nAirbnb’s Head of Design, Alex Schleifer (11.11) comments:\n“We’re investing in code as a design tool. Moving closer to working \nwith assets that don’t only include layout and design, but also \nlogic and",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "4. Inform your team about the change. Ideally, they should be aware of the",
        "globalChunkIndex": 380
      }
    },
    {
      "id": "chunk-381",
      "text": "rbnb’s Head of Design, Alex Schleifer (11.11) comments:\n“We’re investing in code as a design tool. Moving closer to working \nwith assets that don’t only include layout and design, but also \nlogic and data. This helps bridge the gap between engineers and \ndesigners, thus reducing the need for design specs – or redlines – and \nthe steps between vision and reality.”\nGranting designers access to code may seem like a scary proposition to \nsome. But consider the time designers spend waiting for developers to make \nchanges, or the distraction developers feel when designers regularly want to \nmake small tweaks. Maybe it’s not such a crazy notion that designers could just \nwork directly in the code?\nThe line between designer and developer is blurred at GitHub \n(11.12), which is \nhardly surprising given the nature of their business. Diana Mounter \n(11.13), a \ndesign system leader at GitHub, explains the benefit of designers writing code:\n“Product designers and web designers at GitHub contribute",
      "metadata": {
        "startIndex": 800,
        "endIndex": 1800,
        "chunkIndex": 1,
        "section": "4. Inform your team about the change. Ideally, they should be aware of the",
        "globalChunkIndex": 381
      }
    },
    {
      "id": "chunk-382",
      "text": "iven the nature of their business. Diana Mounter \n(11.13), a \ndesign system leader at GitHub, explains the benefit of designers writing code:\n“Product designers and web designers at GitHub contribute \nproduction code and often assist in implementing their own designs. \nSome designers get deeper into the stack, but every product and web \ndesigner writes CSS. This means designers are primary users of \nPrimer, our design system, and are often the first to notice when there \nare problems with styles or gaps in documentation.”\nKeep your team in the loop\nWhen you make updates to a design system, or even just while you are \ndeliberating about updates, it’s good practice to involve your team. This can \nmean a few things:",
      "metadata": {
        "startIndex": 1600,
        "endIndex": 2600,
        "chunkIndex": 2,
        "section": "4. Inform your team about the change. Ideally, they should be aware of the",
        "globalChunkIndex": 382
      }
    },
    {
      "id": "chunk-383",
      "text": "having individuals make updates that the team might not agree with, or \naren’t aware of.\n11.11 twitter.com/alexoid\n11.12 medium.com/@broccolini/design-systems-at-github-c8e5378d2542\n11.13 broccolini.net\n\nMAIntAInInG A DesIGn sYsteM  253",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "1. Meet as a team to discuss proposed changes to the system, as opposed to",
        "globalChunkIndex": 383
      }
    },
    {
      "id": "chunk-384",
      "text": "change was made, and when it changed.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "2. Keep a changelog so team members can see what’s been updated, why the",
        "globalChunkIndex": 384
      }
    },
    {
      "id": "chunk-385",
      "text": "A meeting is good, but people can be absent from meetings, and meetings \ndon’t always work well for remote teams, so consider something more \ninclusive — like sending an email, or writing a journal, post, or log of release \nnotes — that detail the changes.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "3. Update the team when changes are made so people are kept in-the-know.",
        "globalChunkIndex": 385
      }
    },
    {
      "id": "chunk-386",
      "text": "to the design system.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "4. You could have a Slack channel dedicated to questions and updates related",
        "globalChunkIndex": 386
      }
    },
    {
      "id": "chunk-387",
      "text": "system lead — are available to anybody who wishes to discuss anything \nabout the system.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 1000,
        "chunkIndex": 0,
        "section": "5.  You could hold ‘office hours’, where members of the team — or a design",
        "globalChunkIndex": 387
      }
    },
    {
      "id": "chunk-388",
      "text": "requests and bugs, or ask questions.\nTo quote from the same GitHub article as earlier:\n“We started using team posts to tell people about new Primer [design \nsystem] updates, to give people a heads up when we shipped large \ncode changes, and share more information behind our decisions.”\nIt’s interesting to note that GitHub wanted to “share more information behind \nour decisions”. Providing context is always important in design systems. \nContext helps to prevent repeated tweaks of elements, which previous \niterations have already addressed. When making a change, be sure to note:\n• Why was the element updated?\n• What problem is the update attempting to solve? \n• What’s improved about it? \nIn addition to keeping your team apprised of changes, it’s useful to appoint a \nperson (or a rotation of people) who can answer questions about the design \nsystem, or make updates to code, files, and documentation as needed.",
      "metadata": {
        "startIndex": 0,
        "endIndex": 920,
        "chunkIndex": 0,
        "section": "6.  Use a task tracking tool like GitHub Issues, Trello, or Jira so people can post",
        "globalChunkIndex": 388
      }
    },
    {
      "id": "chunk-389",
      "text": "ur team apprised of changes, it’s useful to appoint a \nperson (or a rotation of people) who can answer questions about the design \nsystem, or make updates to code, files, and documentation as needed. GitHub \nagain has an answer for this with their ‘office hours’ system, as well as what \nthey call ‘First Responders’:\n“Most teams at GitHub have an on-call duty rotation that we call \nFirst Responder. Whoever is on call is responsible for triaging issues \n(assign degrees of urgency) and responding to requests for help or \ncode review. Having someone on call means the rest of the team can \nstay focused on deep work. In addition to First Responder, we started \n\n254\ndoing office hours 3 days per week to give people a regular time to \nask us questions in person. This is used for pairing on code, talking \nthrough product updates that need our support, and responding to \ngeneral questions.”\nWhether you appoint ‘first responders’, set up office hours, or use a Slack \nchannel to field requests and",
      "metadata": {
        "startIndex": 720,
        "endIndex": 1721,
        "chunkIndex": 1,
        "section": "6.  Use a task tracking tool like GitHub Issues, Trello, or Jira so people can post",
        "globalChunkIndex": 389
      }
    },
    {
      "id": "chunk-390",
      "text": "lking \nthrough product updates that need our support, and responding to \ngeneral questions.”\nWhether you appoint ‘first responders’, set up office hours, or use a Slack \nchannel to field requests and address issues, it’s vital to the longevity and \nhealth of your design system that you keep the whole team in the loop and \nengaged with the system’s evolution.\nGuardians, ambassadors, and leaders\nProcess, responsibility, and accountability are hard to maintain in large \norganisations. It’s even harder when you have more than one product team \nworking with a design system, or when teams are based in different locations.\nWe’re human. We forget things from time-to-time. Things slip through the \ncracks. And then — to put it bluntly — you have some people who resist \nadopting the system, for whatever reason.\nYou need someone — or a team of people — responsible for making sure \nthe design system is adopted and maintained, and that all stakeholders are \nsuitably educated and involved.",
      "metadata": {
        "startIndex": 1521,
        "endIndex": 2511,
        "chunkIndex": 2,
        "section": "6.  Use a task tracking tool like GitHub Issues, Trello, or Jira so people can post",
        "globalChunkIndex": 390
      }
    },
    {
      "id": "chunk-391",
      "text": "for whatever reason.\nYou need someone — or a team of people — responsible for making sure \nthe design system is adopted and maintained, and that all stakeholders are \nsuitably educated and involved. This doesn’t mean you have to adopt an \noverlord mentality; just that you need to be realistic about the system’s chances \nof running smoothly — and evolving — without some level of oversight and \nmanagement.\nDesign systems require leadership — whether it comes from a concerted, \ncollective effort by designers at your company, a dedicated design systems \nteam, and/or a ‘design system lead’.\nAnd keep-in-mind: the goal is to educate, not enforce. People don’t generally \nrespond well to orders. Approach the management of a design system from a \nteaching and collaborating perspective, not as the ruling authority.\nWith that said, let’s look at a few different strategies for establishing design \nsystem leadership on your team.",
      "metadata": {
        "startIndex": 2311,
        "endIndex": 3243,
        "chunkIndex": 3,
        "section": "6.  Use a task tracking tool like GitHub Issues, Trello, or Jira so people can post",
        "globalChunkIndex": 391
      }
    },
    {
      "id": "chunk-392",
      "text": "system from a \nteaching and collaborating perspective, not as the ruling authority.\nWith that said, let’s look at a few different strategies for establishing design \nsystem leadership on your team.\n\nMAIntAInInG A DesIGn sYsteM  255MAIntAInInG A DesIGn sYsteM  255\nYou need to be \nrealistic about the \ndesign system’s \nchances of running \nsmoothly, and \nevolving, without \nsome level of \noversight and \nmanagement.\n\n256\nAppoint a design system lead\nA design system lead’s key responsibilities are to:\n• Advocate for the system.\n• Establish design system processes.\n• Ensure that any processes for updates and maintenance are upheld.\n• Educate designers on system design best practices.\n• Research and discover new and improved ways to manage and maintain the \nsystem — whether it’s technology, processes, or design tools that could help \nthe team.\n• Promote and seek opportunities for designers and developers to work \ntogether.\n• Keep everyone up-to-date and engaged with the system.\n• Deal with any",
      "metadata": {
        "startIndex": 3043,
        "endIndex": 4044,
        "chunkIndex": 4,
        "section": "6.  Use a task tracking tool like GitHub Issues, Trello, or Jira so people can post",
        "globalChunkIndex": 392
      }
    },
    {
      "id": "chunk-393",
      "text": "es, or design tools that could help \nthe team.\n• Promote and seek opportunities for designers and developers to work \ntogether.\n• Keep everyone up-to-date and engaged with the system.\n• Deal with any resistance to the system.\n• If applicable, recruit design system specialists to the team.\nAppointing a ‘design system lead’ can help to keep things running smoothly. \nThey advocate (and, when necessary, go to battle) for the system so your team \n(and design system) can thrive.\nForm a design systems team\nA dedicated design systems team has the advantage of being freed from \nbusiness-as-usual tasks and product roadmaps, and instead can focus their \ntime on design system tasks. These teams are generally staffed with people \nwho have a broad set of skills, potentially including designer-developer \nhybrids, front-end engineers, and even roles like copywriters and animation \nspecialists. These teams work on creating design system library assets, \ndocumentation, pattern libraries, and even",
      "metadata": {
        "startIndex": 3844,
        "endIndex": 4838,
        "chunkIndex": 5,
        "section": "6.  Use a task tracking tool like GitHub Issues, Trello, or Jira so people can post",
        "globalChunkIndex": 393
      }
    },
    {
      "id": "chunk-394",
      "text": "loper \nhybrids, front-end engineers, and even roles like copywriters and animation \nspecialists. These teams work on creating design system library assets, \ndocumentation, pattern libraries, and even specialist tools that facilitate the \nwork of product teams.\nWhere designers on product teams can have a narrow vision of design at their \ncompany (i.e. they generally only see what their team works on — they don’t \nsee what every team is working on), the design systems team should have \ngreater oversight of design across all product teams. This awareness helps to \nidentify patterns and components that can be shared across teams — avoiding \nteams overlapping and needlessly creating the same elements twice.\n11.14 link.medium.com/e6xYd06HGX\n11.15 benlister.net\n\nMAIntAInInG A DesIGn sYsteM  257\nAmbassadors and guardians\nFor organisations with multiple product teams and/or locations, it’s somewhat \nunrealistic to expect a single design system lead — or even a design systems \nteam — to manage",
      "metadata": {
        "startIndex": 4638,
        "endIndex": 5637,
        "chunkIndex": 6,
        "section": "6.  Use a task tracking tool like GitHub Issues, Trello, or Jira so people can post",
        "globalChunkIndex": 394
      }
    },
    {
      "id": "chunk-395",
      "text": "Ambassadors and guardians\nFor organisations with multiple product teams and/or locations, it’s somewhat \nunrealistic to expect a single design system lead — or even a design systems \nteam — to manage everything. They can’t be everywhere at once. And perhaps \nmost importantly, they can’t be expected to know all the intricacies and edge \ncases of each product team’s work, and the user and business problems they \nare solving (which is vital knowledge for creating things like design system \npatterns).\nAppointing a design system ambassador on each product team alleviates \nsome of this pressure, ensuring every team has a design system voice and \nguardian present in design critiques, sprints, and product discussions. These \nambassadors report back to the design system team — or lead — creating a \nvaluable feedback loop, and facilitating well-informed decisions.\nSprout Social \n(11.14) have successfully adopted this ambassador approach:\n“Our design system ambassadors are designers from across",
      "metadata": {
        "startIndex": 5437,
        "endIndex": 6436,
        "chunkIndex": 7,
        "section": "6.  Use a task tracking tool like GitHub Issues, Trello, or Jira so people can post",
        "globalChunkIndex": 395
      }
    },
    {
      "id": "chunk-396",
      "text": "valuable feedback loop, and facilitating well-informed decisions.\nSprout Social \n(11.14) have successfully adopted this ambassador approach:\n“Our design system ambassadors are designers from across the \norganization that act as liaisons between their embedded teams \nand the design systems team. They are our eyes, ears, and voice \nacross the company. Design system ambassadors not only define and \ndocument their team’s design patterns and components, but they also \ntake ownership of them, keep their team synced on design system \ninitiatives, and uncover ways to include design system work on their \nteam’s roadmaps.”\nSprout Social’s Design Systems Team Lead, Ben Lister (11.15) continues:\n“When looking for ambassadors, we seek out people who are not \nonly passionate about design systems but also those who are systems \nthinkers, willing to stand up for good design and advocate for best \npractices.”\nThe great thing about this approach is — even if you’re not empowered to hire \na design",
      "metadata": {
        "startIndex": 6236,
        "endIndex": 7232,
        "chunkIndex": 8,
        "section": "6.  Use a task tracking tool like GitHub Issues, Trello, or Jira so people can post",
        "globalChunkIndex": 396
      }
    },
    {
      "id": "chunk-397",
      "text": "ut also those who are systems \nthinkers, willing to stand up for good design and advocate for best \npractices.”\nThe great thing about this approach is — even if you’re not empowered to hire \na design system lead or create a separate team — you can suggest that you \nor other members of your team take on a “design system guardian” role. As a \nguardian, you and system-minded designers from other product teams meet to \ncollaborate on creating and maintaining your system.\n\n258\nWhatever approach you choose, be mindful that a design system is unlikely \nto take-off — or survive after the fact — without leadership. Be proactive in \nhelping your team and design system thrive. You can create a team and appoint \nleaders at the outset of a design system project, or introduce them as the \nproject matures and gains trust (and a budget).\nClosing thoughts\nA design system is a marathon, not a sprint. They’re never finished. A good \ndesign system is flexible and open to change.",
      "metadata": {
        "startIndex": 7032,
        "endIndex": 8006,
        "chunkIndex": 9,
        "section": "6.  Use a task tracking tool like GitHub Issues, Trello, or Jira so people can post",
        "globalChunkIndex": 397
      }
    },
    {
      "id": "chunk-398",
      "text": "hem as the \nproject matures and gains trust (and a budget).\nClosing thoughts\nA design system is a marathon, not a sprint. They’re never finished. A good \ndesign system is flexible and open to change. You will grow and develop your \nfoundations, components, and patterns as you learn more about your user’s \nneeds and behaviour, and as your brand and business evolve.\nUltimately, the goal is for design systems to become integral to how your \ncompany designs and builds products. To achieve this you need to approach \nsystem design not just from a technical stance, but also from a position of \ncooperation. Diplomacy and communication are as important as the pixels you \ncraft and the code you write.\nLinzi Berry \n(11.16), the Design Systems Lead at Lyft, wrote an excellent article \n(11.17) on approaching design systems in a human-centered way. To quote \nfrom her article:\n“Systems design is not only scientific and meticulous, it’s the mastery \nof interacting with people in a sensitive and",
      "metadata": {
        "startIndex": 7806,
        "endIndex": 8800,
        "chunkIndex": 10,
        "section": "6.  Use a task tracking tool like GitHub Issues, Trello, or Jira so people can post",
        "globalChunkIndex": 398
      }
    },
    {
      "id": "chunk-399",
      "text": "approaching design systems in a human-centered way. To quote \nfrom her article:\n“Systems design is not only scientific and meticulous, it’s the mastery \nof interacting with people in a sensitive and effective way. The \nsystem is an internal tool and our coworkers are its users. They’re \nhuman, just like us, and they want to do a good job. By empathizing, \nreassuring, educating, remaining flexible, sharing, communicating, \nand staying positive — we’ve overcome many hurdles and are \nexcited to take on new challenges in the future.”\nThe designs we create can shape our world in positive ways. When we design \nsystematically, we are able to efficiently create better experiences for our users \n— but design systems also empower us to work better together.\n11.16 twitter.com/taptodismiss\n11.17 medium.com/tap-to-dismiss/art-of-diplomacy-2ad1e2cac795\n\nMAIntAInInG A DesIGn sYsteM  259\nMy hope is that by reading this book, you are inspired and empowered — not \njust to lay strong foundations for the",
      "metadata": {
        "startIndex": 8600,
        "endIndex": 9601,
        "chunkIndex": 11,
        "section": "6.  Use a task tracking tool like GitHub Issues, Trello, or Jira so people can post",
        "globalChunkIndex": 399
      }
    },
    {
      "id": "chunk-400",
      "text": "m.com/tap-to-dismiss/art-of-diplomacy-2ad1e2cac795\n\nMAIntAInInG A DesIGn sYsteM  259\nMy hope is that by reading this book, you are inspired and empowered — not \njust to lay strong foundations for the work you do, but also for the relationships \nyou build. Perhaps the most powerful advantage design systems have is that \nthey allow us to create better work together.\nI sincerely hope you enjoyed this book, and that it helps you and your team.\nGood luck :)\n\nAbout the author\n— Andrew Couldwell\nAbout \nthe \nauthor\n\nAbout tHe AutHor\nAndrew is a web designer and developer, born and raised in Yorkshire, in the \nNorth of England. He started building websites in 2001, back when websites \nwere made of table-based HTML and Flash movies.\nHe started his career at various agencies, where he was employed as a web \ndeveloper, a web designer, and a product designer, respectively. Frustrated by \nthe limited scope and challenges of the agency world, he left to pursue a new \nlife of remote working from",
      "metadata": {
        "startIndex": 9401,
        "endIndex": 10396,
        "chunkIndex": 12,
        "section": "6.  Use a task tracking tool like GitHub Issues, Trello, or Jira so people can post",
        "globalChunkIndex": 400
      }
    },
    {
      "id": "chunk-401",
      "text": "ed as a web \ndeveloper, a web designer, and a product designer, respectively. Frustrated by \nthe limited scope and challenges of the agency world, he left to pursue a new \nlife of remote working from Cornwall, Spain, and London. During this period \nhe did freelance design and web development for brands like NASA, Red Bull, \nMTV, Nike, Harvey Nichols, and Foursquare.\nWhen not working on client projects, Andrew focusses on his long-time \npassion project: a website called Club of the Waves \n(01). First launched in 2006, \nthe site is an international showcase of artists and photographers whose work \nfocusses on surfing and surf culture.\nIn 2014, he moved overseas to New York City to be the lead product designer \nof a new Adobe product. Working with a team of developers at Behance, \ntogether they launched Adobe Portfolio, a tool that helps creatives share their \nwork online. In 2016, he moved onto a new challenge at WeWork as the system \ndesign lead, where he initiated, designed, and",
      "metadata": {
        "startIndex": 10196,
        "endIndex": 11190,
        "chunkIndex": 13,
        "section": "6.  Use a task tracking tool like GitHub Issues, Trello, or Jira so people can post",
        "globalChunkIndex": 401
      }
    },
    {
      "id": "chunk-402",
      "text": "her they launched Adobe Portfolio, a tool that helps creatives share their \nwork online. In 2016, he moved onto a new challenge at WeWork as the system \ndesign lead, where he initiated, designed, and documented their digital brand \nguidelines, and two design systems.\nIn 2018, he returned to freelance design and development, working remotely \nfor clients all around the world. \nAndrew does his best work when he’s designing impactful, meaningful digital \nproducts, and working with creative people who want to help people and make \nthe world a better place. He also loves to build what he designs.\nCurrently based in Los Angeles, California, Andrew lives with his wife, Meagan, \nand their three cats. And they’re expecting their first child\n twins in 2020!\nSee Andrew’s portfolio at roomfive.net\nSay hello @andrewcouldwell\n01 clubofthewaves.com\n\nOwl Studios\nThis book is a product of Owl Studios, who are \na small but dedicated design and development \nstudio.",
      "metadata": {
        "startIndex": 10990,
        "endIndex": 11951,
        "chunkIndex": 14,
        "section": "6.  Use a task tracking tool like GitHub Issues, Trello, or Jira so people can post",
        "globalChunkIndex": 402
      }
    },
    {
      "id": "chunk-403",
      "text": "Andrew’s portfolio at roomfive.net\nSay hello @andrewcouldwell\n01 clubofthewaves.com\n\nOwl Studios\nThis book is a product of Owl Studios, who are \na small but dedicated design and development \nstudio. It was written and designed by Andrew \nCouldwell, and edited by Meagan Fisher.\nWe’re wise — and often nocturnal — designers \nwho code; together we have over 30 years of \npractice creating web experiences. We take on \nprojects of all sizes, from web design and build, \nto product, branding, and system design. We also \ntravel to do workshops and talk at design events, \ninternationally.\nIf you want to work with us; reach out and say \nhello! We’re excited to hear about your \nawesome project.\nowlstudios.co\nhello@owlstudios.co\n\nbeHInD tHe book\nClub of the Waves\nThis name appears a few times thoroughout this \nbook — partly because it’s a website driven by a \ndesign system, and partly because it’s something \nI’m proud to share. Club of the Waves is a labour \nof love I founded back in 2006.",
      "metadata": {
        "startIndex": 11751,
        "endIndex": 12743,
        "chunkIndex": 15,
        "section": "6.  Use a task tracking tool like GitHub Issues, Trello, or Jira so people can post",
        "globalChunkIndex": 403
      }
    },
    {
      "id": "chunk-404",
      "text": "horoughout this \nbook — partly because it’s a website driven by a \ndesign system, and partly because it’s something \nI’m proud to share. Club of the Waves is a labour \nof love I founded back in 2006. It’s an international \nshowcase of artists and photographers whose \nwork focusses on surfing and surf culture. \nCheck out the website and find new artists and \nphotographers I think you’ll love.\nclubofthewaves.com\n@clubofthewaves\n\nAcknowledgments \nI couldn’t have created this book without the support and love of my wonderful \nwife and best friend, Meagan Couldwell \n(02). Writing and publishing a book \nwas only ever going to cost money, not make money. I had to take time out of \npaid work to do it. She only ever encouraged me to do this, and that’s pretty \namazing! Meagan also did a brilliant job editing this book — it simply wouldn’t \nbe what it is without her. Her patience, input, revisions, and contributions (as \na web designer herself ) made the content so much better — all for which",
      "metadata": {
        "startIndex": 12543,
        "endIndex": 13541,
        "chunkIndex": 16,
        "section": "6.  Use a task tracking tool like GitHub Issues, Trello, or Jira so people can post",
        "globalChunkIndex": 404
      }
    },
    {
      "id": "chunk-405",
      "text": "job editing this book — it simply wouldn’t \nbe what it is without her. Her patience, input, revisions, and contributions (as \na web designer herself ) made the content so much better — all for which I’m \nvery grateful.\nAlso, thanks to our little family of cats! Fluffy, Theo, and Junior. I most \ncertainly wrote some of this book with Fluffy on my lap, Theo pressed into me \nby my side, or attempting to type while Junior, Fluffy, or Theo tried to sit on the \nkeyboard. Our little family of cats and my wife make me a happier person. A \nhappy, healthy mind helps you do your best work.\nI’d like to thank my amazing family: Mum, Ian, grandparents, uncles, aunties, \ncousins... everyone. Though I may live on a different continent to them \nnow, they shaped who I am — and have always been supportive in my crazy \nendeavours to live and work abroad. And thank you to my ‘new’ family in the \nUnited States who have made me feel so welcome. I love you all.\nThanks to all my friends, internationally.",
      "metadata": {
        "startIndex": 13341,
        "endIndex": 14337,
        "chunkIndex": 17,
        "section": "6.  Use a task tracking tool like GitHub Issues, Trello, or Jira so people can post",
        "globalChunkIndex": 405
      }
    },
    {
      "id": "chunk-406",
      "text": "ve in my crazy \nendeavours to live and work abroad. And thank you to my ‘new’ family in the \nUnited States who have made me feel so welcome. I love you all.\nThanks to all my friends, internationally. Once upon a time, I virtually lived to \nwork. It got me a long way in my career, but it never made me happy. One of \nthe most important lessons I’ve learned is to strike a good work/life balance. \nThe friends I’ve made along the way, in Yorkshire, Cornwall, London, and New \nYork have made me a happier, healthier, and stronger person. Though my liver \nmight not share the same view!\nProfessionally, almost everyone I’ve worked with has in some small or large \nway informed much of what I cover in this book. Good and bad, thank you for \nthe learning experiences.\nI’d like to specifically thank a few former work colleagues. Nick Stamas \n(03) is \none of the rare people I’ve worked with whose talent and experimental nature \npushed me to be better, learn, and grow.",
      "metadata": {
        "startIndex": 14137,
        "endIndex": 15103,
        "chunkIndex": 18,
        "section": "6.  Use a task tracking tool like GitHub Issues, Trello, or Jira so people can post",
        "globalChunkIndex": 406
      }
    },
    {
      "id": "chunk-407",
      "text": "d like to specifically thank a few former work colleagues. Nick Stamas \n(03) is \none of the rare people I’ve worked with whose talent and experimental nature \npushed me to be better, learn, and grow. Working with Nick on design systems \ninformed a good deal of the content of this book — and for that, he deserves \nhuge credit and thanks. Also, thanks to Keaton Price \n(04), who’s patient, \nsystematic, and iterative approach to design problems (and office politics) is \ninspiring — and something I held in mind a good few times while writing this \nbook. And finally, Bobby Ghoshal \n(05), who set me on the path to discovering \nthe Foundations Model and the idea of Digital Foundations. He didn’t tell me \n\nACknoWLeDGeMents\nwhat to do or how to do it. Instead, he freed me from the chains of my daily \nroutine and encouraged me to do what would ultimately be some of my best \nand most influential work to date.\nI’d like to thank Shane Mielke \n(06).",
      "metadata": {
        "startIndex": 14903,
        "endIndex": 15852,
        "chunkIndex": 19,
        "section": "6.  Use a task tracking tool like GitHub Issues, Trello, or Jira so people can post",
        "globalChunkIndex": 407
      }
    },
    {
      "id": "chunk-408",
      "text": "t. Instead, he freed me from the chains of my daily \nroutine and encouraged me to do what would ultimately be some of my best \nand most influential work to date.\nI’d like to thank Shane Mielke \n(06). The only part of this book process I knew \nhow to do was write. The rest was a mystery to me. Shane shared with me his \nstory of how he self-published his book, Launch It, and everything he’d learned \ndoing it.\nThank you to my good friend, Paul Davies \n(07). Paul took a chance on me early \nin my career, which proved to be a big turning point for me \n(08). 11 years later, \nhe kindly volunteered to proof-read this book, which I graciously accepted. It’s   \njust a shame he hated it! Only joking :)\nAnd finally, thank you! It means a lot to me that you read my book. I hope \nyou enjoyed it and found it useful. If you did, I’d really appreciate it if you’d \nrecommend this book to your friends, colleagues, and followers.\nIf I forgot you, I’m sorry, and thank you :)\n02 owltastic.com\n03",
      "metadata": {
        "startIndex": 15652,
        "endIndex": 16640,
        "chunkIndex": 20,
        "section": "6.  Use a task tracking tool like GitHub Issues, Trello, or Jira so people can post",
        "globalChunkIndex": 408
      }
    },
    {
      "id": "chunk-409",
      "text": "it and found it useful. If you did, I’d really appreciate it if you’d \nrecommend this book to your friends, colleagues, and followers.\nIf I forgot you, I’m sorry, and thank you :)\n02 owltastic.com\n03 nickstamas.com\n04 keaton.design\n05 twitter.com/ghoshal\n06 shanemielke.com\n07 bhvr.co.uk\n08 medium.com/@andrewcouldwell/i-nearly-quit-42c246c15b74\n\nFor you, Dad\nI would like to dedicate this book to my dad, \nMichael Couldwell. I lost my dad to a short battle \nwith cancer before my 30th birthday. It knocked \nme sideways. He raised me to be competitive — \nfor better or for worse. Much of my teen years \nand young adulthood were spent trying to make \nmy Dad proud. He never saw me leave England’s \nshores to live and work in New York City. He only \ncaught a glimpse of my career taking off before \nthat. He never got to meet my wife, or my future \nkids. I often wonder how he’d feel about much of \nwhat I’ve done since he left. I wrote a book! I’m \nproud of that.",
      "metadata": {
        "startIndex": 16440,
        "endIndex": 17403,
        "chunkIndex": 21,
        "section": "6.  Use a task tracking tool like GitHub Issues, Trello, or Jira so people can post",
        "globalChunkIndex": 409
      }
    },
    {
      "id": "chunk-410",
      "text": "e of my career taking off before \nthat. He never got to meet my wife, or my future \nkids. I often wonder how he’d feel about much of \nwhat I’ve done since he left. I wrote a book! I’m \nproud of that. I think he would be too.\nSo this book’s for him. I love you, Dad.\n\nDeDICAtIon\nFin",
      "metadata": {
        "startIndex": 17203,
        "endIndex": 18203,
        "chunkIndex": 22,
        "section": "6.  Use a task tracking tool like GitHub Issues, Trello, or Jira so people can post",
        "globalChunkIndex": 410
      }
    }
  ],
  "metadata": {
    "category": "general",
    "tags": [],
    "confidence": "high",
    "last_updated": "2025-06-28T12:27:53.601Z"
  }
}